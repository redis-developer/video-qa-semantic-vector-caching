0:00:00.000,0:00:02.790
Hello, and welcome back.

0:00:02.790,0:00:06.350
In this video, we'll take a look
at what's new with Redis JSON.

0:00:06.350,0:00:08.960
The big news is that you
can now efficiently query

0:00:08.960,0:00:11.960
and index your JSON
documents in Redis.

0:00:11.960,0:00:14.660
I want to revisit my previous
challenge of organizing

0:00:14.660,0:00:16.430
my favorite food
trucks in Oakland,

0:00:16.430,0:00:19.760
but this time let's add some
extra spice with JSON path

0:00:19.760,0:00:22.670
syntax and querying
documents with Redis search.

0:00:22.670,0:00:31.740
Tuck in, and let's get started

0:00:31.740,0:00:34.710
To start, we'll fire up
a Redis Stack instance,

0:00:34.710,0:00:39.390
which supports JSON, indexing,
queries, and quite a bit more.

0:00:39.390,0:00:42.450
We'll also be using
RedisInsight, the Redis GUI,

0:00:42.450,0:00:44.250
in these demos.

0:00:44.250,0:00:47.310
Let's first check out the
JSON we'll be working with.

0:00:47.310,0:00:49.620
Our food trucks have been busy.

0:00:49.620,0:00:52.590
Each food truck JSON
object, known as a vendor,

0:00:52.590,0:00:55.200
has a name, an array
of cuisines offered,

0:00:55.200,0:00:58.320
a primary cuisine,
and an address.

0:00:58.320,0:01:00.030
There are events
about town that have

0:01:00.030,0:01:02.970
a number of attending
vendors, a start and end time,

0:01:02.970,0:01:06.190
and an associated location ID.

0:01:06.190,0:01:09.670
Lastly, there are locations that
host events for the vendors.

0:01:09.670,0:01:11.890
Locations contain
an address object

0:01:11.890,0:01:15.220
with coordinates providing
the longitude and latitude.

0:01:15.220,0:01:17.470
We can use these
three JSON object

0:01:17.470,0:01:19.450
types to discover
which food trucks will

0:01:19.450,0:01:23.110
be at certain locations
during specific events.

0:01:23.110,0:01:25.600
Let's start by inserting
a new vendor JSON

0:01:25.600,0:01:28.450
object into our Redis instance.

0:01:28.450,0:01:30.540
Our new vendor is
one of my favorites--

0:01:30.540,0:01:32.670
Tacos Mi Rancho.

0:01:32.670,0:01:34.620
Here's the JSON object.

0:01:34.620,0:01:37.440
We haven't inserted any
event for Tacos Mi Rancho

0:01:37.440,0:01:38.440
to attend yet.

0:01:38.440,0:01:40.410
We'll do that in a bit.

0:01:40.410,0:01:43.950
I'll call JSON.SET
followed by a key name.

0:01:43.950,0:01:47.100
I'll use the format truck
colon and a unique ID number

0:01:47.100,0:01:48.910
for each vendor.

0:01:48.910,0:01:50.290
This is a new document.

0:01:50.290,0:01:53.010
So I'll be storing
it at the root path.

0:01:53.010,0:01:55.020
I'll do this by
setting the path option

0:01:55.020,0:01:57.780
to the dollar sign followed
by the JSON document

0:01:57.780,0:01:59.740
in single quotes.

0:01:59.740,0:02:01.890
Now we'll add
another JSON document

0:02:01.890,0:02:05.650
that we'll use to store
details about a location.

0:02:05.650,0:02:09.389
Here's a location JSON object
representing the San Francisco

0:02:09.389,0:02:11.490
International Airport.

0:02:11.490,0:02:14.190
We'll store the entire
JSON document in Redis

0:02:14.190,0:02:17.730
in the same manner we used
with the previous truck object.

0:02:17.730,0:02:22.710
Only this time, the key
name will be location:23.

0:02:22.710,0:02:25.090
Finally, to bring
everything together,

0:02:25.090,0:02:29.160
we'll create a third document
containing an event object.

0:02:29.160,0:02:33.240
This object contains a location
ID, start and end dates,

0:02:33.240,0:02:36.570
and the number of
vendors attending.

0:02:36.570,0:02:40.080
Let's create an event at
SFO on the 14th of July

0:02:40.080,0:02:43.470
starting at 10:30 AM
and ending at 2:00 PM.

0:02:43.470,0:02:45.270
I'm converting the
start time and end

0:02:45.270,0:02:48.450
time to Unix timestamps,
so we can query the dates.

0:02:48.450,0:02:50.940
Now, we need to update
our vendors that

0:02:50.940,0:02:53.430
have the events within
their object populated

0:02:53.430,0:02:56.140
with all of the events
that they are attending.

0:02:56.140,0:02:59.470
Since the events property
within the vendor is an array,

0:02:59.470,0:03:02.290
I'll use an array
append function.

0:03:02.290,0:03:08.260
I'll call JSON.ARRAPPEND,
truck:42, the JSON path,

0:03:08.260,0:03:12.880
$.events, and lastly,
the idea of the event.

0:03:12.880,0:03:16.270
Events also need to take
place at a location.

0:03:16.270,0:03:18.490
Fortunately, we
have JSON documents

0:03:18.490,0:03:21.190
representing various locations
within the Bay Area that

0:03:21.190,0:03:24.250
will host the food trucks.

0:03:24.250,0:03:27.250
Here's the JSON document
for our location.

0:03:27.250,0:03:30.190
Notice the info object
within containing the address

0:03:30.190,0:03:32.110
information and coordinates.

0:03:32.110,0:03:35.500
Redis JSON has no problem
storing embedded objects--

0:03:35.500,0:03:37.690
a vast improvement
over storing data

0:03:37.690,0:03:39.610
as traditional flat hashes.

0:03:39.610,0:03:42.010
Now, each event must
have a location,

0:03:42.010,0:03:45.550
so I'll insert the location
ID into the event JSON with

0:03:45.550,0:03:52.750
JSON.SET, event:11,
$.location_id.

0:03:52.750,0:03:54.760
I've shown you how to
create and manipulate

0:03:54.760,0:03:58.480
JSON documents in Redis with the
newest version of Redis JSON.

0:03:58.480,0:04:02.560
But did you know you can also
index and query your JSON data?

0:04:02.560,0:04:05.650
RediSearch, another
component of Redis Stack,

0:04:05.650,0:04:08.680
allows us to index data
within our JSON documents

0:04:08.680,0:04:11.680
and perform queries over
a collection of documents.

0:04:11.680,0:04:14.330
I'll show you how
to do just that.

0:04:14.330,0:04:17.769
I'm using Redis Stack, so
RediSearch is already installed

0:04:17.769,0:04:19.459
and ready to go.

0:04:19.459,0:04:22.000
I'm going to create an
index on a few select fields

0:04:22.000,0:04:24.100
within my JSON data structure.

0:04:24.100,0:04:26.800
This means I search using
terms that I would expect

0:04:26.800,0:04:29.020
to find within these fields.

0:04:29.020,0:04:32.410
I want to search for a vendor's
name, a particular cuisine,

0:04:32.410,0:04:35.530
locations of events near
me, or maybe events that

0:04:35.530,0:04:37.720
have more than five
food trucks, so we can

0:04:37.720,0:04:39.880
enjoy some culinary variety.

0:04:39.880,0:04:44.020
To do this, we'll want to create
search indexes on the vendor

0:04:44.020,0:04:45.310
and event documents.

0:04:45.310,0:04:48.070
I'll start with the vendors.

0:04:48.070,0:04:50.590
To create an index
on all food trucks,

0:04:50.590,0:04:54.320
I'll call FT.CREATE
followed by a name.

0:04:54.320,0:04:57.340
I'll call it idx:truck.

0:04:57.340,0:05:01.030
ON JSON tells RediSearch that
will be indexing and searching

0:05:01.030,0:05:03.130
through JSON documents.

0:05:03.130,0:05:07.030
PREFIX 1 truck colon
instructs RediSearch

0:05:07.030,0:05:11.170
to look inside all documents
of the key prefix truck colon.

0:05:11.170,0:05:14.200
This means that all subsequent
vendor documents should also

0:05:14.200,0:05:16.990
have the truck colon key prefix.

0:05:16.990,0:05:20.500
SCHEMA tells RediSearch to
create indexes with ensuing

0:05:20.500,0:05:23.790
property and search type pairs.

0:05:23.790,0:05:28.740
$.name AS name TEXT allows us
to search the name properties

0:05:28.740,0:05:31.140
as text under the
search field name.

0:05:31.140,0:05:33.060
SORTABLE means we'll
receive the return search

0:05:33.060,0:05:36.090
results in a sortable list.

0:05:36.090,0:05:38.180
The next line is a
bit more complex.

0:05:38.180,0:05:40.790
We're flagging everything
within the array cuisines

0:05:40.790,0:05:43.550
within the vendor
object as a tag search

0:05:43.550,0:05:45.660
type separated by commas.

0:05:45.660,0:05:48.830
So as an example, if we had
a cuisines array containing

0:05:48.830,0:05:54.200
BBQ, barbecue, and Texas, all
three will be counted as tags.

0:05:54.200,0:05:56.210
Now, I'll demonstrate
searching using

0:05:56.210,0:05:58.215
the index we just created.

0:05:58.215,0:05:59.840
I'll look for the
food truck we created

0:05:59.840,0:06:02.690
by their name, Tacos Mi Rancho.

0:06:02.690,0:06:05.660
Since they have
the key, truck:42,

0:06:05.660,0:06:08.630
RediSearch will have included
this document in the index

0:06:08.630,0:06:11.090
based on the truck colon prefix.

0:06:11.090,0:06:17.690
I'll call FT.SEARCH, the index,
idx:truck, then the query.

0:06:17.690,0:06:19.770
Since I'll be
searching for a name,

0:06:19.770,0:06:23.210
I'll use @name to indicate I
want to search within the name

0:06:23.210,0:06:25.580
field of the JSON entries.

0:06:25.580,0:06:28.530
I'll enter the word
tacos as the search term.

0:06:28.530,0:06:32.780
And I've received the vendor
object for Tacos Mi Rancho.

0:06:32.780,0:06:35.630
If I want to search using a
phrase with multiple words,

0:06:35.630,0:06:38.450
I'll want to wrap the entire
query in single quotes

0:06:38.450,0:06:40.610
like this.

0:06:40.610,0:06:43.490
Next, I'll search
for a tag data type.

0:06:43.490,0:06:45.890
Remember that we set the
cuisines array in our vendor

0:06:45.890,0:06:49.280
documents as a list of
tags in our search index.

0:06:49.280,0:06:53.300
This allows me to enter one of
the tag words as a search term.

0:06:53.300,0:06:59.090
I'll call FT.SEARCH, idx:truck,
followed by the cuisines field.

0:06:59.090,0:07:01.040
I want to find
vendors with a tag

0:07:01.040,0:07:03.570
word Peruvian within
their cuisines array.

0:07:03.570,0:07:06.410
So I'll enter Peruvian
in curly braces.

0:07:06.410,0:07:09.080
Note that when searching
tags, the term must

0:07:09.080,0:07:11.570
be wrapped in curly braces.

0:07:11.570,0:07:15.470
Now, I want to create an index
for our event JSON documents.

0:07:15.470,0:07:17.870
For this index, I'll be
searching through all keys

0:07:17.870,0:07:20.150
with the prefix event colon.

0:07:20.150,0:07:22.910
The SCHEMA will have three
fields to search through--

0:07:22.910,0:07:27.380
$.assigned_vendors AS
assigned_underscore NUMERIC

0:07:27.380,0:07:28.580
SORTABLE.

0:07:28.580,0:07:31.610
This indicates that assigned
vendors will be a number.

0:07:31.610,0:07:33.480
I'll want to be able
to sort the results,

0:07:33.480,0:07:36.180
so I'm including the
option, SORTABLE.

0:07:36.180,0:07:40.560
$.name will be treated the same
as the vendor object's name.

0:07:40.560,0:07:42.600
I'll set it as a
text search type,

0:07:42.600,0:07:44.790
and the results
will be sortable.

0:07:44.790,0:07:48.600
I want to treat $.location_name
the same as name.

0:07:48.600,0:07:52.410
I'll set it as
location_name TEXT.

0:07:52.410,0:07:55.980
Now, I'll try to find an event
with five or more food trucks.

0:07:55.980,0:08:00.990
I'll call FT.SEARCH, specifying
idx:event as the index

0:08:00.990,0:08:02.190
the search.

0:08:02.190,0:08:05.700
In my query, @assigned_vendors
tells RediSearch

0:08:05.700,0:08:09.360
the field to look at and 5 and
infinite in square brackets

0:08:09.360,0:08:12.210
to find the range of
values to search for.

0:08:12.210,0:08:15.570
Pro tip-- if I wanted to
search for events with exactly

0:08:15.570,0:08:17.490
five assigned vendors,
I would simply

0:08:17.490,0:08:20.420
set the range from 5 to 5.

0:08:20.420,0:08:23.030
The event I created earlier
is returned since it

0:08:23.030,0:08:24.830
has eight assigned vendors.

0:08:24.830,0:08:27.820
That's a lot of
delicious options.

0:08:27.820,0:08:28.700
OK.

0:08:28.700,0:08:30.950
That was a lot of
info to go over.

0:08:30.950,0:08:33.470
If you'd like to learn more
about the new Redis JSON

0:08:33.470,0:08:36.740
and how well it interacts with
RediSearch at your own pace,

0:08:36.740,0:08:38.480
check out our new
Redis University

0:08:38.480,0:08:42.919
course, RU204, Storing,
Querying, and Indexing

0:08:42.919,0:08:44.450
JSON at Speed.

0:08:44.450,0:08:47.180
It's just one of many courses
available to you covering

0:08:47.180,0:08:49.545
specific topics within Redis.

0:08:49.545,0:08:51.860
If you'd like to try
it out Redis Stack,

0:08:51.860,0:08:55.020
use one of the links in the
video description below.

0:08:55.020,0:08:56.750
You can download
Redis Stack, or you

0:08:56.750,0:08:59.930
can provision a basic instance
in the cloud for free.

0:08:59.930,0:09:03.710
No installation or local
configuration necessary.

0:09:03.710,0:09:05.010
Thanks for watching.

0:09:05.010,0:09:08.270
I hope you enjoy these delicious
new updates to Redis JSON

0:09:08.270,0:09:11.860
and find them just as
appetizing as I do.
