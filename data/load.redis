"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "router.videos.load" "message" "Loading videos..." "meta" "{\"location\":\"router.videos.load\",\"videos\":[\"AJhTduDOVCs,c9Rr--1r6pk\",\"FQzlq91g7mg\",\"I-ohlZXXaxs\",\"KUfufrwpBkM\",\"LaiQFZ5bXaM\",\"SzcpwtLRgyk\",\"Z8qcpXyMAiA\"]}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "transcripts.load.getVideoInfo" "message" "Getting info about videos: [\"FQzlq91g7mg\",\"I-ohlZXXaxs\",\"KUfufrwpBkM\",\"LaiQFZ5bXaM\",\"SzcpwtLRgyk\",\"Z8qcpXyMAiA\"]" "meta" "{\"location\":\"transcripts.load.getVideoInfo\"}"
"JSON.SET" "yt-videos:FQzlq91g7mg" "$" "{\"title\":\"Redis + MySQL in 60 Seconds\",\"description\":\"What are the possibilities for MySQL when integrating with the real-time power of Redis? Try Redis Cloud for free: https://redis.com/try-free/\\n\\nMySQL is open source, free, and can be fast when working on a relational database, but to handle modern use cases, your MySQL will need a boost of real-time performance - the type Redis Enterprise can provide. MySQL can be difficult to scale and lacks the modern features necessary to quickly operate complex queries. Enable your MySQL applications with the real-time performance power of Redis.\\n\\nFrom the blog: https://redis.com/blog/3-reasons-your-mysql-db-needs-redis/\\n\\nDownload our MySQL Solution Brief: https://redis.com/docs/modernize-your-mysql-database-with-redis-enterprise/\\n\\nExplore Redis + MySQL: https://redis.com/comparisons/redis-enterprise-and-mysql/\\n\\nTry Redis Enterprise Cloud for free: https://redis.com/try-free/\\n\\n#MySQL #SQL #Redis\",\"thumbnail\":\"https://i.ytimg.com/vi/FQzlq91g7mg/maxresdefault.jpg\"}"
"JSON.SET" "yt-videos:I-ohlZXXaxs" "$" "{\"title\":\"Redis and JSON  Explained (Revisited)\",\"description\":\"Hungry for more Redis and JSON tips and tricks? Check out this video from Redis on how to create and update JSON documents in a Redis Stack instance! Then create secondary search indexes with Redis and Search to query Redis for some delicious results!\\n\\n00:00 Introduction\\n00:32 Why we use Redis Stack\\n00:44 Intro to the use case\\n01:22 JSON.SET truck:42 - create and store a vendor JSON object\\n02:00 JSON.SET location:23 - create and store a location JSON object\\n02:21 JSON.SET event:11 - create and store an event JSON object\\n02:47 JSON.ARRAPPEND - ad an element to an existing JSON array\\n03:11 JSON.SET - adding to an existing JSON document\\n03:52 Redis Search & JSON\\n04:46 FT.CREATE - creating a search index for \\\"truck:\\\" JSON documents\\n05:55 FT.SEARCH - query for text within a search index\\n06:40 FT.SEARCH - query for TAG words within a search index\\n07:10 FT.CREATE - creating a search index for \\\"event:\\\" JSON. documents\\n07:51 FT.SEARCH - query for numeric range within a search index\\n08:26 Conclusion\\n\\nLinks: \\nRU204: Storing, Querying, and Indexing JSON at Speed: https://university.redis.com/courses/ru204/\\nRedis University \xe2\x86\x92 https://university.redis.com/\\nRedis \xe2\x86\x92 https://www.redis.com/\\nRedis Stack \xe2\x86\x92 https://redis.io/docs/stack/\\nRedis and JSON \xe2\x86\x92 https://redis.io/docs/stack/json/\\nRedis and Search \xe2\x86\x92 https://redis.io/docs/stack/search/\\nNeed a Redis Cloud now? Sign up for a free Redis Cloud Essentials account \xe2\x86\x92 https://bit.ly/3xdTyMR\\n\\nJoin our discord server \xe2\x86\x92 https://discord.gg/redis\",\"thumbnail\":\"https://i.ytimg.com/vi/I-ohlZXXaxs/maxresdefault.jpg\"}"
"JSON.SET" "yt-videos:KUfufrwpBkM" "$" "{\"title\":\"Redis Stack Workshop: Redis Stack OM Library for Node.js\",\"description\":\"Join us on April 13th at 5:30pm GMT for the Redis Stack OM library for Node.js workshop with Redis Developer Advocate Guy Royse. \\n\\nTune in to follow as Guy demonstrates how to create applications using Redis Stack and Node.js. Also, see how to store your data using Redis OM and store data using RedisJSON. Follow along with the sample application built with Express, which is available on GitHub. Guy will be on chat to answer any questions. Stay tuned!\\n\\nSource code for the demo application: https://github.com/redis-developer/express-redis-om-workshop\\nRedis OM Client for Node.js: https://github.com/redis/redis-om-node\\n\\nFrom the blog: https://redis.com/blog/introducing-redis-stack/\\nDiscover Redis Stack: https://redis.io/docs/stack/\\n\\n#Redis #RedisStack #NodeJS #RedisOM\",\"thumbnail\":\"https://i.ytimg.com/vi/KUfufrwpBkM/maxresdefault.jpg\"}"
"JSON.SET" "yt-videos:LaiQFZ5bXaM" "$" "{\"title\":\"Redis Stack Crash Course: How to Build Apps with Superpowers\",\"description\":\"Redis Stack turns Redis into a multi-model database, enabling you to build rich real-time applications with Redis as a primary database. Explore Redis Stack - http://redis.info/3Lq9gbF\\n\\nRedis Stack consolidates the capabilities of the leading Redis modules into a single product, making it easy for developers to build modern, real-time applications with the speed and stability of Redis.\\n\\nRedis Stack is free and unifies the leading Redis modules in a single product. This makes it easy to start building with our Redis-based search, document, graph, and time series capabilities.\\n\\nRedis Stack is a suite of three components:\\n\\n- Redis Stack Server combines open source Redis with RediSearch, RedisJSON, RedisGraph, RedisTimeSeries and RedisBloom\\n\\n- RedisInsight is a powerful tool for visualizing and optimizing Redis data, making real-time application development easier and more fun than ever before\\n\\n- The Redis Stack Client SDK includes the leading official Redis clients in Java, JavaScript, and Python.  These clients also include our new suite of object mapping libraries which offer developer-friendly abstractions that get you productive with just a few lines of code. Known as Redis OM for .NET, Node.js, Java, and Python, these libraries also make it easier than ever to integrate with major application frameworks such as Spring, ASP.NET Core, FastAPI, and Express.\\n\\nSign up for Redis Cloud for free using code TIGER200: https://redis.info/3pyzVea\\n\\nGet the Source Code for This Video: https://redis.info/36PTesO\\n\\nFrom the Blog: https://redis.com/blog/introducing-redis-stack/\\n\\nLearn more about Redis Stack: http://redis.info/3Lq9gbF\\n\\n#RedisStack #Redis #RedisEnterprise #RealTimeData\",\"thumbnail\":\"https://i.ytimg.com/vi/LaiQFZ5bXaM/maxresdefault.jpg\"}"
"JSON.SET" "yt-videos:SzcpwtLRgyk" "$" "{\"title\":\"RedisTimeSeries Explained\",\"description\":\"Have you ever tried to wrangle data via timestamps but never had the time to do so? Join Justin as we take a stroll down 'in-memory' lane with the RedisTimeSeries module.  The RedisTimeSeries module, part of Redis Stack, lets the developer create time series data structures within Redis with the speed you've come to love from Redis. Redis Stack is an extension of Redis that adds modern data models and processing engines to provide a complete developer experience.\\n\\nIn addition to all of the features of OSS Redis, Redis stack supports:\\n- Queryable JSON documents\\n- Full-text search\\n- Time series data (ingestion & querying)\\n- Graph data models with the Cypher query language\\n- Probabilistic data structures\\n\\n00:00 Introduction\\n00:25 What is RedisTimeSeries?\\n00:50 Example explanation\\n01:27 TS.CREATE - create a time series object\\n03:01 TS.ADD - add to a time series object\\n03:31 TS.ALTER - update a time series object's options\\n04:00 TS.RANGE - retrieve a range of a time series' values\\n06:06 TS.CREATERULE - create rule for a time series object\\n07:48 TS.QUERYINDEX - query labels across time series objects\\n08:29 Conclusion\\n\\nLinks: \\nRedis University \xe2\x86\x92 https://university.redis.com/\\nRedis \xe2\x86\x92 https://www.redis.com/\\nRedisTimeSeries \xe2\x86\x92 https://redis.io/docs/stack/timeseries/\\nNeed a Redis Cloud  now? Sign up for a free Redis Cloud Essentials account \xe2\x86\x92 https://bit.ly/3xdTyMR\\n\\nJoin our discord server \xe2\x86\x92 https://discord.gg/redis\",\"thumbnail\":\"https://i.ytimg.com/vi/SzcpwtLRgyk/maxresdefault.jpg\"}"
"JSON.SET" "yt-videos:Z8qcpXyMAiA" "$" "{\"title\":\"Redis Streams Explained\",\"description\":\"Redis Streams allow us to aggregate numerous sources of information into one easily consumable source of truth. Join Justin as we learn about the utility and power of the Redis Streams data structure.\\n\\nLinks: \\nRedis University \xe2\x86\x92 https://university.redislabs.com/\\nRedis University Streams Course \xe2\x86\x92 https://university.redislabs.com/courses/ru202/\\nRedis Labs \xe2\x86\x92 https://www.redislabs.com/\\nRedis Streams Introduction \xe2\x86\x92 https://redis.io/topics/streams-intro\\nNeed a Redis cluster now? Sign up for a free Redis Cloud Essentials account \xe2\x86\x92 https://bit.ly/2wasiCa\\n\\nJoin our discord server \xe2\x86\x92 https://discord.gg/redis\",\"thumbnail\":\"https://i.ytimg.com/vi/Z8qcpXyMAiA/maxresdefault.jpg\"}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "transcripts.load.getTranscript" "message" "Getting transcript for https://www.youtube.com/watch?v=FQzlq91g7mg" "meta" "{\"location\":\"transcripts.load.getTranscript\"}"
"SET" "transcripts:FQzlq91g7mg" "look everybody and their dog knows my\nsequel it's free and open source so it's\neasy to start with\nbut it's not so easy once your data\nreally starts to scale mysql is fast for\na relational database but at scale\nresponses get really slow and if i'm\nrunning secondary indexes forget it\ndo you know of anyone running their high\nperformance applications off of my sql\nno they are subsetting data from my sql\nto some other performance solution well\ni can think of a performance solution\nredis enterprise the world's leading\nreal-time data platform\nredis enterprise can be used alongside\nyour mysql database to store your\napplication's most critical and commonly\naccess data in memory to deliver it with\nsub millisecond speed\nwhat about those pesky secondary indexed\nqueries you can use redis enterprise to\noffload them which speeds up the\nresponses to your applications and takes\nsome of that skilling pain off of your\nmysql database mind blown check out the\nwebinar below to learn more and see my\nsql and redis enterprise in action"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "transcripts.load.getTranscript" "message" "Getting transcript for https://www.youtube.com/watch?v=I-ohlZXXaxs" "meta" "{\"location\":\"transcripts.load.getTranscript\"}"
"SET" "transcripts:I-ohlZXXaxs" "Hello, and welcome back.\nIn this video, we'll take a look at what's new with Redis JSON.\nThe big news is that you can now efficiently query\nand index your JSON documents in Redis.\nI want to revisit my previous challenge of organizing\nmy favorite food trucks in Oakland,\nbut this time let's add some extra spice with JSON path\nsyntax and querying documents with Redis search.\nTuck in, and let's get started\nTo start, we'll fire up a Redis Stack instance,\nwhich supports JSON, indexing, queries, and quite a bit more.\nWe'll also be using RedisInsight, the Redis GUI,\nin these demos.\nLet's first check out the JSON we'll be working with.\nOur food trucks have been busy.\nEach food truck JSON object, known as a vendor,\nhas a name, an array of cuisines offered,\na primary cuisine, and an address.\nThere are events about town that have\na number of attending vendors, a start and end time,\nand an associated location ID.\nLastly, there are locations that host events for the vendors.\nLocations contain an address object\nwith coordinates providing the longitude and latitude.\nWe can use these three JSON object\ntypes to discover which food trucks will\nbe at certain locations during specific events.\nLet's start by inserting a new vendor JSON\nobject into our Redis instance.\nOur new vendor is one of my favorites--\nTacos Mi Rancho.\nHere's the JSON object.\nWe haven't inserted any event for Tacos Mi Rancho\nto attend yet.\nWe'll do that in a bit.\nI'll call JSON.SET followed by a key name.\nI'll use the format truck colon and a unique ID number\nfor each vendor.\nThis is a new document.\nSo I'll be storing it at the root path.\nI'll do this by setting the path option\nto the dollar sign followed by the JSON document\nin single quotes.\nNow we'll add another JSON document\nthat we'll use to store details about a location.\nHere's a location JSON object representing the San Francisco\nInternational Airport.\nWe'll store the entire JSON document in Redis\nin the same manner we used with the previous truck object.\nOnly this time, the key name will be location:23.\nFinally, to bring everything together,\nwe'll create a third document containing an event object.\nThis object contains a location ID, start and end dates,\nand the number of vendors attending.\nLet's create an event at SFO on the 14th of July\nstarting at 10:30 AM and ending at 2:00 PM.\nI'm converting the start time and end\ntime to Unix timestamps, so we can query the dates.\nNow, we need to update our vendors that\nhave the events within their object populated\nwith all of the events that they are attending.\nSince the events property within the vendor is an array,\nI'll use an array append function.\nI'll call JSON.ARRAPPEND, truck:42, the JSON path,\n$.events, and lastly, the idea of the event.\nEvents also need to take place at a location.\nFortunately, we have JSON documents\nrepresenting various locations within the Bay Area that\nwill host the food trucks.\nHere's the JSON document for our location.\nNotice the info object within containing the address\ninformation and coordinates.\nRedis JSON has no problem storing embedded objects--\na vast improvement over storing data\nas traditional flat hashes.\nNow, each event must have a location,\nso I'll insert the location ID into the event JSON with\nJSON.SET, event:11, $.location_id.\nI've shown you how to create and manipulate\nJSON documents in Redis with the newest version of Redis JSON.\nBut did you know you can also index and query your JSON data?\nRediSearch, another component of Redis Stack,\nallows us to index data within our JSON documents\nand perform queries over a collection of documents.\nI'll show you how to do just that.\nI'm using Redis Stack, so RediSearch is already installed\nand ready to go.\nI'm going to create an index on a few select fields\nwithin my JSON data structure.\nThis means I search using terms that I would expect\nto find within these fields.\nI want to search for a vendor's name, a particular cuisine,\nlocations of events near me, or maybe events that\nhave more than five food trucks, so we can\nenjoy some culinary variety.\nTo do this, we'll want to create search indexes on the vendor\nand event documents.\nI'll start with the vendors.\nTo create an index on all food trucks,\nI'll call FT.CREATE followed by a name.\nI'll call it idx:truck.\nON JSON tells RediSearch that will be indexing and searching\nthrough JSON documents.\nPREFIX 1 truck colon instructs RediSearch\nto look inside all documents of the key prefix truck colon.\nThis means that all subsequent vendor documents should also\nhave the truck colon key prefix.\nSCHEMA tells RediSearch to create indexes with ensuing\nproperty and search type pairs.\n$.name AS name TEXT allows us to search the name properties\nas text under the search field name.\nSORTABLE means we'll receive the return search\nresults in a sortable list.\nThe next line is a bit more complex.\nWe're flagging everything within the array cuisines\nwithin the vendor object as a tag search\ntype separated by commas.\nSo as an example, if we had a cuisines array containing\nBBQ, barbecue, and Texas, all three will be counted as tags.\nNow, I'll demonstrate searching using\nthe index we just created.\nI'll look for the food truck we created\nby their name, Tacos Mi Rancho.\nSince they have the key, truck:42,\nRediSearch will have included this document in the index\nbased on the truck colon prefix.\nI'll call FT.SEARCH, the index, idx:truck, then the query.\nSince I'll be searching for a name,\nI'll use @name to indicate I want to search within the name\nfield of the JSON entries.\nI'll enter the word tacos as the search term.\nAnd I've received the vendor object for Tacos Mi Rancho.\nIf I want to search using a phrase with multiple words,\nI'll want to wrap the entire query in single quotes\nlike this.\nNext, I'll search for a tag data type.\nRemember that we set the cuisines array in our vendor\ndocuments as a list of tags in our search index.\nThis allows me to enter one of the tag words as a search term.\nI'll call FT.SEARCH, idx:truck, followed by the cuisines field.\nI want to find vendors with a tag\nword Peruvian within their cuisines array.\nSo I'll enter Peruvian in curly braces.\nNote that when searching tags, the term must\nbe wrapped in curly braces.\nNow, I want to create an index for our event JSON documents.\nFor this index, I'll be searching through all keys\nwith the prefix event colon.\nThe SCHEMA will have three fields to search through--\n$.assigned_vendors AS assigned_underscore NUMERIC\nSORTABLE.\nThis indicates that assigned vendors will be a number.\nI'll want to be able to sort the results,\nso I'm including the option, SORTABLE.\n$.name will be treated the same as the vendor object's name.\nI'll set it as a text search type,\nand the results will be sortable.\nI want to treat $.location_name the same as name.\nI'll set it as location_name TEXT.\nNow, I'll try to find an event with five or more food trucks.\nI'll call FT.SEARCH, specifying idx:event as the index\nthe search.\nIn my query, @assigned_vendors tells RediSearch\nthe field to look at and 5 and infinite in square brackets\nto find the range of values to search for.\nPro tip-- if I wanted to search for events with exactly\nfive assigned vendors, I would simply\nset the range from 5 to 5.\nThe event I created earlier is returned since it\nhas eight assigned vendors.\nThat's a lot of delicious options.\nOK.\nThat was a lot of info to go over.\nIf you'd like to learn more about the new Redis JSON\nand how well it interacts with RediSearch at your own pace,\ncheck out our new Redis University\ncourse, RU204, Storing, Querying, and Indexing\nJSON at Speed.\nIt's just one of many courses available to you covering\nspecific topics within Redis.\nIf you'd like to try it out Redis Stack,\nuse one of the links in the video description below.\nYou can download Redis Stack, or you\ncan provision a basic instance in the cloud for free.\nNo installation or local configuration necessary.\nThanks for watching.\nI hope you enjoy these delicious new updates to Redis JSON\nand find them just as appetizing as I do.\n"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "transcripts.load.getTranscript" "message" "Getting transcript for https://www.youtube.com/watch?v=KUfufrwpBkM" "meta" "{\"location\":\"transcripts.load.getTranscript\"}"
"SET" "transcripts:KUfufrwpBkM" "[Music]\nhello everyone my name is guy royce i'm\na developer advocate at redis and uh\nwelcome to my workshop this is the\nexpress and redis workshop express and\nredisome express and write a stack i\ndon't know that i have a really good\ntitle for it but we're going to call it\na\nusing redis with express workshop thingy\nuh and well today i'm going to show you\nhow to build a simple node.js api\nwith express and redis stack\nwe're going to use redisome to do that\nuh to interact with reta stack\nand uh i'm gonna do this mostly with a\nbunch of code so uh expect a lot of vs\ncode action\ni don't really have any pictures or\nanything other than well this one\ni am going into this uh assuming that\nyou know a bit of express so uh although\nuh i'm not using express in a\nparticularly sophisticated way um\nbasic knowledge should serve you just\nfine and to be honest if you don't\nhaven't touched express at all you don't\nknow much about it you don't know\nanything about it you're probably going\nto be fine it's it's not anything it's\ni'm not it's just rocket surgery so\num\ni'm also assuming that you've got\nredistac installed i've watched an\nearlier video or read a blog or\nsomething telling you how to do it\nit's possible that content you've\nconsumed will even be created by future\nme uh i guess i'll find out so i'm\nassuming you got uh read us up and\nrunning with read a stack and that\nyou've got some basic express knowledge\nnot a lot and i'm assuming also that you\ndon't know a gosh darned thing about\nreticem\nand well that's good because that's the\npoint of the workshop i'm going to show\nyou how to use express plus retisom to\nbuild a simple api\nand that api is going to be a little\nperson api where we're going to do like\nyou know hey go get their name search\nfor them by name and their age and you\nknow those sorts of things they may be\ntheir location\nso um\nso we should start out with some what\nthe hecks are right so what the heck is\nredisome uh you may not have heard of\nreticem well retisom is a a library that\nuh well actually was written by yours\ntruly that provides uh object mapping\nfor redis which is to say it maps redis\ndata types specifically hashes or json\ndocuments in this workshop we're going\nto use json to javascript classes and\nobjects uh and it allows you to search\nover those hashes and json documents um\nto do that it uses redis json and write\na search what are redis json what are\nthe search well for starters they're\nincluded in reda stack but redis json\nand redis search are modules uh modules\nare like plugins they extend the\ncapabilities of redis so if you've got a\nyou know a module like json it adds new\ndata types uh json documents and adds\nnew commands uh\ncommands that manipulate json documents\nto redis and read a search does the same\nthing but it adds commands to create\nindexes\nor indices\nand to then do search so that's redis\nhome that's a little bit about what\nredis json and reddit search are uh and\neven what modules are uh we're gonna use\nall these capabilities uh to build a\nrelatively restful uh person api\nrelatively restful you know it'll do all\nthe crud operations and a little bit a\nfew other things they'll have basic data\nlike the age of that person their name\nuh and we're gonna even throw in\nlocations so we can do like a simple\nlocation tracking app so maybe you uh\nare using an app and it's like well this\nperson checked in at this restaurant and\nthen they checked in at this you know\ngas station or whatever\nyou can totally follow along with us\nthat's the intention of what we're\nbuilding here is that we're building\nsomething that that we i i'm building\nthis thing here for you to follow along\nso the idea is you can\nwatch the code that i'm showing you\npause the video\num type it in try it out see it work and\nthen resume the video and then do the\nnext step\num\nand so there's a repo that you're going\nto use the starter code to get this\ndoing it's got a bare bones express\napplication with swagger uh and it's got\num\nthree branches in it\nuh one branch is the solution branch uh\nthat's the cheater code that's the code\nthat you can look at you say hey how\ndoes this thing work you just go look at\nyour solution branch\nthere are a\nsteps branch which i'm going to walk\nthrough all the steps i'm not typing\nthis whole time i'm going to use a\nlittle tool to\nwalk through my individual git commits\nand you can go see the process that i\nfollow by following those steps too\nand there's the main branch which is the\none that you'll clone that will actually\njust be your starter code and uh the\nlink to that github repo it'll be in the\ndescription somewhere below hopefully or\nwherever you found this video so\nthat's what we're building that's sort\nof the stuff you need to do so go clone\nthat repo and uh pause the video and\nthen come back\nand then i'll explain to you what we're\nbuilding in greater detail well welcome\nback here on my screen\nwe've got um\npersons we want to store person data in\nuh redis using redisone\nand i've got a small collection of json\nfiles here in this person's folder and\nthe repo that uh you should have a clone\nof uh so i've got like chris stapleton\nthey're all musicians\nuh so this is well that's chris\nstapleton joan jett uh\nyou could tell i'm a gen xer\num and we got uh carrie uh livgren who\nis the person from kansas that did all\nwe are as dust in the wind\nthat was his song so i've got uh various\nartists here so let's look at uh let's\nlook at chris staple now let's look at\njojet\nso uh the data we have that we want to\nstore is a basic json document here this\nwill be the request\nbody when we do the uh posts to create\nthese so first name and last name as\nstrings we got an age uh joan jett is\nshockingly 63 years old now\num a verified flag the idea here is are\nthey verified on you know do they have\nthe little blue check mark next to them\nor not uh their location you know this\nwould be the location tracking aspect\nare they you know what's their longitude\nand latitude right this minute\nand we have a little date here that\nrepresents when that was last updated\nwith a little iso 8609 date format\nwe've got some skills that that person\nhas i picked some random ones that seem\nappropriate for their uh their uh their\naptitudes and so joan has singing\nguitar because she plays the guitar and\nuh she has black eyeliner because she\nalways used a lot of black eyeliner and\nher personal statement is of course i\nlove rock and roll so put another dime\nin the jukebox baby\nso this is the kind of data we're going\nto be adding\npretty pretty pretty straightforward\nright\nso\nnow that we know what we're building and\nwhat the data looks like let's let's\nactually do all the prereqs let's get\neverything set up so\nuh the first thing that\nthe first thing that we need to make\nsure of is that you've got red of stack\nup and running so you've got some redis\nversion running you you might be running\nthat uh local machine you might be\nrunning that in the cloud\nyou might have the password you might\nnot\nbut let's make sure it's up and running\ni've got redis up and running on my\nmachine so i'm gonna go to redis insight\nand confirm that my redis instance is up\nand\nrunning so here we are in redis insight\nhere's a bunch of databases i've got\nmine configured already\nif you want to add one you just click\nadd a redis database uh i've got one\ncalled that local one which is just\nlocalhost 6379 with uh no password\nand uh this has two things here we've\ngot a little keys here i've got some old\ndata from my previous uh rehearsals of\nthis talk uh and\ni'm going to uh prove that redis is up\nand running uh i guess i can just\nrefresh it and yeah they're still\nworking uh by deleting everything so\nnukem from orbit it's the only way to be\nsure so i'm gonna run the flush all\ncommand this is a very dangerous command\nit literally just deletes everything\nwithout asking\nnever ever ever ever run this casually\nin production\nand but now it's all gone so if i go\nback to my key list here and hit refresh\nit's all gone you can see that stream's\nnot there anymore\nand so i have wiped the database and\nconfirmed that redis does indeed exist\nand is configured and running and\neverything on my machine\ncool\nthe starter code that i've got here uh\nthis this library here there's not much\nthere there's a server.js and a little\nelse let me close some of these other\nwindows here\nbut it needs some basic configuration uh\nif you look here in the server.js i'm\nusing uh env\nand so what that does is it looks for a\nfile with the name of emv in your root\nand\nthen pulls environment variables out of\nit and so i've got a sample.env in the\nrepo that you can clone that you just\ncloned and so you just need to copy this\nfile to env\nand the only configuration it has it is\nthe redis url and so here mine is red is\ncool and slash localhost 6379 if you've\ngot red a stack running locally this is\nprobably what yours is as well uh and\nall i've done is i've copied that to env\nand\ndeleted some comments and so this is\nreally the only part that matters this\nis not a complicated file\nso um\nset this to whatever your redis url is\nit's probably what i have but it might\nnot be to be depending on how you've set\nredis up\nso once you've got that established\nthere's one last thing that's kind of\nimportant and uh for me it's already set\nup if you look here i got an nvmrc i\nlike to use node version manager\nand this is the version of node i'm\nusing so here we've got 16.3 which is\nthe version i have you can use an\nearlier one\nbut there is a limit so um if i if you\ndo if i go no dash version you see i'm\nusing node 16.3\nbut i'm in this example i'm using top\nlevel awaits so used to be when you have\nan await in your javascript code you'd\nhave to wrap it in some function that\nwas async\nstarting with node 14.6 you can do top\nlevel awaits so you can wait well\nwithout having to be inside of the\nfunction at the top level and so i'm\nusing that in all my samples so you need\nto make sure you're using node 14.8 or\nmore recent or more recent version so\ni'm using 16.3 should work just fine\nwith 14.8 or higher\nso if you don't have that pause the\nvideo go get it right now\nso\nthat's the setup uh let's take a look at\nuh what\nsort of skeleton code what's the starter\ncode look like and and what it looks\nlike is a well a bog standard express\napp so here we've got uh you know i\nmentioned this earlier we're importing\nthat dot m for your uh configuration\nwith our redis url\ni'm bringing in express of course\nbecause this is an express app i've got\nswagger in here so we gotta you may have\nseen that as i sliding back and forth\nhere i've got swagger so that you don't\nhave to mess around with like postman or\ndoing curl or anything like that you\njust get a nice little ui it defines the\nuh the interface\nuh the api we're creating and lets you\ntest it as well so i'm using swagger ui\nto do that and i'm using yaml js to\nconvert my yaml files to json so that\nswagger ui can deal with them\nand then i create a\nbrand new express app and tell it to use\njson so hey if you get handed an object\nas a result assume this json and convert\nit to json\nand give it the right content type and\neverything\nuh here's where i set up the swagger in\nthe root of this api so we've got comp\nswagger document equals yaml.load this\nloads the yaml file here which has the\napi specified in it so if we look at\nthis file we can see that hey look\nthere's yaml\nyou're welcome to look at that on your\nown time\num\nso we load that yaml file in and then\nthis yaml js turns that into a\njavascript object and then we uh call\napp.use and say on the root use swagger\nui and i mean\nhonestly i don't know exactly how this\nthing works i just copied it from their\ndocumentation on github\nso and i know that it does work so\nthat's that's the key thing here um so\nwe're we're binding our swagger ui to\nthe root level\nand then we tell our app to listen up\nfor 8080. and that's it now i should be\nable to just run this so let's go ahead\nand clear this noise up and say npm\nstart\nand i'm using uh no daemon\nor nodemon depending on how you want to\nsay it\nand\nso as i make changes it should just\nrestart automatically so let's uh\nlet's refresh this here just to show\nthat it's localhost 8080.\num command shift r\nand it reloads so uh this is the swagger\nuri showing all the things that i find\nin that api dot yaml we've got our\nperson\nput get post and delete these are our\ncrud operations for the user create read\nupdate delete\nuh and we've got some search options and\nwe have a location updater thingy that\nwe'll explain later so we've got our\nserver up and running\nuh\nit's over here and we can we can invoke\nit like if i hit execute here\nand we can see that we uh\nget an uh get a html page back because\nthis route hasn't been implemented this\nis probably expressed saying hey you\ncan't do that route thing so swagger is\nworking yeah working\n[Laughter]\nand that's pretty much the starter code\nso\num\nlet's start making this more than\nstarter code\nso i am going to uh bring in the first\nfew bits here uh we need to create a\nclient we need to connect to redis\nand retisom does that using a client\nand so let me bring that code up here\nand so here we have a client.js file\nthat i've just created\nwe import client from redis home\nwe get our url from the environment now\nthis is from that emv file uh that this\nultimately comes from\nand then all we do is we create a new\nclient\nwith a new client\nand then we call open on it immediately\nand open returns itself it's a builder\npattern and so then we can kind of one\nline this and say wait new client open\nand then the url and then we have a\nclient and then all we have to do is\nexport that client\neasy peasy\nwe have connected to redis with retizone\ni like to put my client in this file by\nitself\nthat way if i have multiple repositories\nwhich we're going to get to in a minute\nwe can sort of\nguarantee that we have one and only one\nclient\nwhich works great with uh node because\nnode is single threaded and redis is\nsingle threaded and so having a single\nconnection works out really well because\nthere's never going to be two processes\nusing that connection simultaneously so\nworks out great\nso let's uh continue on with this\nso now that we have a client uh we need\nto create uh and we have a client that\nredisohm can use to talk to redis we\nneed to create uh our entity and our\nschema so redisome needs an entity which\nis uh the things that we're reading and\nwriting this is the person\nand a schema schema is the thing that\ndefines how redis talks to uh how redis\nmaps that entity to json or hashes in\nour case json\nand\nwhat the field names are and if they're\nthey're aliased and and all the types\nand those sorts of things so it's it's\nthat\ndata about how to take the entity and\nsend it through us and how to take the\nthing in redis and move it to the entity\nto define an entity\nwell that's it\nall right just one line one line of code\nhere and we define a class within the\nentity name that we want so we i've\npicked person because they're persons\nand it needs to extend the entity class\nthat we've imported here\nand then it's just an empty class\nwhen we define our schema redis ohm will\nadd a whole bunch of\nproperties to the entity for you\nand\nyou can actually enter your own uh\nproperties in here as well so if you\nwanted to add say a special\nproperty that like maybe reads a couple\nof the other properties and computes\nsome new property you could do that\nwe're not going to do that for this\nexample though\nonce we've got that person we need to\nsay how do we map this entity to uh\nredis and we do that by creating a\nschema so here i've got a constant\nperson schema i call new schema\nand i pass in the class that i just\ndefined\nthis very boring class up here\nand then we pass in this big object down\nhere and this is just a javascript\nobject that has uh keys and values for\nall of uh it has all that metadata i was\ntalking about earlier so we have a field\nin uh redis and that we're going to add\nto our entity called first name\nit is a string\nso in redis home a string is a whole\nstring we're matching the entire string\nor\nor not there's no partial string\nmatching so we'll say you know find all\nthe the people with the name chris or\nlike uh chris stapleton or joan for joan\nchat\nthe last name is also a string same idea\nhey you know so we got first name and\nlast name they're both strings so we can\nlook for all the people named stapleton\nwith the last name but we couldn't look\nfor people whose name starts with the\nstaple it has to be the whole string\nwe get age\nthat's a number so uh\njoan jets amazing 63 years\nuh we've got verified that's a boolean\nand so these boolean fields and these uh\nnumber fields and these string fields\nwill be stored as javascript strings and\nnumbers and booleans and in radis they\nwill be stored under red and redis json\nas a string in a json document and as a\nnumber in a json document and as a\nboolean in a json document so it's true\nto type\nwe've got a location here which is a\npoint a point is a point on the globe a\ngeo location so it's a latitude and\nlongitude\nand so this is stored as a latitude and\nlongitude in redis redis stores that\ninternally as a string with the\nlongitude comma the latitude\nuh and redisome maps that to a simple\njavascript object that's got a\nlongitudinal latitude property\nlocation updated is a date\nthis is a javascript date\nwrite us\nturns treats that as a javascript date\nthat we know and love and hate uh in\nredis it's stored as a unix epoch time\nin the number of uh seconds since the\nbeginning of uh since the beginning of\nthe unix epoch\nuh we've got a stringer right here so\nthe skills\nis a string array this is skills that\nthat person might have and like in joan\njett's case she had a singing guitar and\nblack eyeliner\num\nthat is a string array and that is\nactually stored in redis uh json as a\nan array um\nof strings\nand and it's actually stored as an array\nin javascript as well and uh they all\nhave a personal statement and that's a\ntype text and so text is kind of like\nstring\nin the sense that if you let's if you\npull it back it's just stored in a\njavascript into javascript string but\nthe the text statement or the text field\ntype\nis uh\ndifferent when it comes to searching it\nuh when we search for like the first\nname or last name it's all or nothing\nmatch the whole whole name or don't\nmatch it or match the state or don't\nmatch it\nthe personal statement is full text\nsearch smart it knows how to search\ntext that's human readable\nso like paragraphs and essays and\nstatements\nso you know joan jetts personal\nstatements i love rock and roll\nand the text search is smart\num\nit can match on\nuh grammatically equivalent things so if\nyou were searching for the word uh give\nit might it would also match gives given\ngiving\nand gave\nbecause it knows that those are all\ngrammatically equivalent as far as\nsearch is concerned it also ignores\ncommon words like a n or the because\nthey're not useful to search on and so\nuh it's very powerful it's very useful\nbut um it doesn't it's not suitable for\ndoing whole\nsearches and you can't say well give me\nlike these first 10 you know give me a\nstring that starts with like these 10\nwords\nexactly with the stop words and\neverything that's harder to do with read\na search so you can match on whole words\nwith search up here or you can match\nfull text\nbetween the two of those you can handle\nalmost any search criteria you'd want\nand then you add in the numbers and the\nstrings and the dates and it's it's\nfantastic\nso that's what we got so far that was a\nlot on a little bit of code wasn't it\num once you have a schema that's\ndefining this mapping\non all these field types\nthen you can use the client remember the\nclient to fetch a repository the\nrepository is the thing that allows us\nto do all the operations with the\nentities it creates the entities it\nreads the entities it updates the\nentities it deletes the entities it\nsearches for entities it does all the\nstuff that we want to do with entities\nand so we say client.fetch repository\npass in that schema and we get a\nrepository which we're going to of\ncourse export\nnow we have everything we need to do to\ntalk to redis using reticent\nuh so let's go to the other side of\nthings let's go to the front end let's\ngo and define a router for express\nthat'll show us how to do that that'll\nlet us actually create read update and\ndelete things\nso\ni have created in here\na router person router\nand so i'm doing basic express stuff\nimport the router from express import\nthe personal repository that we just\ncreated from the person.js\nand create a router that we export\nand we're going to create some stubbed\nout\nroutes here we got the the create the\nread the update and delete the put to\nget the post and the delete put doesn't\ntake an id of course because we'll\ngenerate that for you uh get post and\ndelete do take ids\nand then we need to bind this in our\nserver.js so if we go to server.js here\nwe've got here we've added a line\napp.use and we added the slash person\nroute is going to be handled by person\nrouter so you go to slice person slash\nid and you do a delete that will delete\nthat person\nthere's our personal writer\nso let's flush one of these out\nand\nsee what it looks like\nso i always like to start with create\nbecause you have to have a create you\nhave to have a thing before you can read\nit update it or delete it so gotta have\na thing first so i'm gonna do create\nhere\nso we do a router.put\nslash this would be slash person slash\nwe have a convenient little method on\nthe repository called create and save\ncreate and save takes a simple\njavascript object containing all the\nperson data in the format that redis ohm\nis expecting it\nthrough\nwonderful coincidence we happen to have\nuh\nobjects that are in exactly that format\nso\num\nso yeah so all we have to do is call\ncreate and save and just pass in the\nbody from our request\nand then that will save it and return a\nperson with an id added to it so this\nperson will have all the things it has\nand it will have an entity id on it\nand then we just return that person on\nthe response\nso\nthis should be working\nlet's try it who should we add let's add\nuh do you want to add joan jett or chris\nstapleton let's do chris stapleton\nso i'm going to select all of chris\nstapleton\nand we're going to go over here to our\nswagger interface\nwe're not going to do persons all\nwe're going to do a create person\nand create person uh takes a the body\nthere i have a sample body with rupert\nholmes he's the guy who created the pina\ncolada song\nbut we're gonna we're gonna add\nfish stapleton\nand we can see here we've got all those\nfields that we were talking about before\nand let's go ahead and execute that\nand we get a response back here here's\nour curl put\nour url and then here's our data\nthis url we used and then here's the\nresponse we get back we get the entity\nid this is the unique id representing\nthat record uh it's a eulid which is uh\nlike a uuid but um\ntidier that might be a good way to\ndescribe it uh it's more compact uh and\num so it's because it's not using\nhexadecimal encoding it's using i think\nit's called base 32 encoding uh where it\nhas fewer letters and it's very url\nfriendly so we use eulids and then all\nof the data that we just added\nand so this should exist in redis now\nwe did you know we went through our code\nhere if we go back to our code\nthe person router\nuh called personal repository create and\nsave let's see if it actually created it\nwe'll go out into redis insight\nwe'll refresh our keys\nand we see oh look hey there's a key\nit's a json document\num it's got the key name is person colon\nand a ulid this is the ulid we just uh\ncopied\num this person colon the person comes\nfrom the the entity name so our class\nour entity class is called person so we\njust interrogate that and that becomes\nthe key is the entity name plus the\nuh the uh the ulid so if we click on\nthis we can look and see that there is\nchris stapleton he has 43 he's verified\nthis is his location which is lexington\nkentucky the location updated there it\nis is the unix epoch time uh we can\nexpand his skills here and see that he\nhas singing football and coal mining\nwhich i'm sure he learned from his\nparents\nher father probably\num and it is uh his personal statement\nis a line from that song sometimes i cry\nso\num i'm not going to read it because it's\ntoo sad\num\nso yeah it created it huzzah okay\nwell let's uh\nlet's read it now we've created let's\nread so let me go to the next little bit\nof code here let's flush out our\nour read or our get and so this is going\nto be slash person slash id where it's\nthat ulid\nand uh\nwe have the id passed in so it's just\ntwo lines of code we use that person\nrepository we call fetch and we pass in\nthe id\nand that returns a person\nand\nthen we return the person\nlet's see if that works\nso we did a create up here\nlet's do a get\nwe're going to try it out\nwe'll post in post and paste in\nthat id\ncall execute\nand we can see that there indeed is\nchris stapleton and all that data we had\nbefore and it's converted that uh the\nthe unix timestamp to a nice iso 8601\ndate uh\nthe location if we if we go back here\nand look at the location you'll see its\nuh longitude comma latitude as a string\nand we've converted that into nice\nlittle objects here in redison so\nreticom does all that for you\ncool and we could probably\nlet's try this here\nwe should be able to just go ahead and\nget this url here\nso this is just a get so uh we can\neasily we don't need to use swagger to\ndo the get so that gets us that data as\nwell\nokay so create read\nwhat's next update\nso update's a little more verbose but\nit's not particularly complicated this\nis an all or nothing update so you're\ntaking\num\nthe uh the entire request body and\nyou're replacing every field\nwe're not updating individual fields\nhere\nso you pass in an id you pass in that\nrequest body uh you fetch based on the\nid\nand then you uh\nthat person that you fetch you you\nreplace all the properties\nwith uh the first name the last name the\nthe age the verified the location all\nthe properties that are in that body and\nhere i'm doing a knowledge coalescing\noperator here so if first name is\nundefined then it sets it to null\nif last name is undefined it sets it to\nnull\nand once we've done that then we call\nsave\npassing in that person and then it'll\nupdate it\nand then we send that person back so\nlet's uh let's update\nuh young master stapleton\nlet's copy\nhis data here\nand we'll collapse that and go to post\nto update and we'll try it out\nand that's uh his data and i know the id\nis different i don't want to\nget that id there too i don't i don't\nwant to create a new record by mistake\nso\nso we're going to call person id that's\nthe id and we're going to update that\nand we're going to make chris stapleton\nuh\nwe're going to make him 18.\nhe said he's young again he'll be so\nhappy\nand uh here we see chris stapleton age\n18. and if we go back to here and\nrefresh\nwe see that chris stapleton is age 18.\nso we've done an update\nwe've done a create we've done an update\nwe've done a\ndelete we're going to create a read and\nupdate now we're going to do a delete\nso delete is also very short\nyou simply call remove and pass in the\nid\nand then here i'm returning the id back\nso\nlet's go ahead and\ndelete\nthis wonderful chris stapleton who is\nnow 18 years old\nand execute it\nokay so it issues a delete against that\nurl if we go back to here and refresh\nerror key with this name does not exist\nthat's correct it does not we refresh\nthis we'll see that uh chris stapleton\nis now gone\nso\ncreate read update and delete using\nredisome and express pretty cool but\nwait there's more\ni wouldn't i wouldn't leave you with\njust that uh because there's more that\nwe can do there's more neat stuff so\nlet's we got a whole bunch of searching\nto do so\nwe want to not just\nhave to find\nthese musicians by their these persons\nby their id\nwe would want to look for persons that\nmatch certain criteria we might have a\nlot more than you know we might have a\nlot of persons in there\nand maybe you want to find people that\nare\nof a certain age or with a particular\nlast name or they have particular words\nin their personal statement or or are\nverified\num\nyou can totally do that with retisome\nthat's what the redis search part of it\nis so uh the first thing you have to do\nin order to use search\nis you have to create an index so here\nin the person repository in the\nperson.js i've added this line of code\nright here\nuh grade index what this will do is it\nwill create an index and store it in\nredis and that index will then allow us\nto use search commands\nand if i go out and\nrefresh it actually\ncreates an index and it creates a hash\nof that index out there so we've got a\nlittle string it's got a hash in there\nthere's a little signature that\nrepresents that index if you change your\nschema\nit will compare these\nand this is all it's just plumbing for\nredis i read a zone but it'll compare\nthese\nand if they're different it will rebuild\nit'll delete and rebuild the index so\nyou can just call create index and not\nworry about it\nuh but uh behind the scenes if you say\nwell let's make age you know another\ntype or you know change your data in\nsome way uh it will uh rebuild that\nindex accordingly\nso we we got our uh we call call create\nindex that's the first thing you have to\ndo this is a really easy thing to miss\nand forget when you're doing this you're\nlike i got my schema and everything and\nyou forget to call create index and then\nyou're like why aren't all my searches\nworking it's because you didn't call\ncreate index i've done it myself and i\nwrote the library\nso\ni'm going to create another router for\nall of the searching we want to do\nand so this is just sort of\nbog standard router templating stuff so\nlet's see what's next i'm going to add\nthe easiest of all searches which is\ngive me everything star\nso here's the stubbed out route for that\nif you go to slash persons slash routes\nor persons slash person slash all this\nwill code will get implemented\nthe implementation for this is actually\npretty simple\nwe use the personal repository where\nbefore we call create or save or remove\nor fetch here we call search\nand then search returns an object of its\nown\nwhich you can call return on and all\nwhich will return all of them\nthere's other options you can return\nlike\npaginations\nyou can just get the count if you want\nthere's a lot of options here we're just\ngoing to call return all for now and you\ncan explore the other ways of returning\ndata and the other other ways of doing\nthis\nlater\nin your in your when we're done\nbut so this is just going to search and\nreturn all this is just searching on\nstar\nand then it's going to get an array of\npersons back and then it's just going to\nsend that back and it'll turn into a\njson object\nand we got one last little bit here we\nneed to do because i haven't bound this\nroute this all route to anything in\nserver.js so in here i'm going to bind\nslash persons to the search router\nso\nand with that we should be able to uh\nsearch all\nso let's go and get all the persons\nexecute\nand\nwell it worked\nit's not very exciting but it worked uh\nwe don't have any data so there's\nnothing to return so let's get some data\nin there i have in my repository here\na a little shell script called low data\nload data.sh all it does is go through\nthis directory and take all the json\nfiles\nand load them up\nand that's that that's all it does\nso um\nlet's run that really quick\nuh i'll go ahead and stop the server\nchange your persons\ndot slash load and if you're using\nwindows um\nsorry\nbut uh you should be able to create a\nbatch file that does something similar\nso\noh i\n[Laughter]\nsee this happens to the best of us right\ni actually need the server running in\norder to connect to it\nso let's let's create a new tab\nand then uh\ngo back here\nand then npm starts get our server\nrunning and then in this new tab we'll\ndo we'll do the uh\nthe\num\nwhile we're in it already it will run\nthe script\nokay so now it's created a bunch of\nmusicians to populate our data here\nand if we go out to redis\nhere we can see that we've got the whole\nmess of persons\nthere's joan jett\nthere's justin timberlake\nuh\nthis is the guy who wrote the toto's\nafrica song\ni got eminem\nall kinds of all kinds of folks\nand uh just for fun let's go ahead and\nfind chris stapleton in here\nalways the last place you look right\nlet's make chris stapleton 18.\nbecause you know i like chris stapleton\nhe deserves it\nokay\nand i actually did that for a reason\nyou'll find you'll find out soon enough\nso now if i do a person's all search hit\nexecute\ni get all the person so there's joan\njett and carrie and rupert and david\njustin and ivan and marshall and chris\ncool\nso uh returning everything is all fine\nand dandy but uh obviously we want to do\nthings that are a little more\nsophisticated than that so uh let's go\nahead and search by last name so i've\nadded another route here uh\nrouter.get by last name and then you\njust specify the last name\nuh this is\num not terribly complicated uh we we go\nahead and pull that last name out and\nassign it to a variable just to make our\ncode a little bit tidy here\nand then instead of calling search\nreturn all\nwe say search\nand then we say where\nand then where takes a string and that\nstring is the field name that we defined\nin our schema so way back here in\nperson.js we've got a first name and a\nlast name and an age we're using last\nname so we want to use this value right\nhere\nso that's what gets passed in here and\nthen we're saying equals and then we\nprovide whatever string we want to\nprovide in there here we're\npassing in last name\nand then\ncall return all and this will create a\nsearch that finds all of the users that\nhave a particular last name\nthis equals here is semantic sugar you\ncan say is equal\nis equal to\nright\num\nyou know there's there's lots of\nvariations on this we're just going to\ngo with uh\nequals\nuh but you can say is equal to or is\nequals or does not does equal or you've\ngot lots of options there's lots of\nyou see does equal\nit all does the same thing\nand when you go you go to retisom's\ndocumentation there's examples of all\nthese there for you to play with\nso we've got this little bit of code\nhere we can search by last name let's go\nahead and search by last name\nso let's look for\nuh we'll look for holmes we'll look over\nrupert holmes the pina colada song\nperson\nbecause i like pina coladas and walks in\nthe rain\nso here we've searched by last name of\nholmes you can see our url is uh persons\nby last name holmes\nand here is the rupert's data so there's\nhis entity id and\nhe's 75 years old\nas of the time i created this data\nverified on uh whatever this app is that\nwe're building uh this is his location\nwhich i think is somewhere in the uk\nand um yeah all the data and he likes\npina coladas and taking blocks in the\nright\nso we were able to search by last name\nwe could search by uh stapleton instead\nand then we get chris stapleton\nthere we go chris stapleton who is not\n18.\ncool\nuh in addition searching by strings we\ncan search by numbers\nso i've added a line here that finds\neveryone that's 21 or older aka old\nenough to drink in america\nso\nif you go to person slash old enough to\ndrink in america it will return everyone\nexcept for chris stapleton so let's\nlet's try that one out\num\nthis one doesn't have any arguments you\njust run it\nhit execute and we'll see that there's\njoan jett\nand carrie\nand rupert and david\nand justin timberlake and ivan and\neminem but no chris stapleton\nbecause he is not old enough to drink in\namerica\ncool we can also do\nbooleans\nand again\nif we look at these queries here this is\ngte for greater than or equal to we it\nalso you can also type in\ngreater than or equal to\nor is greater than or equal to there's a\nbunch of semantic sugar\nuh to let you do this however you want\num\nfor booleans very similar situation uh\nwe want to do a git for non-verified\nusers\nnot verified and not unverified but\nnon-verified so where verified is not\ntrue\nand so here we're saying where verified\nthat's that field name\nis is just a little binder word it\ndoesn't do anything it just makes it\nread like a sentence\nnot inverts the query and true says is\nequal to true so where verified is not\ntrue now you might be wondering why\nwould we want to search for a not true\nwhy don't we just search for false well\nif the true field was missing or the\nverified field was missing then it would\nbe null which would be neither true nor\nfalse but we want things that are not\ntrue so not true would return false or\nnull so this catches both of those uh so\nbut we're saying we're verified we could\nactually say verified not true and\nreturn all and this will give us all the\nnon-verified users\nand we can go out and test that very\nquickly\nand see that we do indeed get false\nfalse\nfalse\nand false\nand of course you can use all of these\ntogether\nuh you you are restricted to searching\nby one field so here i've got verified\ndrinkers with last name last name so\nthese are people who are over the age of\n21 that are verified\nand have a last name that equals the\nlast name that you passed in\nso\nall we're doing is saying search where\nverified is true and\nages 21 and last name and this could be\nand there's also or so you can do or as\nwell if you like\num\nand you can create more complex ones\nthose are documented on the website for\nredisome there'll be links to that later\nso go check those out too um but yeah\nthat will do a verified drinkers with\nlast name so let's\nhit that url really quick just to show\nthat that works verified drinkers with\nlast name\ni'm going to try it out we're going to\nfind\nuh verified drinkers with the last name\nof timberlake\nand so that finds justin timberlake who\nis verified is over 21 and does have the\nlast name of timberlake so\nthat works as well\nuh next we're going to show off um full\ntext search\nso that's this little bit here we're\ngoing to do a full text search against\ntheir statements\nso\nhere we have\nwith statement containing and then text\nand so here we can pass in word or words\nuh that we want to search for in a full\ntext way\num this means the ways i described\nearlier when i was describing the text\nfield uh the uh you know it understands\nthe grammar it understands common words\nthat aren't useful in a search and\nmakes\nappropriate\nchecks and so if we search for like the\nword walk it will match walks if we\nsearch for the word uh give it'll match\nuh given and gave\num and it ignores words like a n and the\nso um\nto do that we just uh use the matches\nverb here so we say where personal\nstatement matches and then we give it\nsome text to match\ndon't you cannot use equals on these\nthat won't work you can't check a text\nfield for equality you can only search\nfor words within that text field if you\nwant to do quality use a string\nso here we're saying where the the\npersonal statement matches text that we\npass in and then we return all of those\nand this is actually kind of neat the\nway it works so i'm going to look for\nwalk walk is a good example\nbecause i'm going to search for walk\nand then our result finds\nrupert holmes and chris stapleton\nuh so rupert holmes says i like pina\ncoladas and taking walks plural even\nthough we searched for walk\nso it matched it anyhow right\nand um here uh\nchris stapleton used the word walk in\nhis personal statement\nif i add rain do it\nnow we're just going to get rupert\nbecause\nhe has walk\nand rain\nact let's do a take as well that should\nwork\nyeah so taking got map to take so you\ncan see that stemming happening there\nwhere it understands the grammar of\nenglish\nand it does support other languages\num\nand the other thing is is it ignores\ncommon words like it's got the rain and\nso if you start with that it'll match\nbut it doesn't have the word a in it or\nan\nso let's search for let's add an\nand a\nand run it you can see it still matches\neven though those words aren't found in\nthe personal statement so it's it knows\nthat a and and uh and things like that\nare common words that aren't really\nuseful for search because\nit just matches everything and so it\npulls those out and so this is the full\ntext search of redis\nsearch being being utilized here very\neasily from uh some redisome code\nso\nthat's pretty neat\nlet's uh let's look at the next search\none\nand this is kind of my favorite uh just\nbecause geo searching is kind of cool so\nwe can do geo fields we can look at\npoints on the globe and then say search\nfor things within a radius of that point\nso uh our route here is to get persons\nnear\na point on the globe\nand a radius of that from that point in\nmiles i i chose to use miles because\nuh\ni like freedom units\nbecause i use miles because i'm an\namerican sorry sorry not sorry\nuh and so uh we're just going to pull\nout the longitude the latitude and the\nradius from our url here right and we're\ngoing to convert those to numbers\nobviously this will this could fail if\nyou passed in invalid data here i'm you\nknow this you can make express better\nthis is just kind of show you how these\nthings fit together\num\nand then when we do a person's\nrepository.search like we've done for\nall of these\nwe can say where location that'd be that\nlatitude and longitude that longitude\nand latitude so we say in radius here we\ngive it a circle\nthat we build up and we can say circle\nthat longitude latitude radius and\nand these are all the numbers that we\npassed in and then we say we want to use\nmiles\nuh this could be miles this could be\nkilometers this could be uh feet this\ncould be meters i use miles and then we\nreturn all so uh what this will do is we\npick a point in the globe and then say\nfind everyone within 20 miles of this\npoint which is kind of cool\nso let's uh let's test that out\nso\nwe got uh try it out we're going to look\nfor every people that are at um\nlet's let's just do 0.0 zero and those\njust do really long distances so we'll\nstart with null island which is off the\ncoast of africa here which is not a real\nplace\nuh so latitude longitude zero zero\nthere's a buoy there and that's about it\nand if we search for like a 20 mile\nradius we're not going to find anyone\nbecause there's nothing within 20 miles\nof that so see we've got an empty\nresponse there so let's go with like a 2\n000 mile radius\nstill haven't found anyone because it's\npretty far from things let's go with a 5\n000 mile radius\nokay so we found rupert holmes that's\nwho i figured we'd find uh because he's\nin the uk\nand so\nwe uh he he's in that location if we\nwiden even further we could probably get\nsomeone in the united states here\nuh\noh\ndropped it\nto a thousand we got ten thousand\nso that yeah so now we're getting some\namericans here this is jon ja and it's\nprobably just about everyone\nso\num\nso yeah so that's how you can do a geo\nsearch where say hey i'm at a point i\nwant to find the people around me\num that could be useful if you're at a\nlocation and you're using this app and\nyou want to find your buddies right it's\nlike oh who's who's around me who's\nwithin you know half a mile of me or you\nknow 500 feet or whatever\nso that's pretty much uh search\nbut um i want to add just a little bit\nmore to the app because i think it'd be\nkind of cool\ni want to add this sort of location\ntracking ability so what that means is i\ncan't just have\na straight up update right i i need to\nsomething that comes in and says report\nmy location right now okay maybe i've\nchecked in at an ice cream stand and\nthen then i go to like a museum and i\nyou know i want to check in there and so\ni i update my location again or maybe\ni've got an app that's updating my\nlocation periodically so that my friends\nknow where i'm at\nand so um you could call\nthe little update method here that i\ncreated but it updates everything and we\nreally just want to update one thing\nand so and there's a little bit of\nbehavior to that too because we've got\nan updated date for your location we've\ngot a location updated last time you\nupdated that location and we have the\nlocation and so this feels like\nsomething that needs to be its own\napi call so i've created that here it's\ngot a person\num you go to the person slash id\nlocation and then longitude and latitude\nand so this is a little interface for it\nuh let's go ahead and\nget to the code to do that\nso\nfirst off i'm going to create a new\nrouter called location router\nand it's going to have uh the same url\nthat we just saw in swagger so\nthe slash person slash id location and\nthen the longitude and latitude and\nagain we're pulling those arguments out\nof the params from that uh call from\nexpress\nand then we're going to set the\nupdated date for the location to be uh\nthe current\nright now we're going to create a new\ndate and it's like make the updated date\nright\nnow then we fetch the person by that id\nthat we were passed we set the location\nto the longitude and latitude that they\nwere passed in\nwe set the location updated to that\nnewly created date\nand then we save the person\nand then this will then update them then\nwe return the id and the date and where\nthey said they were at so we return the\ndata back to them\nand then\nwe need to\nmap this in server.js so let's go ahead\nand\ndo that so we'll bring in\nthat location router and we'll add it to\nperson\nand so now we should be able to hit this\nurl\nand update a person's location so\nwho's the last person we got\nlet's uh\nlet's get all the people here find\nsomeone\nlet's get joan jet let's move her around\nand we'll leave we'll leave her up\nbecause i want to\npaste that there i want to copy her\nlatitude and longitude\nas well\nso she's at minus 75 and positive 40.\nthat's close enough\nminus 75 and she's at positive 40.\nand so if i execute that that'll update\nher location to be exactly that now and\nso if we hit our little\nuh\nperson id\nand search for her\nyou can see that her loca longitude and\nlatitude have now been updated and we\nwill be able to see this this in redis\nas well\nit's fine there she is so minus 75 comma\n40.\nand if we update it again then we'll\nupdate it again if we look at the date\nthere we see the unix timestamp is\nsomething a little more it has less\nzeros at the end of it\nwhich tells us that it's not a nice\nround date and we look here it's uh the\ncurrent date i clearly recorded this on\nmarch the 14th\nhappy pi day\num\nso cool\nthat updated that's great so we've got\nthis little thing right it updates their\ncurrent location updates their little\nrecord and write a song that json\ndocument\nbut\ni want to go a little bit further\nbecause\none of the things you have when you have\nlike this tracking app is you don't want\njust their current location to be nice\nto track their history\nright so this is where they were and\nthis is where they were next and this is\nwhere they were next like you know\nlocation i checked in here and i checked\ninto this other place and i checked into\nthis third place and so how do we do\nthat with redisome well the answer is\nthat we don't redisome doesn't do that\nbut redis does redis has a streaming\ndata type uh where we can show up\nstreaming data if you're not familiar\nwith streams\ngo check out\nyou know\nthere's lots of information on streaming\ndata types out on the internet you can\nthink of them as a log of hashes uh with\na time stamp and uh the ha the hash\ncontaining key value paired data\nand um\nit's um\nit's like a law it's like a log file\nit's a\na bunch of events that have occurred so\nat this point this event current here's\na bunch of data about it at this point\nhere's an event data and at this point\nthere's this event data\nredis has one of those\nbut redison can't use it\nbut we can fix that\nbecause we can step underneath retisom\nand use the underlying redis client node\nredis\nto do this ourselves so how do we do\nthat well we're going to go back to our\nclient\nremember client.js all those years ago\nso before\nwe just had this we got our url we call\nclient.open pass in the url and export\nit\nnow\nwe are\nimporting from redis this is node redis\nuh the create client function and\ninstead of using uh our new client\npassing it open uh we\nuse the create client from redis to\ncreate what i'm calling a connection uh\nbut but redis node redis calls a client\nas well so i call a connection to\ndisambiguate\nbut they're both clients and this is a\nnode redis\ninstance\nthat we can do anything that redis can\ndo against and so we create a client\npassing in that url we connect to that\nclient\ncalling connect\nand then instead of opening on our\nclient we just tell it to use that\nconnection so\nwe're just saying we create a new client\nand say use the connection instead of\ncalling open\nand\nboom we are now you we now have\na redis connection\na node redis connection and we have a\nredisome client and they are coexisting\npeacefully they're both using this exact\nsame connection uh this is handy if you\nwant to access commands on redis that\nyou don't have access to otherwise from\nwritism\nit's also handy if you're using retisome\nand you wanna use it to connect to redis\nin more sophisticated ways than just a\nsimple url there's lots and lots and\nlots of options for how you can connect\nto redis\nand you can access all those with node\nredis and so this allows you to do this\nit's the advanced uh way of connecting\nso now we've got a client that uses\nnoderetis explicitly\nand we've exported our redisconnect our\nredis connection from noderedis as well\nas our redison client\nso now that we've done that we can start\ndoing redis things so let's take a look\nat our location router again\nand let's look at the last change we're\ngoing to make here\ni bring in that connection from\nfrom the client.js i've added one line\nof code here\ni'm calling connection.x add that means\nstream ad add something to a stream\ni'm giving it a key name for that stream\nthat key name is going to be the person\nkey so that'd be the person colon ulid\nthere's a little keyname property on\nentity that's created that's very useful\nfor this purpose\nand then we just tack on a location\nhistory\nand so we're saying add to the a stream\nin this key and if it doesn't exist\nit'll create it add a timestamp of star\nthat means\ngenerate your own stream id the stream\nid is made up of a time stamp a unix\ntimestamp dash and then a serial number\nin case there's more than one thing per\nmillisecond star just means do all that\nautomatically use the server to do it we\ndon't want to mess with it that's almost\nalways what you want to do\nand then we pass in uh\na javascript object with uh\nname value pairs in it uh location is\nmade up of longitude and latitude here\nright\nso we can just pass that in as is\nand that will update uh the latitude and\nlongitude for that user every single\ntime we call this route\nso let's uh let's do that again let's\nlet's take joan jett\nand update her location\nto be let's see she's at minus 75 let's\nput it minus 75.1\nand we'll do minus 75.2\nand then we'll move her uh north a\nlittle bit\nshe's heading west now she needs to head\nhead north\nand then she's going to head northwest\nthere we go\nmoving kind of fast there but you know\nsuch as it is\nso\nif we uh go out into redis and look\nwe can see that\njohn jeff's location is now updated\nbut if we refresh our key list we'll see\nthere's a stream here\nand it's got that name just as we\ndefined it person called eulid on\nlocation history\nso uh to access the stream well\nwe could click on it but it just tells\nus that this data type isn't supported\nin a pretty way yet\nbut we can totally access it from the\ncli if we go here so i'm going to copy\nthis key name just for my convenience\nand then we go over to the workbench and\nwe can just enter redis commands and so\nwe're going to do\nx range\nx range reads a\nstream\nby the key name\nfrom a start\nstream id to an end stream id or event\nid um\ni want all of them so i'm just going to\ndo minus for the beginning of time and\nplus for the end of time and when i run\nthat\nwe see that there is the most\nthe the older records are here so the\nlongitude was 75.1 and 40. 75.2 and 40.\nuh then she started moving uh\num\nnorth\nand then moved northwest so you can see\nthat entire history of all those uh\nmovements so now we've got a log\npretty cool\nso um that's pretty much all i've got\num\nso i guess this is the part where i say\nthanks for hanging out with me and\nworking on this and i hope it was useful\num you've got a decent bit of sample\ncode sitting on your computer now that\nyou can use to do uh redisome and a\nlittle bit more\nto really build a\nbasic api or even a very sophisticated\napi uh using redis\nredisome read a stack and express so\num\nthanks for hanging out with me doing\nthis and uh if you have any questions\nleave them in the comments or uh or\nbetter yet\ngo to discord.gigi redis\nwhich is our redis discord server i'm\nalways on there and ask questions there\nand i'll be happy to answer them\nand\nyeah see you next time\n[Music]"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "transcripts.load.getTranscript" "message" "Getting transcript for https://www.youtube.com/watch?v=LaiQFZ5bXaM" "meta" "{\"location\":\"transcripts.load.getTranscript\"}"
"SET" "transcripts:LaiQFZ5bXaM" "building a real-time application can be\nvery tricky and it often requires you to\nstore data in multiple different formats\nbut did you know redis stack makes redis\na multi-model database and supports many\nof the capabilities you need all in a\nsingle database thus saving you time and\nreducing complexity when trying to use\ndatabases from several providers\ni built a sample application here that\nis for tracking a stock watch list\nunder the hood it stores data in several\ndifferent ways using redis stack as the\nprimary database and message broker\nnot only am i using some basic data\ntypes like sets and hashes but i'm also\nstoring json documents time series data\nand even some probabilistic data\ni'm also using pub sub to communicate\ninformation between a few different\nmicro services in real time more on that\nlater though for now let's dive into\nwhat you're looking at the main focus of\nthis app\nis the watch list\nyou can see here that i'm watching a\nnumber of popular stock symbols i can\neven search for more if i want to so i\njust go in and i type in\nbac and you can see several different\nstock tickers here and i can add those\nto my watch list if i need to just by\nclicking on them\ni can also remove them if i want to from\nhere and on the right hand side of this\ncard you can see the real-time trading\ninformation so you'll see the latest\ntrade from each stock on the right hand\nside of the page you'll see this card\ncalled trending stocks which displays a\nlist of most frequently traded stocks in\nmy watch list over the last minute every\nminute it resets and keeps track of the\nnumber of trades that happen within that\nminute\nthe bottom of the page shows information\nbased on what stock you select in your\nwatch list so you can click on different\nsymbols in the watch list to change the\ninformation that's displayed the chart\nis updated in real time using the alpaca\napi\nthe number in the top left of the chart\nshows the latest trade price as well as\nthe delta between the latest trade and\nthe previous minute closing price\nevery minute i receive a new closing\nprice from alpaca and update this chart\non the right hand side you see recent\nnews this is news that's grabbed from\nthe alpaca api about the particular\nstock you're looking at now let's break\ndown how i'm storing retrieving and\nmanaging the data used to populate this\nscreen the watch list is stored in redis\nas a set a set makes the most sense for\nthis case since it automatically\nprevents any duplicate symbols i'm also\nstoring information about each stock\nsuch as the name sector industry and a\nlist of news in a json document in redis\nstack the price is stored in a time\nseries\nusing the time series capabilities of\nredis stack\nthis makes it easy to get the latest\nprice very quickly when the front end\nrequests the watch list i bring down\nsome of the information from the json\ndocument as well as the latest trade for\neach symbol in the list then i'm using a\nwebsocket to receive price updates the\ntrend list uses a top k filter which is\na feature built into redis stack that\nautomatically builds a leaderboard for\nyou as trades come in from the alpaca\napi i simply add them to the top k\nfilter and it lets me know if the\nleaderboard has changed the chart uses\ntime series data retrieved in real time\nfrom the alpaca api and stored in redis\nstack as a time series\nwhen you store time series data in redis\nstack it makes it very easy for you to\nquery the data over a date range as well\nas aggregate the data it's perfect for\nstoring data that you want to visualize\non a chart where time is on the x-axis\nthe news list is kept up to date using\nthe alpaca api and is stored in a json\ndocument in redis stack along with other\ninformation about a stock so you can see\nthat while this app might look simple on\nthe front end\nbehind the scenes there's a lot going on\nand the entire thing is powered by redis\nstack now let's look at an architecture\ndiagram for this application so you can\nget a sense of how all the pieces fit\ntogether\nlooking at this architecture diagram\nwe'll start over on the left with the\nfront end the front end which is what we\njust looked at is responsible for\ngetting all the data needed to populate\nthat dashboard so that's the time series\ninformation to populate the chart and\nthe most up-to-date\nstock prices it also populates the watch\nlist\nit also gets the trending stocks and it\ngets the news about the stocks you're\ninterested in what it also does is it\nuses a websocket with the api service to\nget real-time updates on stock prices\nnews\nand the trending stocks\nnext we have the api service so the api\nservice is relatively simple\nit just facilitates communication\nbetween the front end and redis stack\nit updates the watch list when you add\nor remove a\nstock from the watch list on the front\nend\nand it queries for the data needed to\npopulate the front end so all that data\nwe just talked about the watch list the\nleaderboard\nthe time series data and the news\nit also receives pub sub messages with\nall the leaderboard updates\nnew trades and new bars which are the\nopen and closed prices for a stock it\nreceives those directly from redis and\nthose are actually generated those\nmessages are generated by the streaming\nservice so what the streaming service\ndoes is it communicates with the alpaca\napi to receive real-time news trade\ninformation bars and quotes\nand when it receives a new quote or a\ntrade it will\nupdate the\nleaderboard using\nredis bloom and the top k filter\nthen it publishes updates using pub sub\nwith redis for leaderboard changes or\nwhenever there's a new trade or a new\nbar available\nit also subscribes to watch list updates\nso on the front end when you add a stock\nto the watch list the api is going to\nsend a message to redis saying update\nthe watch list\nand the streaming service will receive\nthat message and automatically subscribe\nto updates from the alpaca api for that\nparticular stock every time a new trade\nor bar or quote or news comes into the\nstreaming service from alpaca it adds it\nto the time series for the stocks in the\nwatch list so what you can essentially\nsee here is that redis is handling a lot\nof what you might otherwise use several\nother tools to do so it not only does it\nlet you store\ndata in multiple different formats but\nredistac also lets you use pub sub to\ncommunicate between microservices i'm\nsure by now you're itching to look at\nsome code to understand how the\napplication is built\ninstead of showing you all the code\nwhich could take several hours to go\nthrough in depth i'm going to highlight\nsome specific areas that are interesting\nif you're interested in learning more\nyou can find the code in the description\ndown below this video looking at the\ncode you can see i have an api service a\nstream service and a ui service the ui\nservice is for the front end that we\nwere just looking at\ni'm not going to show you too much of\nthe front end code because it's fairly\nsimilar to\nother applications you may have built\nbut i will mention that it's using\ntailwind css\nchart.js and nexjs so it's a very\ntypical front-end next.js\napplication\nthat just calls an api to get all the\ndata but let's look at what the api\nlooks like\ni wrote the api using python and fast\napi\nas well as redisome for communicating\nwith redistac so the first two routes\nhere are for the watch list it lets you\nwatch and unwatch stocks so add and\nremove stocks from your watch list\ni'm using a redis set to keep track of\nyour watch list this makes it really\neasy because you can automatically avoid\nduplicates\nthe next route is to just get the watch\nlist what it does is it grabs the set\nout of redis and then it uses redis ohm\nto get all the json documents where the\nsymbol for the json document is in my\nwatch list\nthis lets me\nbring more information forward such as\nthe news and some other information\nabout the stock another route is\nsearching so this uses redissearch to\nfind stocks so when you're typing in the\nform in your watch list on the front end\nas soon as you get to a certain number\nof characters i start searching for\nstock symbols this uses redis search and\nredisown\nthis route is for getting all the bars\nover the last 30 minutes so what i mean\nby bar is\nthe alpaca api gives you what's called\nbars that have a high price a low price\na volume an open price and a close price\nwithin a certain time period\nso i'm looking at the last 30 minutes of\nbars\nand this route just simply you provide a\nstock symbol and it returns the bars for\nyou\nthe next route gives you an individual\ntrade so it will give you the latest\ntrade for a particular symbol and the\nprice of that trade\nboth of these routes are using\nredis time series which is part of redis\nstack and it stores time series data so\nthat you can easily query it over a\nrange kind of like we're doing here or\nget the latest value which is what we're\ndoing here\nthis is the trending route so this will\ngive us the list of trending stocks\nremember those stocks are trending based\non the trading frequency so all this\ndoes is looks at the top k filter and\nasks it to give us the list this is\nusing redis bloom which is part of redis\nstack now the next few things might look\nlike routes but they're actually web\nsockets so i have a trending stock\nwebsocket here where the front end can\nsay hey give me all updates about\ntrending stocks and this will just\nlisten to\nredis stack for messages about the\ntrending stocks and automatically inform\nyou that there's an updated trending\nlist\nthis next one is similar but for trades\nso it lets you know whenever there's a\nnew trade\nand then the last one is for bars so it\nwill let you know when there's new bars\non the front end this is how we update\nall of the price information in the\nwatch list\nand this is how we update the graph\nthat's about it for the api\nlet's look at the streaming service now\nthe first thing we want to look at for\nthe streaming service is the entry point\nwhich is the main.pi so that like the\napi this is written in python and it\nuses the alpaca\nsdk as well as redis stack in the main\nloop all that we're doing is connecting\nto alpaca\ndeleting the trending stocks so the\ntraining stocks key is what we use to\nkeep track of the\ntrending stocks using redis bloom and\ntop k\nthen it reserves the training stocks\nagain and syncs up the watch list with\nwhatever is in the set in redis at that\ntime what reserve top k does is\nit just reserves this key to be used\nwith the top k filter and we're saying\nkeep track of the 12 most frequently\ntraded stocks\nand then we also set an expiration of\nthis key to 60 seconds\nthe reason for this is\nevery 60 seconds we rebuild the training\nstock list so on the front end\nevery 60 seconds you can see okay what\nstocks are being actively traded so this\nis where we're using pub sub to\nunderstand when the\ntraining stocks key has expired and\nwhenever it's expired we re-reserve it\nand start rebuilding the list\nwe're also listening to the watch list\nso if you recall in the api\non the front end you can add something\nto your watch list or remove it when you\ndo that the api simply updates the set\nwithin redis well here we're going to be\nlistening to that watchlist key space\nand whenever it updates we will sync it\nso let's dive into what that looks like\nhere\nwhen we sync the watch list\nwe're basically getting the watch list\ndoing a set comparison\nand unsubscribing from anything we need\nto unsubscribe from and subscribing to\nwhatever we need to subscribe to the\nrest of this is all\nalpaca related so we call subscribe\ntrades these are how we listen to the\nalpaca api in real time and get trades\nas well as bars\nwe can also initialize a stock if we\nneed to and what this will do is it will\ngive us historical trades and historical\nbars about the stock and it'll also\ncreate the time series keys that we need\nin redis stack\nso here it's creating all the time\nseries with all the trades over the last\nwhatever time period we decided which i\nthink i decided the time period was\ngoing to be the last 30 minutes or\nsomething\nand that's about it in here the next\npiece of this is what happens as\nincoming trades and incoming bars come\nin\nas incoming trades come in we\nadd the trade to our time series and\nthen we also add it to our top k\nand then we publish an update saying\nokay the top we've updated the top k so\nthere are is a new trade in the top k\nthat will tell our api\nto update the top k list on the front\nend and if you remember there's a\nwebsocket that the front end can listen\nto to get updates to those trending\nstocks\nso\nmessage flow here is\nan incoming trade comes from alpaca\nthen we publish\na\nmessage saying okay we've updated the\ntrades and updated the\ntrending stocks list then the api\nreceives that message\nand it will notify the front end if\nthere are any changes needed and i've\njust shown you\njust a little sneak peek of all the code\nthat is in here i wanted to show you\nsome specific things to have you get a\nsense of how all of the pieces fit\ntogether within this application but the\nnext thing i want to show you is how\nthis looks in redis insight\nin redis insight you can see how we have\na bunch of json documents\nthat represent each stock so i pulled a\nbunch of data from nasdaq directly to\npopulate all this information\nlet's look at the watch list\nso the watch list is a set and you can\nsee it has all the items that are on\nthat were represented on our watch list\non the front end so this is how we're\nable to keep track of what we're\nwatching and\nadd and remove things from this set when\nwe either don't want to watch them\nanymore or with if we want to watch a\nnew stock\nnow let's look at something on our watch\nlist so\nlike apple\nso if i filter to apple you'll see we\nhave a bunch of different data\nstructures for\napple itself the first one is this json\ndocument\nso it stores information such as the\nmarket cap the name apple common stock\nthe sector and the industry\nit also has an embedded list of news\narticles so this is where on the front\nend we're showing you all those list of\narticles and then we let you click and\ngo to them this is what we're pulling\nfrom the alpaca api so as new news\narticles come in we update this json\ndocument with the article\nwe're also storing a bunch of different\ntime series related to quotes trades and\nbars\nyou can't see\nthe data in this but let's look at what\nit looks like to get the latest trade\nfrom apple\nso what we'll do is we'll use the ts.get\ncommand to get the latest\nprice of the apple trade so the first\nvalue that's returned is the timestamp\nand the second one is the price\nand what we do is we\nquery this over a range in order to\npopulate the chart on the front end\nthe command for that is\nts.range\nand what i'll do here is specify\na from time stamp and a two time stamp\nto get several different values so on\nthe front end we get a list of\nkey value pairs where the key is the\ntimestamp and the value is the stock\nprice\nso hopefully by now you get a sense of\nhow\npowerful redis stack is and how it turns\nredis into a multi-model database that\nyou can use to replace several\ntechnologies that you would typically\nuse in a real-time application\nhere our entire application from start\nto finish is powered by redis stack"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "transcripts.load.getTranscript" "message" "Getting transcript for https://www.youtube.com/watch?v=SzcpwtLRgyk" "meta" "{\"location\":\"transcripts.load.getTranscript\"}"
"SET" "transcripts:SzcpwtLRgyk" "oh\nthe air in here is not ideal\nif only i could go back in time and\nmonitor the air quality and have it warn\nme to close the windows\nwait\nthere is a way to do that\nred is time series to the rescue let's\ncheck it out\n[Applause]\n[Music]\nredis time series is a component of\nredis stack that has a time series data\nstructure to redis\nas you'd expect from redis redis time\nseries can quickly ingest data samples\nwhile still providing low latency reads\nand of course there's a suite of\ncommands that allow you to tailor your\ndata for real-time tracking secondary\nindexing and even control over the data\nstructure's size\nlet's spend some time covering the\nbasics\nfor today's example we'll be taking\nsensor readings of the air quality\naround my house to alert us when we need\nto close the windows due to smoke or\nparticulates in the air\nwe'll use a wi-fi enabled raspberry pi\ncompute unit attached to an air sensor\nto take a sniff every second outside my\nhouse\nwe'll create two of these remote sensors\nto track the quality of the front and\nback of the house\nwe then send each device's readings to\nredis time series which is hosted on\nredis cloud\nwe can then create a service to monitor\nthe values and send an alert when the\nthreshold of clean air has been passed\ntime series commands are prefixed with\nts dot followed by the actual command\nto create a time series in redis use the\ncreate command followed by the key name\nfor our two sensors we'll use\ndash sensor colon 1 and particulate dash\nsensor colon 2.\nwe are now able to make a few decisions\nabout our object's behavior with some\noptional sub commands\nadding the retention option allows us to\nset how long in milliseconds previous\nevents are kept since the most recent\nevent insertion\nlet's say we want to keep the most\nrecent seven days of sensor readings\nwe'll want to set the retention time to\nsix hundred and four million eight\nhundred thousand milliseconds chunk size\nspecifies the initial amount of memory\nreserved for our time series\nthe default is 4096 kilobytes but we can\nchoose any multiple of eight\nthe size will double as more space is\nneeded for the data structure we'll set\nthe initial chunk size to\n16192 to give us plenty of space to work\nwith\nduplicate policy lets us decide what to\ndo if a sample with the same timestamp\nis inserted should we go with the\ndefault and block it should we replace\nit with the newer one replace it if it's\nlarger add the values together\nthe decision is unique to each use case\nand for our particular case we can\nchoose to replace the sample with the\nnewest reading just in case we want to\nreplace obvious errors with an average\nvalue\nlastly we can add label value pairs to\nthe key for secondary indexing\nthis will help with querying which we'll\ncover later on\nnow that we have our two time series\ncreated we can add samples using the add\ncommand we call add then the specific\nkey then we include a timestamp in\nmilliseconds that we want to associate\nwith a sample\nwe can also use an asterisk to let\nreddit set the timestamp based on the\nredis server system clock\nwe can also use add to instantiate a new\ntime series object and add an initial\nvalue\nretention chunk size duplicate policy\nlabels and all other options are also\navailable at this point as well\nas we use our time series and observance\nbehavior over time we might need to\nadjust a few key specific settings that\nbetter suit our needs\nif we need to update the options\nassigned to an existing time series such\nas the retention time duplicate policy\nand the existing labels we can use the\nalter command\nwe can do this by calling alter with the\nkey we want to update and the options we\nwant to change\nnote that any changes you make with\nalter replaces the previous\nconfiguration of your time series\na time series often contains a large\nquantity of samples\nwe may want to retrieve a portion of our\ntime series to view only samples\nrepresenting a specific hour day or time\nframe of our choosing\nto get samples for a given time period\nfrom a time series we use the range\ncommand\nthis command's parameters include start\nand end timestamps these specify the\nboundaries in which we want to retrieve\nthe time-stamped samples\nrange has some options that help us get\ninsights into our time series samples\nwe can use filter by value with the min\nand max value pair to only receive the\ntimestamps and samples within those two\nvalues inclusively\nusing the air quality sensors example i\ncan call range on a time series with the\nfilter by value option\nwhen i specify a minimum value of 51 and\na maximum value of 100 i'll get a result\ncontaining samples where air quality was\nin that range this is considered to be\nmoderate air quality\nif i filter for values between 101 and\n150 i would receive all the time stamps\nthat have unhealthy air quality values\nlastly with the range commands\naggregation option we can aggregate\nvalues of our specified time range to\nfind the sum\nthe maximum\nthe minimum\nand the average\nthis is great for taking samples from\nyour time series without computing\naggregate values from the entire set of\ndata points yourself\nit should be noted that there is also a\nrev range command that works exactly as\na range command only in reverse\nthis means that the range will by\ndefault travel from the most recent\nvalues to the oldest this is preferable\nif you want to traverse recent\ntimestamps more often than ones near the\nbeginning of the time series\nthe range commands are great for when we\nwant a specific zoomed in view of the\nsamples or want to retrieve a specified\nsample range as a computed average\nas an example if we're sending our time\nseries to a monitoring service such as\ngrafana or prometheus the range command\nwould be called anytime we want to\ninspect our samples through a rolling\n24-hour period or the last hourly\naverage\none of the more interesting and useful\ncommands within the redis time series\nmodule is create rule\nthis command adds timestamps and samples\nfrom one time series to a second time\nseries in an aggregated form\nthis is great for data compaction and\ncustom value tracking\nlet's say i want to see a graphical\nrepresentation of the samples for my two\nair quality sensors\ni can connect redis to grfada a data\nvisualization platform to see the air\nquality over time\nthis is great but quite costly for\ngraffana to consume a day's worth of\nsamples from my time series to create\nthis view\nwe'll create a new time series called\nparticulate sensor colon 1 colon average\ncolon 10 store average values in 10\nminute time buckets from our original\nparticulate sensor 1 time series\nwe call create rule with the destination\nkey the target key the aggregation\noption with the aggregation type and\ntime bucket in milliseconds\nhere i am choosing average and 600 000\nmilliseconds or 10 minutes\nthe new time series will now take the\naverage of the last 10 minutes of\nsamples and create a single data point\nthere will be fewer samples in this time\nseries but this is perfect for data\ncompaction where we're not interested in\nthe granular values but more of an\noverview\nthis is especially great for\nvisualizations as the view is less\ncrowded the size of the time series is\nsmaller and the rendering takes less\ntime\nthere are many other aggregation types\nsuch as sample count sum of values min\nmax values standard deviations and\nvariances of sample sets and populations\nmake sure to check the documentation for\nthe full rundown of every command and\nits options\nlet's expand on the air sensor example a\nlittle\nimagine we had a large fleet of air\nsensors dispersed throughout our town\nmaybe we'd like to search for sensors\nthat might have certain zip codes street\nnames districts or location types such\nas residential commercial or industrial\nthe redis time series has a query index\ncommand that could help of such a search\nthis allows us to query across all the\ntime series keys to find matching or\nnon-matching labels and values\nhere are a few of the query filters that\nyou can use with the labels\nthese are great if you want a list of\nall the keys at the same label value but\nnot necessarily all the values with only\none key\nwe've only just scratched the surface of\nwhat redis time series can do with\ntime-stamped samples\nfinance and stock market analysis\nreal-time device monitoring factory\nproduction tracking historical data\nanalysis the possibilities are limited\nonly by your imagination\nif you would like to learn more about\nthe redis time series module including\nmore commands and options not included\nin this video head over to our\ndocumentation at redis.io\nyou can always sign up for a free redis\nstack database in the cloud to start\nexperimenting with redis time series\nso the next time you find that you're\ninundated with information and want to\nkeep track of everything let retta's\ntime series do the heavy lifting for you\nyou'll watch an amazement just what\nyou'll be able to accomplish breathe\neasy i'll see you next time\n[Applause]\n[Music]"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "transcripts.load.getTranscript" "message" "Getting transcript for https://www.youtube.com/watch?v=Z8qcpXyMAiA" "meta" "{\"location\":\"transcripts.load.getTranscript\"}"
"SET" "transcripts:Z8qcpXyMAiA" "hello streaming data is everywhere\nand its growth seems unstoppable\nactivity from social networks\nwebsite analytics and sensors and iot\ndevices generates a constant flow of new\ndata coming at us from a huge number of\nsources\nin this video we'll see how redis can\nhelp us capture manage and make sense of\nthese large and constantly moving\nvolumes of data\nright out of the box\nstreaming data is data that's generated\ncontinuously often from a large number\nof concurrent sources\none useful way of thinking about a\nstream is as a series of events\nevery entry in the stream represents a\nnew event\nfor example you can imagine recording a\nstream of weather sensor readings at a\ngiven location\nevery entry in the stream might consist\nof a temperature a humidity measurement\nand the wind direction and speed because\nstreams and events are such a useful\nabstraction and occur so often in the\nreal world\nredis provides a data structure called a\nstream in the rest of this video i'm\ngoing to introduce some streaming\nconcepts\nand then i'll demonstrate some of the\nbasic commands you can use to manipulate\nstreams and redis\nso let's start with concepts in a\ndistributed application architecture the\ncomponents that write to a stream are\ncalled producers\nthe data they generate is added to a\nstream with each entry having a unique\nidentifier and its specific fields\nat the other end of the stream are one\nor more consumers\nthese consumer processes read entries\nfrom the stream and process them as\nnecessary\nwhat's interesting is that you can have\nmore than one consumer reading from your\nstream\neach consumer has its own role for\nexample one type of consumer might\ncreate notifications in a mobile\napplication\nwhen certain trigger values are seen in\nthe data another consumer might write\nall entries to a data warehouse for\nlater analysis\nwhile a third consumer could act as a\nproducer for yet another stream\nadding only a subset of the entries to\nthe new stream\nproducers and consumers often operate at\ndifferent rates\nthe stream acts as a buffer between them\nas well as the decoupling mechanism this\nmeans that producers and consumers don't\ndirectly communicate with each other\nso don't need to know anything about\neach other's implementations\nnow let's talk about the reddit stream\ndata structure itself\na reddit stream is a data structure that\nbehaves like an appendally log\nonce added an entry in a stream is\nimmutable each entry in a reddest stream\nhas a unique id\nand by default these ids are timestamp\nprefixed\nthis means that a reddest stream keeps\nentries ordered as a time series\nstream entries look a lot like a redis\nhash each is a set of name value pairs\nit's also worth noting that reader\nstreams are schema-less while each\nstream entry has to have at least one\nname value pair\nthey don't all have to use the same\nstructure redis allows consumers to read\nstream entries in order\nconsumers can also efficiently seek to\nany entry within the stream\nso enough theory let's look at redis\nstreams in action\nwe'll see how they fit into a common use\ncase for streaming data systems\nrecording real-time crowdsourced data\nimagine we're building a mobile app that\nallows users to check in at all sorts of\nbusinesses\npublic spaces and workplaces users\nprovide star ratings based on their\nexperience\nat each location each time a user checks\nin they'll pick out their location from\na list our app provides\nthey'll then select a star rating from 0\nto 5 and the app will send this data\nalong with their user id to a server\nusers earn prize draw entries for each\ncheck-in and we periodically offer cool\nprizes to randomly drawn winners\nthis incentive encourages users to check\nin often improving their chance of\nwinning\na typical check-in can be represented as\na set of name-value pairs here we have a\ncheck in for user id 99 at venue id\n103 the user decided to give this venue\n4 stars\nreadings from our many users are sent\ncontinuously to our servers\nand those servers produce entries into\nour redis stream\nonce this fire hose of jumbled data is\nadded to a reddit stream\nwe can begin to organize and make sense\nof it\nlet's see how each check-in finds its\nway into a reddit stream\nfirst like other redis data structures a\nstream is associated with a redis key\nwe'll use the key check-ins to identify\nthe incoming stream of check-in data\nthe x-add command adds a new entry to a\nstream\nhere we're adding an entry to the check\nin stream from user 90781\nthis user is visiting location 348\nand rating it three stars the asterisk\nin the exact command tells redis to\nassign this entry a unique id consisting\nof the current timestamp\nplus a sequence number exside returns\nthe id that redis is assigned to the new\nentry\nthe first part is the timestamp in\nmilliseconds and the second is a\nsequence number\nsince stream ids must be unique this\nconvention ensures that we can add as\nmany entries as we need in the same\nmillisecond\nnow that we have check-ins flooding into\nour stream it's time to think about how\nthe business can make sense of them\nas redis assigns each entry a timestamp\nbased id\none way that a consumer can view the\nstream is as a time series\nhere we're using the x range command to\nread entries in the check-in stream that\nfall between the specified start and end\ntime stamps\nx-range returns each entry whose id\nfalls within the specified time period\nentries are returned in order with the\noldest first\nto limit the number of entries returned\nwe can use the optional count modifier\nif we want the most recent entries first\nwe can use the x rev range command\ninstead\nnote that here we specify the time\nperiod in the reverse\norder with the end time stamp coming\nfirst\nand if we don't know what time period\nthe entries in the stream cover\nwe can use both x range and x rev range\nwith a special plus and minus operators\nto represent the highest and lowest\ntimestamps respectively\nhere we're retrieving the oldest two\nentries in the stream\nbut really streams are all about\nreal-time data consumption\nso we want to build consumers that\ncontinuously receive data\nwe could achieve this by pulling the\nstream using the x-range command but\nthat's inefficient\nideally we want a command that lets us\nconsume the stream\nblocking when we've seen all the entries\nuntil a producer adds new ones\nthis is one of the use cases for the x\nread command\nxreed can consume one or more streams\noptionally blocking until new entries\nappear\nhere i'm calling x-read against the\ncheck-in stream\nx-read consumes the stream returning\nentries whose ids\nare greater than the one provided here\ni'm asking for all entries with an id\ngreater than 0\nthe beginning of the stream and redis\nreturns the entire stream\nwe'll need to note the id of the latest\nentry for subsequent calls to x read\nwe can also invoke x-read in a way that\nblocks the consumer\nuntil new entries are added to the\nstream\nto use xread in a blocking context i'll\nprovide the last entry id for my\nprevious call\ni'll also specify i want to consume a\nsingle new entry\nand how long to block in case the stream\ndoesn't yet contain any entries newer\nthan the one whose id i'm supplying\nhere i'm telling x-read to block for up\nto 5000 milliseconds or 5 seconds\nwhen i run this command it blocks\nbecause no new messages with higher ids\nthan the one i provided have yet been\nadded to the stream\nwhile the consumer is blocked i'll use a\nsecond redis cli session to add a new\nentry to the stream\nas soon as i do that the consumer\nunblocks and xreed returns the newly\nadded entry\nif no new entries have been added in a 5\nsecond blocking period\nxreed would have returned a nil response\ni could then choose the block again\nor give up trying and do something else\nit's important to note that consuming\nthe stream using x range\nx rev range and x read doesn't remove\nentries\nas they are retrieved entries remain in\nthe stream\nallowing other consumers to read the\nentire data set each processing it in\nits own way\nhere one consumer is maintaining running\naverage star ratings\na second writes the entries to a data\nwarehouse and a third adds entries to\nanother stream if the star rating is\nbelow a triggered threshold\nso if new check-ins are constantly\npouring into our stream and consumers\nreading them\naren't removing them then how do we\ncontain this seemingly never-ending\ngrowth\nremember that a stream models\nindependently log this means that the\norder and content of entries can't be\nmodified once they've been added\nhowever redis supports a trimming\nstrategy to manage a stream's memory use\nlet's assume our stream now contains\ntens of thousands of entries and that we\nneed to control its growth\ntrimming a stream removes its oldest\nentries that is\nthose of the lowest timestamp ids this\nfrees up memory associated with these\nentries\nlet's see how that works in practice\nredis commands can be used to trim a\nstream\nthe first of these is xtrim this command\ncan be run at any time\nand trims the stream's length to a\nspecified new length\nhere we're using xtrim to trim our check\nin stream to a new maximum length of 10\n000\nentries the command returns the number\nof entries removed\nin this case we removed 20 000 in one of\nthe oldest entries from the stream\nleaving the newest ten thousand the\nsecond way to trim the oldest entries\nfrom the stream is to do so while adding\na new entry with the exact command\nand this is the more common strategy if\nwe know that we always want to keep the\ncheck in stream to a length of 10\n000 or less then we simply specify that\non every call to x ad\nlike you see here as you saw earlier xad\nreturns the id of the entry that was\nadded but doesn't tell us what the new\nlength of the stream is\nfor that we can use xlan and we see that\nthe stream has been capped to 10\n000 entries including the newly added\none\nthere's a lot more to reddit streams of\nwhat i've presented here\nso if you're interested in learning more\nyou should check out redis streams our\nfree online course from redis university\ni know streams can seem like a fire hose\nof information\nso thanks for sticking with me and\nforwarding this river together happy\nlearning\nand see you again soon"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "google.summarize.docs" "message" "Summarizing https://www.youtube.com/watch?v=FQzlq91g7mg" "meta" "{\"id\":\"FQzlq91g7mg\",\"link\":\"https://www.youtube.com/watch?v=FQzlq91g7mg\",\"title\":\"Redis + MySQL in 60 Seconds\",\"description\":\"What are the possibilities for MySQL when integrating with the real-time power of Redis? Try Redis Cloud for free: https://redis.com/try-free/\\n\\nMySQL is open source, free, and can be fast when working on a relational database, but to handle modern use cases, your MySQL will need a boost of real-time performance - the type Redis Enterprise can provide. MySQL can be difficult to scale and lacks the modern features necessary to quickly operate complex queries. Enable your MySQL applications with the real-time performance power of Redis.\\n\\nFrom the blog: https://redis.com/blog/3-reasons-your-mysql-db-needs-redis/\\n\\nDownload our MySQL Solution Brief: https://redis.com/docs/modernize-your-mysql-database-with-redis-enterprise/\\n\\nExplore Redis + MySQL: https://redis.com/comparisons/redis-enterprise-and-mysql/\\n\\nTry Redis Enterprise Cloud for free: https://redis.com/try-free/\\n\\n#MySQL #SQL #Redis\",\"thumbnail\":\"https://i.ytimg.com/vi/FQzlq91g7mg/maxresdefault.jpg\",\"location\":\"google.summarize.docs\"}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "google.summarize.docs" "message" "Summarized https://www.youtube.com/watch?v=FQzlq91g7mg:\n SUMMARY:\nThe video discusses the limitations of MySQL at scale and introduces Redis Enterprise as a solution to improve performance. Redis Enterprise can be used alongside MySQL to store frequently accessed data in memory, reducing latency and speeding up responses. Additionally, Redis Enterprise can offload secondary indexed queries from MySQL, further reducing load on the database.\n\nQUESTIONS:\n\n1. What are the limitations of MySQL at scale?\n2. How can Redis Enterprise improve the performance of MySQL?\n3. What type of data is best suited to be stored in Redis Enterprise?\n4. How does Redis Enterprise handle secondary indexed queries?\n5. What are the benefits of using Redis Enterprise with MySQL?\n6. Can Redis Enterprise be used as a standalone database?\n7. What is the pricing model for Redis Enterprise?\n8. How does Redis Enterprise compare to other in-memory data stores?\n9. Are there any specific industries or use cases where Redis Enterprise is particularly well-suited?\n10. How can I get started with Redis Enterprise?" "meta" "{\"summary\":\"SUMMARY:\\nThe video discusses the limitations of MySQL at scale and introduces Redis Enterprise as a solution to improve performance. Redis Enterprise can be used alongside MySQL to store frequently accessed data in memory, reducing latency and speeding up responses. Additionally, Redis Enterprise can offload secondary indexed queries from MySQL, further reducing load on the database.\\n\\nQUESTIONS:\\n\\n1. What are the limitations of MySQL at scale?\\n2. How can Redis Enterprise improve the performance of MySQL?\\n3. What type of data is best suited to be stored in Redis Enterprise?\\n4. How does Redis Enterprise handle secondary indexed queries?\\n5. What are the benefits of using Redis Enterprise with MySQL?\\n6. Can Redis Enterprise be used as a standalone database?\\n7. What is the pricing model for Redis Enterprise?\\n8. How does Redis Enterprise compare to other in-memory data stores?\\n9. Are there any specific industries or use cases where Redis Enterprise is particularly well-suited?\\n10. How can I get started with Redis Enterprise?\",\"location\":\"google.summarize.docs\"}"
"SET" "google-video-summary:FQzlq91g7mg" "SUMMARY:\nThe video discusses the limitations of MySQL at scale and introduces Redis Enterprise as a solution to improve performance. Redis Enterprise can be used alongside MySQL to store frequently accessed data in memory, reducing latency and speeding up responses. Additionally, Redis Enterprise can offload secondary indexed queries from MySQL, further reducing load on the database.\n\nQUESTIONS:\n\n1. What are the limitations of MySQL at scale?\n2. How can Redis Enterprise improve the performance of MySQL?\n3. What type of data is best suited to be stored in Redis Enterprise?\n4. How does Redis Enterprise handle secondary indexed queries?\n5. What are the benefits of using Redis Enterprise with MySQL?\n6. Can Redis Enterprise be used as a standalone database?\n7. What is the pricing model for Redis Enterprise?\n8. How does Redis Enterprise compare to other in-memory data stores?\n9. Are there any specific industries or use cases where Redis Enterprise is particularly well-suited?\n10. How can I get started with Redis Enterprise?"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "google.summarize.docs" "message" "Summarizing https://www.youtube.com/watch?v=I-ohlZXXaxs" "meta" "{\"id\":\"I-ohlZXXaxs\",\"link\":\"https://www.youtube.com/watch?v=I-ohlZXXaxs\",\"title\":\"Redis and JSON  Explained (Revisited)\",\"description\":\"Hungry for more Redis and JSON tips and tricks? Check out this video from Redis on how to create and update JSON documents in a Redis Stack instance! Then create secondary search indexes with Redis and Search to query Redis for some delicious results!\\n\\n00:00 Introduction\\n00:32 Why we use Redis Stack\\n00:44 Intro to the use case\\n01:22 JSON.SET truck:42 - create and store a vendor JSON object\\n02:00 JSON.SET location:23 - create and store a location JSON object\\n02:21 JSON.SET event:11 - create and store an event JSON object\\n02:47 JSON.ARRAPPEND - ad an element to an existing JSON array\\n03:11 JSON.SET - adding to an existing JSON document\\n03:52 Redis Search & JSON\\n04:46 FT.CREATE - creating a search index for \\\"truck:\\\" JSON documents\\n05:55 FT.SEARCH - query for text within a search index\\n06:40 FT.SEARCH - query for TAG words within a search index\\n07:10 FT.CREATE - creating a search index for \\\"event:\\\" JSON. documents\\n07:51 FT.SEARCH - query for numeric range within a search index\\n08:26 Conclusion\\n\\nLinks: \\nRU204: Storing, Querying, and Indexing JSON at Speed: https://university.redis.com/courses/ru204/\\nRedis University \xe2\x86\x92 https://university.redis.com/\\nRedis \xe2\x86\x92 https://www.redis.com/\\nRedis Stack \xe2\x86\x92 https://redis.io/docs/stack/\\nRedis and JSON \xe2\x86\x92 https://redis.io/docs/stack/json/\\nRedis and Search \xe2\x86\x92 https://redis.io/docs/stack/search/\\nNeed a Redis Cloud now? Sign up for a free Redis Cloud Essentials account \xe2\x86\x92 https://bit.ly/3xdTyMR\\n\\nJoin our discord server \xe2\x86\x92 https://discord.gg/redis\",\"thumbnail\":\"https://i.ytimg.com/vi/I-ohlZXXaxs/maxresdefault.jpg\",\"location\":\"google.summarize.docs\"}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "google.summarize.docs" "message" "Summarized https://www.youtube.com/watch?v=I-ohlZXXaxs:\n **Summary:**\n\nThe video provides an overview of the new features introduced in Redis JSON, which enable efficient querying and indexing of JSON documents. The demonstration utilizes the Redis Stack platform and RedisInsight, the Redis GUI, to showcase the creation and manipulation of JSON objects. Additionally, it introduces RediSearch, a component of Redis Stack, to demonstrate indexing and querying JSON data.\n\n**Questions:**\n\n1. What is the key format used to store vendor data in Redis JSON?\n\n2. How would you append an event ID to the events array within a vendor JSON object?\n\n3. Explain the purpose of the SCHEMA option when creating a RediSearch index.\n\n4. What are the data types supported by RediSearch for indexing JSON fields?\n\n5. How can you search for a specific tag within the cuisines array of a vendor JSON object?\n\n6. What is the syntax for creating an index on event JSON documents using RediSearch?\n\n7. Provide an example query to find all events with a specific number of assigned vendors using RediSearch.\n\n8. What is the purpose of the pro tip mentioned in the video regarding searching for an exact number of assigned vendors?\n\n9. Where can you find the Redis University course mentioned in the video that covers Redis JSON and RediSearch?\n\n10. What are the options available to try out Redis Stack?" "meta" "{\"summary\":\"**Summary:**\\n\\nThe video provides an overview of the new features introduced in Redis JSON, which enable efficient querying and indexing of JSON documents. The demonstration utilizes the Redis Stack platform and RedisInsight, the Redis GUI, to showcase the creation and manipulation of JSON objects. Additionally, it introduces RediSearch, a component of Redis Stack, to demonstrate indexing and querying JSON data.\\n\\n**Questions:**\\n\\n1. What is the key format used to store vendor data in Redis JSON?\\n\\n2. How would you append an event ID to the events array within a vendor JSON object?\\n\\n3. Explain the purpose of the SCHEMA option when creating a RediSearch index.\\n\\n4. What are the data types supported by RediSearch for indexing JSON fields?\\n\\n5. How can you search for a specific tag within the cuisines array of a vendor JSON object?\\n\\n6. What is the syntax for creating an index on event JSON documents using RediSearch?\\n\\n7. Provide an example query to find all events with a specific number of assigned vendors using RediSearch.\\n\\n8. What is the purpose of the pro tip mentioned in the video regarding searching for an exact number of assigned vendors?\\n\\n9. Where can you find the Redis University course mentioned in the video that covers Redis JSON and RediSearch?\\n\\n10. What are the options available to try out Redis Stack?\",\"location\":\"google.summarize.docs\"}"
"SET" "google-video-summary:I-ohlZXXaxs" "**Summary:**\n\nThe video provides an overview of the new features introduced in Redis JSON, which enable efficient querying and indexing of JSON documents. The demonstration utilizes the Redis Stack platform and RedisInsight, the Redis GUI, to showcase the creation and manipulation of JSON objects. Additionally, it introduces RediSearch, a component of Redis Stack, to demonstrate indexing and querying JSON data.\n\n**Questions:**\n\n1. What is the key format used to store vendor data in Redis JSON?\n\n2. How would you append an event ID to the events array within a vendor JSON object?\n\n3. Explain the purpose of the SCHEMA option when creating a RediSearch index.\n\n4. What are the data types supported by RediSearch for indexing JSON fields?\n\n5. How can you search for a specific tag within the cuisines array of a vendor JSON object?\n\n6. What is the syntax for creating an index on event JSON documents using RediSearch?\n\n7. Provide an example query to find all events with a specific number of assigned vendors using RediSearch.\n\n8. What is the purpose of the pro tip mentioned in the video regarding searching for an exact number of assigned vendors?\n\n9. Where can you find the Redis University course mentioned in the video that covers Redis JSON and RediSearch?\n\n10. What are the options available to try out Redis Stack?"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "google.summarize.docs" "message" "Summarizing https://www.youtube.com/watch?v=KUfufrwpBkM" "meta" "{\"id\":\"KUfufrwpBkM\",\"link\":\"https://www.youtube.com/watch?v=KUfufrwpBkM\",\"title\":\"Redis Stack Workshop: Redis Stack OM Library for Node.js\",\"description\":\"Join us on April 13th at 5:30pm GMT for the Redis Stack OM library for Node.js workshop with Redis Developer Advocate Guy Royse. \\n\\nTune in to follow as Guy demonstrates how to create applications using Redis Stack and Node.js. Also, see how to store your data using Redis OM and store data using RedisJSON. Follow along with the sample application built with Express, which is available on GitHub. Guy will be on chat to answer any questions. Stay tuned!\\n\\nSource code for the demo application: https://github.com/redis-developer/express-redis-om-workshop\\nRedis OM Client for Node.js: https://github.com/redis/redis-om-node\\n\\nFrom the blog: https://redis.com/blog/introducing-redis-stack/\\nDiscover Redis Stack: https://redis.io/docs/stack/\\n\\n#Redis #RedisStack #NodeJS #RedisOM\",\"thumbnail\":\"https://i.ytimg.com/vi/KUfufrwpBkM/maxresdefault.jpg\",\"location\":\"google.summarize.docs\"}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "google.summarize.docs" "message" "Summarized https://www.youtube.com/watch?v=KUfufrwpBkM:\n **Summary:**\nThis video is an advanced tutorial that demonstrates how to enhance a Node.js API built using Express and Redis with RedisOne and Redis' native features. The API supports CRUD operations and various search capabilities, including full-text search, geo search, and location tracking. Furthermore, it introduces the use of streams to maintain a history of location updates.\n\n**Example Questions:**\n\n1. How does RedisOne facilitate the mapping of Redis data types to JavaScript classes and objects?\n2. What is the role of the .env configuration file in this project?\n3. What is the purpose of the createIndex() method used in personRepository?\n4. Can you explain the difference between searching by a string (\"lastName\") and a number (\"age\") using RedisOne?\n5. How does RedisOne differentiate between searching for verified and non-verified users?\n6. Provide the syntax for performing a full-text search on the \"personalStatement\" field using RedisOne.\n7. Demonstrate a complex search query that combines multiple criteria, such as searching for verified users over 21 with a specific last name.\n8. What advantages does the text field type offer compared to the string field type for storing data in Redis?\n9. Explain the role of the client.fetchRepository() method in establishing communication between the client and the RedisOne repository.\n10. How can you use the Swagger UI to test and interact with the API endpoints?\n11. What is the significance of the keyname property in the context of creating a Redis stream for location history?\n12. How do you use Redis commands via the command-line interface (CLI) to retrieve the location history stored in the stream?\n\n**Question and Answer Bot:**\n\n* Question: What is the benefit of using RedisOne in this Node.js API?\n  * Answer: RedisOne provides a convenient way to map Redis data types to JavaScript classes and objects, simplifying the interaction with Redis.\n\n* Question: Why is a .env file used in this project?\n  * Answer: The .env file stores sensitive configuration data, such as the Redis connection URL, separately from the application code.\n\n* Question: What is the purpose of the createIndex() method in the personRepository?\n  * Answer: The createIndex() method is used to create an index on a specific field in the Redis database, optimizing search performance.\n\n* Question: How can I differentiate between searching for verified and non-verified users using RedisOne?\n  * Answer: You can use the \"verified\" field as a filter in your search query to differentiate between verified and non-verified users.\n\n* Question: Can you provide a syntax example for performing a full-text search on the \"personalStatement\" field using RedisOne?\n  * Answer: To perform a full-text search on the \"personalStatement\" field, you can use a query like this: `where personalStatement matches \"search_term\"`.\n\n* Question: How can I create a complex search query that combines multiple criteria?\n  * Answer: You can combine multiple criteria using logical operators like AND and OR in your search query. For example, to search for verified users over 21 with a specific last name, you could use a query like this: `where verified = true and age > 21 and lastName = \"lastName\"`.\n\n* Question: What are the advantages of using the text field type for storing data in Redis compared to the string field type?\n  * Answer: The text field type supports advanced search capabilities, such as full-text search, stemming, and stop word removal, making it suitable for storing textual data.\n\n* Question: What is the significance of the keyname property in the context of creating a Redis stream for location history?\n  * Answer: The keyname property is used to identify the stream for location history and should be unique for each person.\n\n* Question: How can I retrieve the location history stored in the stream using Redis commands via the CLI?\n  * Answer: You can use the XRANGE command in the Redis CLI to retrieve the location history stored in the stream. The command syntax is: `XRANGE keyname - +`." "meta" "{\"summary\":\"**Summary:**\\nThis video is an advanced tutorial that demonstrates how to enhance a Node.js API built using Express and Redis with RedisOne and Redis' native features. The API supports CRUD operations and various search capabilities, including full-text search, geo search, and location tracking. Furthermore, it introduces the use of streams to maintain a history of location updates.\\n\\n**Example Questions:**\\n\\n1. How does RedisOne facilitate the mapping of Redis data types to JavaScript classes and objects?\\n2. What is the role of the .env configuration file in this project?\\n3. What is the purpose of the createIndex() method used in personRepository?\\n4. Can you explain the difference between searching by a string (\\\"lastName\\\") and a number (\\\"age\\\") using RedisOne?\\n5. How does RedisOne differentiate between searching for verified and non-verified users?\\n6. Provide the syntax for performing a full-text search on the \\\"personalStatement\\\" field using RedisOne.\\n7. Demonstrate a complex search query that combines multiple criteria, such as searching for verified users over 21 with a specific last name.\\n8. What advantages does the text field type offer compared to the string field type for storing data in Redis?\\n9. Explain the role of the client.fetchRepository() method in establishing communication between the client and the RedisOne repository.\\n10. How can you use the Swagger UI to test and interact with the API endpoints?\\n11. What is the significance of the keyname property in the context of creating a Redis stream for location history?\\n12. How do you use Redis commands via the command-line interface (CLI) to retrieve the location history stored in the stream?\\n\\n**Question and Answer Bot:**\\n\\n* Question: What is the benefit of using RedisOne in this Node.js API?\\n  * Answer: RedisOne provides a convenient way to map Redis data types to JavaScript classes and objects, simplifying the interaction with Redis.\\n\\n* Question: Why is a .env file used in this project?\\n  * Answer: The .env file stores sensitive configuration data, such as the Redis connection URL, separately from the application code.\\n\\n* Question: What is the purpose of the createIndex() method in the personRepository?\\n  * Answer: The createIndex() method is used to create an index on a specific field in the Redis database, optimizing search performance.\\n\\n* Question: How can I differentiate between searching for verified and non-verified users using RedisOne?\\n  * Answer: You can use the \\\"verified\\\" field as a filter in your search query to differentiate between verified and non-verified users.\\n\\n* Question: Can you provide a syntax example for performing a full-text search on the \\\"personalStatement\\\" field using RedisOne?\\n  * Answer: To perform a full-text search on the \\\"personalStatement\\\" field, you can use a query like this: `where personalStatement matches \\\"search_term\\\"`.\\n\\n* Question: How can I create a complex search query that combines multiple criteria?\\n  * Answer: You can combine multiple criteria using logical operators like AND and OR in your search query. For example, to search for verified users over 21 with a specific last name, you could use a query like this: `where verified = true and age > 21 and lastName = \\\"lastName\\\"`.\\n\\n* Question: What are the advantages of using the text field type for storing data in Redis compared to the string field type?\\n  * Answer: The text field type supports advanced search capabilities, such as full-text search, stemming, and stop word removal, making it suitable for storing textual data.\\n\\n* Question: What is the significance of the keyname property in the context of creating a Redis stream for location history?\\n  * Answer: The keyname property is used to identify the stream for location history and should be unique for each person.\\n\\n* Question: How can I retrieve the location history stored in the stream using Redis commands via the CLI?\\n  * Answer: You can use the XRANGE command in the Redis CLI to retrieve the location history stored in the stream. The command syntax is: `XRANGE keyname - +`.\",\"location\":\"google.summarize.docs\"}"
"SET" "google-video-summary:KUfufrwpBkM" "**Summary:**\nThis video is an advanced tutorial that demonstrates how to enhance a Node.js API built using Express and Redis with RedisOne and Redis' native features. The API supports CRUD operations and various search capabilities, including full-text search, geo search, and location tracking. Furthermore, it introduces the use of streams to maintain a history of location updates.\n\n**Example Questions:**\n\n1. How does RedisOne facilitate the mapping of Redis data types to JavaScript classes and objects?\n2. What is the role of the .env configuration file in this project?\n3. What is the purpose of the createIndex() method used in personRepository?\n4. Can you explain the difference between searching by a string (\"lastName\") and a number (\"age\") using RedisOne?\n5. How does RedisOne differentiate between searching for verified and non-verified users?\n6. Provide the syntax for performing a full-text search on the \"personalStatement\" field using RedisOne.\n7. Demonstrate a complex search query that combines multiple criteria, such as searching for verified users over 21 with a specific last name.\n8. What advantages does the text field type offer compared to the string field type for storing data in Redis?\n9. Explain the role of the client.fetchRepository() method in establishing communication between the client and the RedisOne repository.\n10. How can you use the Swagger UI to test and interact with the API endpoints?\n11. What is the significance of the keyname property in the context of creating a Redis stream for location history?\n12. How do you use Redis commands via the command-line interface (CLI) to retrieve the location history stored in the stream?\n\n**Question and Answer Bot:**\n\n* Question: What is the benefit of using RedisOne in this Node.js API?\n  * Answer: RedisOne provides a convenient way to map Redis data types to JavaScript classes and objects, simplifying the interaction with Redis.\n\n* Question: Why is a .env file used in this project?\n  * Answer: The .env file stores sensitive configuration data, such as the Redis connection URL, separately from the application code.\n\n* Question: What is the purpose of the createIndex() method in the personRepository?\n  * Answer: The createIndex() method is used to create an index on a specific field in the Redis database, optimizing search performance.\n\n* Question: How can I differentiate between searching for verified and non-verified users using RedisOne?\n  * Answer: You can use the \"verified\" field as a filter in your search query to differentiate between verified and non-verified users.\n\n* Question: Can you provide a syntax example for performing a full-text search on the \"personalStatement\" field using RedisOne?\n  * Answer: To perform a full-text search on the \"personalStatement\" field, you can use a query like this: `where personalStatement matches \"search_term\"`.\n\n* Question: How can I create a complex search query that combines multiple criteria?\n  * Answer: You can combine multiple criteria using logical operators like AND and OR in your search query. For example, to search for verified users over 21 with a specific last name, you could use a query like this: `where verified = true and age > 21 and lastName = \"lastName\"`.\n\n* Question: What are the advantages of using the text field type for storing data in Redis compared to the string field type?\n  * Answer: The text field type supports advanced search capabilities, such as full-text search, stemming, and stop word removal, making it suitable for storing textual data.\n\n* Question: What is the significance of the keyname property in the context of creating a Redis stream for location history?\n  * Answer: The keyname property is used to identify the stream for location history and should be unique for each person.\n\n* Question: How can I retrieve the location history stored in the stream using Redis commands via the CLI?\n  * Answer: You can use the XRANGE command in the Redis CLI to retrieve the location history stored in the stream. The command syntax is: `XRANGE keyname - +`."
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "google.summarize.docs" "message" "Summarizing https://www.youtube.com/watch?v=LaiQFZ5bXaM" "meta" "{\"id\":\"LaiQFZ5bXaM\",\"link\":\"https://www.youtube.com/watch?v=LaiQFZ5bXaM\",\"title\":\"Redis Stack Crash Course: How to Build Apps with Superpowers\",\"description\":\"Redis Stack turns Redis into a multi-model database, enabling you to build rich real-time applications with Redis as a primary database. Explore Redis Stack - http://redis.info/3Lq9gbF\\n\\nRedis Stack consolidates the capabilities of the leading Redis modules into a single product, making it easy for developers to build modern, real-time applications with the speed and stability of Redis.\\n\\nRedis Stack is free and unifies the leading Redis modules in a single product. This makes it easy to start building with our Redis-based search, document, graph, and time series capabilities.\\n\\nRedis Stack is a suite of three components:\\n\\n- Redis Stack Server combines open source Redis with RediSearch, RedisJSON, RedisGraph, RedisTimeSeries and RedisBloom\\n\\n- RedisInsight is a powerful tool for visualizing and optimizing Redis data, making real-time application development easier and more fun than ever before\\n\\n- The Redis Stack Client SDK includes the leading official Redis clients in Java, JavaScript, and Python.  These clients also include our new suite of object mapping libraries which offer developer-friendly abstractions that get you productive with just a few lines of code. Known as Redis OM for .NET, Node.js, Java, and Python, these libraries also make it easier than ever to integrate with major application frameworks such as Spring, ASP.NET Core, FastAPI, and Express.\\n\\nSign up for Redis Cloud for free using code TIGER200: https://redis.info/3pyzVea\\n\\nGet the Source Code for This Video: https://redis.info/36PTesO\\n\\nFrom the Blog: https://redis.com/blog/introducing-redis-stack/\\n\\nLearn more about Redis Stack: http://redis.info/3Lq9gbF\\n\\n#RedisStack #Redis #RedisEnterprise #RealTimeData\",\"thumbnail\":\"https://i.ytimg.com/vi/LaiQFZ5bXaM/maxresdefault.jpg\",\"location\":\"google.summarize.docs\"}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "google.summarize.docs" "message" "Summarized https://www.youtube.com/watch?v=LaiQFZ5bXaM:\n SUMMARY:\n\n- Redis Stack is a multi-model database that supports multiple data structures and capabilities in a single database, reducing complexity and saving time.\n- The demonstration showcased a real-time stock watchlist application built with Redis Stack, featuring a watchlist, trending stocks, stock charts, and real-time updates.\n- The application utilized Redis Stack's capabilities for storing data in various formats, including sets, hashes, JSON documents, time series data, and probabilistic data.\n- Pub/Sub was used to facilitate communication between different microservices in real-time.\n- RedisInsight provided visual insights into the data structures and content stored within Redis Stack.\n\nEXAMPLE QUESTIONS:\n\n1. What are the key data structures and capabilities employed in the demonstration application?\n2. How does Redis Stack's multi-model nature contribute to the overall efficiency of the application?\n3. Can you explain how sets and hashes are utilized in the context of the watchlist functionality?\n4. What is the significance of storing time series data in Redis Stack for the stock charts and trending stocks features?\n5. How does Pub/Sub contribute to real-time communication and data updates in the application?\n6. What are the advantages of using RedisInsight for monitoring and exploring the data stored in Redis Stack?\n7. How does the application leverage Redis Stack's features to facilitate seamless addition and removal of stocks from the watchlist?\n8. What is the purpose of the top k filter, and how does it assist in identifying trending stocks?\n9. Can you provide insights into the process of updating the watchlist and trending stocks based on incoming trades and bars?\n10. How is the latest trade price retrieved from Redis Stack, and how is it displayed on the stock chart?" "meta" "{\"summary\":\"SUMMARY:\\n\\n- Redis Stack is a multi-model database that supports multiple data structures and capabilities in a single database, reducing complexity and saving time.\\n- The demonstration showcased a real-time stock watchlist application built with Redis Stack, featuring a watchlist, trending stocks, stock charts, and real-time updates.\\n- The application utilized Redis Stack's capabilities for storing data in various formats, including sets, hashes, JSON documents, time series data, and probabilistic data.\\n- Pub/Sub was used to facilitate communication between different microservices in real-time.\\n- RedisInsight provided visual insights into the data structures and content stored within Redis Stack.\\n\\nEXAMPLE QUESTIONS:\\n\\n1. What are the key data structures and capabilities employed in the demonstration application?\\n2. How does Redis Stack's multi-model nature contribute to the overall efficiency of the application?\\n3. Can you explain how sets and hashes are utilized in the context of the watchlist functionality?\\n4. What is the significance of storing time series data in Redis Stack for the stock charts and trending stocks features?\\n5. How does Pub/Sub contribute to real-time communication and data updates in the application?\\n6. What are the advantages of using RedisInsight for monitoring and exploring the data stored in Redis Stack?\\n7. How does the application leverage Redis Stack's features to facilitate seamless addition and removal of stocks from the watchlist?\\n8. What is the purpose of the top k filter, and how does it assist in identifying trending stocks?\\n9. Can you provide insights into the process of updating the watchlist and trending stocks based on incoming trades and bars?\\n10. How is the latest trade price retrieved from Redis Stack, and how is it displayed on the stock chart?\",\"location\":\"google.summarize.docs\"}"
"SET" "google-video-summary:LaiQFZ5bXaM" "SUMMARY:\n\n- Redis Stack is a multi-model database that supports multiple data structures and capabilities in a single database, reducing complexity and saving time.\n- The demonstration showcased a real-time stock watchlist application built with Redis Stack, featuring a watchlist, trending stocks, stock charts, and real-time updates.\n- The application utilized Redis Stack's capabilities for storing data in various formats, including sets, hashes, JSON documents, time series data, and probabilistic data.\n- Pub/Sub was used to facilitate communication between different microservices in real-time.\n- RedisInsight provided visual insights into the data structures and content stored within Redis Stack.\n\nEXAMPLE QUESTIONS:\n\n1. What are the key data structures and capabilities employed in the demonstration application?\n2. How does Redis Stack's multi-model nature contribute to the overall efficiency of the application?\n3. Can you explain how sets and hashes are utilized in the context of the watchlist functionality?\n4. What is the significance of storing time series data in Redis Stack for the stock charts and trending stocks features?\n5. How does Pub/Sub contribute to real-time communication and data updates in the application?\n6. What are the advantages of using RedisInsight for monitoring and exploring the data stored in Redis Stack?\n7. How does the application leverage Redis Stack's features to facilitate seamless addition and removal of stocks from the watchlist?\n8. What is the purpose of the top k filter, and how does it assist in identifying trending stocks?\n9. Can you provide insights into the process of updating the watchlist and trending stocks based on incoming trades and bars?\n10. How is the latest trade price retrieved from Redis Stack, and how is it displayed on the stock chart?"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "google.summarize.docs" "message" "Summarizing https://www.youtube.com/watch?v=SzcpwtLRgyk" "meta" "{\"id\":\"SzcpwtLRgyk\",\"link\":\"https://www.youtube.com/watch?v=SzcpwtLRgyk\",\"title\":\"RedisTimeSeries Explained\",\"description\":\"Have you ever tried to wrangle data via timestamps but never had the time to do so? Join Justin as we take a stroll down 'in-memory' lane with the RedisTimeSeries module.  The RedisTimeSeries module, part of Redis Stack, lets the developer create time series data structures within Redis with the speed you've come to love from Redis. Redis Stack is an extension of Redis that adds modern data models and processing engines to provide a complete developer experience.\\n\\nIn addition to all of the features of OSS Redis, Redis stack supports:\\n- Queryable JSON documents\\n- Full-text search\\n- Time series data (ingestion & querying)\\n- Graph data models with the Cypher query language\\n- Probabilistic data structures\\n\\n00:00 Introduction\\n00:25 What is RedisTimeSeries?\\n00:50 Example explanation\\n01:27 TS.CREATE - create a time series object\\n03:01 TS.ADD - add to a time series object\\n03:31 TS.ALTER - update a time series object's options\\n04:00 TS.RANGE - retrieve a range of a time series' values\\n06:06 TS.CREATERULE - create rule for a time series object\\n07:48 TS.QUERYINDEX - query labels across time series objects\\n08:29 Conclusion\\n\\nLinks: \\nRedis University \xe2\x86\x92 https://university.redis.com/\\nRedis \xe2\x86\x92 https://www.redis.com/\\nRedisTimeSeries \xe2\x86\x92 https://redis.io/docs/stack/timeseries/\\nNeed a Redis Cloud  now? Sign up for a free Redis Cloud Essentials account \xe2\x86\x92 https://bit.ly/3xdTyMR\\n\\nJoin our discord server \xe2\x86\x92 https://discord.gg/redis\",\"thumbnail\":\"https://i.ytimg.com/vi/SzcpwtLRgyk/maxresdefault.jpg\",\"location\":\"google.summarize.docs\"}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "google.summarize.docs" "message" "Summarized https://www.youtube.com/watch?v=SzcpwtLRgyk:\n **SUMMARY:**\n\nRedis Time Series is a component of Redis Stack that allows for the storage and analysis of time-series data. It offers fast data ingestion, low latency reads, and various commands for data manipulation and customization.\n\n**QUESTIONS:**\n\n1. What are the key features of Redis Time Series?\n   - Answer: Fast data ingestion, low latency reads, customizable data structure, secondary indexing, and control over data size.\n\n\n2. What is the command to create a time series in Redis?\n   - Answer: `TS.CREATE`\n\n\n3. What are the optional sub-commands that can be used when creating a time series?\n   - Answer: `RETENTION`, `CHUNK_SIZE`, `DUPLICATE_POLICY`, and `LABELS`.\n\n\n4. What is the command to add samples to a time series?\n   - Answer: `TS.ADD`\n\n\n5. What are the different options available for the `TS.ADD` command?\n   - Answer: Timestamp, value, retention, chunk size, duplicate policy, and labels.\n\n\n6. What is the command to update the options of an existing time series?\n   - Answer: `TS.ALTER`\n\n\n7. What are the different options that can be updated using `TS.ALTER`?\n   - Answer: Retention time, duplicate policy, and labels.\n\n\n8. What is the command to retrieve samples from a time series within a specific time range?\n   - Answer: `TS.RANGE`\n\n\n9. What are the options available for the `TS.RANGE` command?\n   - Answer: Start and end timestamps, filter by value, and aggregation options.\n\n\n10. What is the command to create a new time series by aggregating samples from another time series?\n    - Answer: `TS.CREATE_RULE`" "meta" "{\"summary\":\"**SUMMARY:**\\n\\nRedis Time Series is a component of Redis Stack that allows for the storage and analysis of time-series data. It offers fast data ingestion, low latency reads, and various commands for data manipulation and customization.\\n\\n**QUESTIONS:**\\n\\n1. What are the key features of Redis Time Series?\\n   - Answer: Fast data ingestion, low latency reads, customizable data structure, secondary indexing, and control over data size.\\n\\n\\n2. What is the command to create a time series in Redis?\\n   - Answer: `TS.CREATE`\\n\\n\\n3. What are the optional sub-commands that can be used when creating a time series?\\n   - Answer: `RETENTION`, `CHUNK_SIZE`, `DUPLICATE_POLICY`, and `LABELS`.\\n\\n\\n4. What is the command to add samples to a time series?\\n   - Answer: `TS.ADD`\\n\\n\\n5. What are the different options available for the `TS.ADD` command?\\n   - Answer: Timestamp, value, retention, chunk size, duplicate policy, and labels.\\n\\n\\n6. What is the command to update the options of an existing time series?\\n   - Answer: `TS.ALTER`\\n\\n\\n7. What are the different options that can be updated using `TS.ALTER`?\\n   - Answer: Retention time, duplicate policy, and labels.\\n\\n\\n8. What is the command to retrieve samples from a time series within a specific time range?\\n   - Answer: `TS.RANGE`\\n\\n\\n9. What are the options available for the `TS.RANGE` command?\\n   - Answer: Start and end timestamps, filter by value, and aggregation options.\\n\\n\\n10. What is the command to create a new time series by aggregating samples from another time series?\\n    - Answer: `TS.CREATE_RULE`\",\"location\":\"google.summarize.docs\"}"
"SET" "google-video-summary:SzcpwtLRgyk" "**SUMMARY:**\n\nRedis Time Series is a component of Redis Stack that allows for the storage and analysis of time-series data. It offers fast data ingestion, low latency reads, and various commands for data manipulation and customization.\n\n**QUESTIONS:**\n\n1. What are the key features of Redis Time Series?\n   - Answer: Fast data ingestion, low latency reads, customizable data structure, secondary indexing, and control over data size.\n\n\n2. What is the command to create a time series in Redis?\n   - Answer: `TS.CREATE`\n\n\n3. What are the optional sub-commands that can be used when creating a time series?\n   - Answer: `RETENTION`, `CHUNK_SIZE`, `DUPLICATE_POLICY`, and `LABELS`.\n\n\n4. What is the command to add samples to a time series?\n   - Answer: `TS.ADD`\n\n\n5. What are the different options available for the `TS.ADD` command?\n   - Answer: Timestamp, value, retention, chunk size, duplicate policy, and labels.\n\n\n6. What is the command to update the options of an existing time series?\n   - Answer: `TS.ALTER`\n\n\n7. What are the different options that can be updated using `TS.ALTER`?\n   - Answer: Retention time, duplicate policy, and labels.\n\n\n8. What is the command to retrieve samples from a time series within a specific time range?\n   - Answer: `TS.RANGE`\n\n\n9. What are the options available for the `TS.RANGE` command?\n   - Answer: Start and end timestamps, filter by value, and aggregation options.\n\n\n10. What is the command to create a new time series by aggregating samples from another time series?\n    - Answer: `TS.CREATE_RULE`"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "google.summarize.docs" "message" "Summarizing https://www.youtube.com/watch?v=Z8qcpXyMAiA" "meta" "{\"id\":\"Z8qcpXyMAiA\",\"link\":\"https://www.youtube.com/watch?v=Z8qcpXyMAiA\",\"title\":\"Redis Streams Explained\",\"description\":\"Redis Streams allow us to aggregate numerous sources of information into one easily consumable source of truth. Join Justin as we learn about the utility and power of the Redis Streams data structure.\\n\\nLinks: \\nRedis University \xe2\x86\x92 https://university.redislabs.com/\\nRedis University Streams Course \xe2\x86\x92 https://university.redislabs.com/courses/ru202/\\nRedis Labs \xe2\x86\x92 https://www.redislabs.com/\\nRedis Streams Introduction \xe2\x86\x92 https://redis.io/topics/streams-intro\\nNeed a Redis cluster now? Sign up for a free Redis Cloud Essentials account \xe2\x86\x92 https://bit.ly/2wasiCa\\n\\nJoin our discord server \xe2\x86\x92 https://discord.gg/redis\",\"thumbnail\":\"https://i.ytimg.com/vi/Z8qcpXyMAiA/maxresdefault.jpg\",\"location\":\"google.summarize.docs\"}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "google.summarize.docs" "message" "Summarized https://www.youtube.com/watch?v=Z8qcpXyMAiA:\n **Summary:**\n\nRedis Streams is a data structure in Redis that allows you to capture, manage, and make sense of large and constantly moving volumes of data. It provides a way to store and process data streams, which are series of events or records generated continuously from various sources.\n\n**Example Questions:**\n\n1. What is the main purpose of using Redis Streams?\nAnswer: To capture, manage, and make sense of large and constantly moving volumes of data, such as streaming data from social networks, website analytics, sensors, and IoT devices.\n\n\n2. What is a stream in Redis?\nAnswer: A stream is a data structure that behaves like an append-only log. Once added, an entry in a stream is immutable. Each entry has a unique ID and a set of name-value pairs.\n\n\n3. How does a producer add entries to a stream?\nAnswer: A producer adds entries to a stream using the XADD command. This command assigns a unique ID to each entry, ensuring that entries are ordered as a time series.\n\n\n4. How can consumers read entries from a stream?\nAnswer: Consumers can read entries from a stream using commands like XRANGE, XREVRANGE, and XREAD. These commands allow consumers to retrieve entries based on time range, ID range, or by blocking until new entries are added.\n\n\n5. How to handle the constant growth of a stream?\nAnswer: Redis provides trimming strategies to manage a stream's memory usage. You can use the XTRIM command to trim the stream to a specified length or use the MAXLEN option in the XADD command to automatically trim the stream while adding new entries.\n\n\n6. What is the difference between XRANGE and XREVRANGE commands?\nAnswer: XRANGE returns entries in ascending order of their IDs, starting from the specified start ID and ending at the specified end ID. XREVRANGE returns entries in descending order of their IDs, starting from the specified start ID and ending at the specified end ID.\n\n\n7. How does XREAD differ from XRANGE and XREVRANGE?\nAnswer: XREAD is a blocking command that waits for new entries to be added to the stream before returning any data. It allows consumers to continuously consume data from the stream without the need for constant polling.\n\n\n8. What are common use cases for Redis Streams?\nAnswer: Redis Streams are commonly used for real-time data processing, event processing, IoT data collection and processing, social media data analysis, and log aggregation and analysis.\n\n\n9. What are some advantages of using Redis Streams?\nAnswer: Redis Streams offer advantages such as scalability, low latency, high throughput, and the ability to handle large volumes of data. It also provides features like stream trimming and consumer groups for efficient data consumption.\n\n\n10. How can I learn more about Redis Streams?\nAnswer: You can check out Redis University's free online course on Redis Streams, as well as the official Redis documentation and tutorials, for more detailed information and examples." "meta" "{\"summary\":\"**Summary:**\\n\\nRedis Streams is a data structure in Redis that allows you to capture, manage, and make sense of large and constantly moving volumes of data. It provides a way to store and process data streams, which are series of events or records generated continuously from various sources.\\n\\n**Example Questions:**\\n\\n1. What is the main purpose of using Redis Streams?\\nAnswer: To capture, manage, and make sense of large and constantly moving volumes of data, such as streaming data from social networks, website analytics, sensors, and IoT devices.\\n\\n\\n2. What is a stream in Redis?\\nAnswer: A stream is a data structure that behaves like an append-only log. Once added, an entry in a stream is immutable. Each entry has a unique ID and a set of name-value pairs.\\n\\n\\n3. How does a producer add entries to a stream?\\nAnswer: A producer adds entries to a stream using the XADD command. This command assigns a unique ID to each entry, ensuring that entries are ordered as a time series.\\n\\n\\n4. How can consumers read entries from a stream?\\nAnswer: Consumers can read entries from a stream using commands like XRANGE, XREVRANGE, and XREAD. These commands allow consumers to retrieve entries based on time range, ID range, or by blocking until new entries are added.\\n\\n\\n5. How to handle the constant growth of a stream?\\nAnswer: Redis provides trimming strategies to manage a stream's memory usage. You can use the XTRIM command to trim the stream to a specified length or use the MAXLEN option in the XADD command to automatically trim the stream while adding new entries.\\n\\n\\n6. What is the difference between XRANGE and XREVRANGE commands?\\nAnswer: XRANGE returns entries in ascending order of their IDs, starting from the specified start ID and ending at the specified end ID. XREVRANGE returns entries in descending order of their IDs, starting from the specified start ID and ending at the specified end ID.\\n\\n\\n7. How does XREAD differ from XRANGE and XREVRANGE?\\nAnswer: XREAD is a blocking command that waits for new entries to be added to the stream before returning any data. It allows consumers to continuously consume data from the stream without the need for constant polling.\\n\\n\\n8. What are common use cases for Redis Streams?\\nAnswer: Redis Streams are commonly used for real-time data processing, event processing, IoT data collection and processing, social media data analysis, and log aggregation and analysis.\\n\\n\\n9. What are some advantages of using Redis Streams?\\nAnswer: Redis Streams offer advantages such as scalability, low latency, high throughput, and the ability to handle large volumes of data. It also provides features like stream trimming and consumer groups for efficient data consumption.\\n\\n\\n10. How can I learn more about Redis Streams?\\nAnswer: You can check out Redis University's free online course on Redis Streams, as well as the official Redis documentation and tutorials, for more detailed information and examples.\",\"location\":\"google.summarize.docs\"}"
"SET" "google-video-summary:Z8qcpXyMAiA" "**Summary:**\n\nRedis Streams is a data structure in Redis that allows you to capture, manage, and make sense of large and constantly moving volumes of data. It provides a way to store and process data streams, which are series of events or records generated continuously from various sources.\n\n**Example Questions:**\n\n1. What is the main purpose of using Redis Streams?\nAnswer: To capture, manage, and make sense of large and constantly moving volumes of data, such as streaming data from social networks, website analytics, sensors, and IoT devices.\n\n\n2. What is a stream in Redis?\nAnswer: A stream is a data structure that behaves like an append-only log. Once added, an entry in a stream is immutable. Each entry has a unique ID and a set of name-value pairs.\n\n\n3. How does a producer add entries to a stream?\nAnswer: A producer adds entries to a stream using the XADD command. This command assigns a unique ID to each entry, ensuring that entries are ordered as a time series.\n\n\n4. How can consumers read entries from a stream?\nAnswer: Consumers can read entries from a stream using commands like XRANGE, XREVRANGE, and XREAD. These commands allow consumers to retrieve entries based on time range, ID range, or by blocking until new entries are added.\n\n\n5. How to handle the constant growth of a stream?\nAnswer: Redis provides trimming strategies to manage a stream's memory usage. You can use the XTRIM command to trim the stream to a specified length or use the MAXLEN option in the XADD command to automatically trim the stream while adding new entries.\n\n\n6. What is the difference between XRANGE and XREVRANGE commands?\nAnswer: XRANGE returns entries in ascending order of their IDs, starting from the specified start ID and ending at the specified end ID. XREVRANGE returns entries in descending order of their IDs, starting from the specified start ID and ending at the specified end ID.\n\n\n7. How does XREAD differ from XRANGE and XREVRANGE?\nAnswer: XREAD is a blocking command that waits for new entries to be added to the stream before returning any data. It allows consumers to continuously consume data from the stream without the need for constant polling.\n\n\n8. What are common use cases for Redis Streams?\nAnswer: Redis Streams are commonly used for real-time data processing, event processing, IoT data collection and processing, social media data analysis, and log aggregation and analysis.\n\n\n9. What are some advantages of using Redis Streams?\nAnswer: Redis Streams offer advantages such as scalability, low latency, high throughput, and the ability to handle large volumes of data. It also provides features like stream trimming and consumer groups for efficient data consumption.\n\n\n10. How can I learn more about Redis Streams?\nAnswer: You can check out Redis University's free online course on Redis Streams, as well as the official Redis documentation and tutorials, for more detailed information and examples."
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "google.store.store" "message" "Storing documents..." "meta" "{\"location\":\"google.store.store\"}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "google.store.store" "message" "Found 6 new documents" "meta" "{\"location\":\"google.store.store\"}"
"FT.CREATE" "google-idx-videos" "ON" "HASH" "PREFIX" "1" "google-video:" "SCHEMA" "content_vector" "VECTOR" "HNSW" "6" "TYPE" "FLOAT32" "DIM" "768" "DISTANCE_METRIC" "IP" "content" "TEXT" "metadata" "TEXT"
"MULTI"
"HSET" "google-video:0" "content_vector" "\xa4q\t=\xc1\xdes\xbdZ$<\xbd\xd5\xc1\x99<b\xf0\xf2<x[\xd9\xbb|vt\xbcE\xb3\xe1\xbc\xccv9<p\x00\x14\xbcfF%\xbc\xbeP\x14=S\x10'\xbb\x84z4=\xa579=\x1a\xd2\xb1\xbd\x8e*]<[\"q\xbdV6X<\xadS\x81<z \x9d;\xf01Y\xbd\x0e\x13\x1d\xbc\xf4o\xa5\xbb\x93\xae\x9f\xbc\x1b\x9f\x99\xbc!\x9a^\xbb\xd9SE\xbd\x1a\x01A=\xee\xba5=\xd9\xa9N\xbd\xdc1X=\xda\xdb\x16\xbd\x7f\xecS\xbc\x9a \xf6\xbc\x9f\xf3\xd4\xbb\x1d&M\xbd\x06\xa0==n=i\xbb+>\xd8<\x8b/w<bK\xd0<\xafm\xba\xbc\x16\xed#\xbc\xe4\xf4\x01\xbd\xfa\x17\xb3;\xdal\x18\xbc\xb5\x1a\x96;!\t/=!\"\xd2\xbc\xddSi\xbc-b\x13\xbbh\x1a\xd3<,0\x87\xbdL\x05o=\xfc\xcc\xd4<r\x8e\x0e<0]q\xbdd\xc3\t\xbd\xbb\xde\x00\xbb}R\x0c=-0\x0e\xbb\xfc\r\xab\xbcR\x13\x8e='\xd6\x13=\xec|r\xbdIr\x8e\xbcO\x98\xc9\xbbS\xaa`=v\x01\x02\xbde\xb4\xec\xbaM\x02N<\x96(\xad=\xf0R\xa9\xba\x1f\x8e\x8d\xbd\x83p!\xbd'\xf6\xc4\xbc\x99\x84\xba=\x01O\x98=3[\xd4<NR(\xbd\x82\xd8\x82\xbd\"\xc3\xb7\xbd\xed\x992\xbd,}\xc0\xbbqiL=\xa1\xa2_\xbds\xa0\xba\xbcUs\xaf\xbb%N\b=h\xeb\xcc;FY&<Ke\t=\xfd0.\xbd\xce\xf5?=\xa2pY=\xf0\xa5\x87\xbb\x91\xd9\xf6\xbc_\x8a\xe9\xbc\xb4%\x80\xbd\x05-\xeb\xbc\x12\"\x03\xbd\x8b\x1b\r\xbd\xc1\x85\x1c=\t,\xef<\x1bBL=\x18\x16*\xbc\xb6E\x9c=@h\xd5\xbc \xbd\xd3<c\x1c\x9d\xbdU0\xac\xbb4\xad\x9a\xbc\xe0|\x1a\xbd_\xca\x18=\xa2R\b\xbd\xd3\"\x15\xbc\xee\x12\x89=6\xc8r:nH\x83<\x9e,\xed<~\xb3P\xbc\x9e\xa4k=\x92\xf8\xe2\xbci\xc0<\xbc7^\x03=<\xf0\x1d\xbch\xfeQ<\x80\xe0\xa5<3{\xef<\x9a\xc4\x91\xbbU\r\xb3\xbcG\x11\xbd:\xa1\xa3\x0f=\xebF\xbf=w-\x8a=\x8e\x96\r=q\x99\xeb<\xb0\x87\r=\x91\xeaO;\xa2:\x14;UKu<\xb3\xd6\x05=\xcb]\xbf<\xae]\xfd\xbc\x05\xb7H=h\xbc\xc0\xbc\xe8s/<2\xf2\"<\xe6_\x0b<Z\x04\x92\xbc\xa6N\x83;\xa6mA\xbd\xc0u\xb9<\x9d]\xcd<m\xbf\xcb;K^\xc9;\x8c\xfe\xc1\xba\aw\xaf\xbc\x1c\xb3\xd7\xbctU\x98=6Y\xc7<\xd4\xeb\xa2\xbc\xcb\x18\x16\xbc\xea\x1c\xbc\xbcj0\x96\xbc\x16t\xbd\xbbB\xf6\x19\xbcK5\xf5;\x99\xa8\xea<\xde\xd1\xad<\xff'\x7f=)\x98\x98\xbdA\x8d\xd7<\xfc\xd4\x0c\xbd\x02\x87\x85\xbd]\xd3\x05=\x93\x87\xa0<DK\xfa\xbc|_\n=\x0fn\x15\xbd\xad\xc0\r\xbdB\xbdE<\x99\xa2H=\x03S\xbf<%Y\xce\xbao2\xdc=\x96\xbeA\xbd\xb4H\xaa<\x05ux\xbc\x9b\x87\xdd<\xec*{\xba\x84\xc3\x1f\xbd!\x83\xe9<\xc8\x82\xb8\xbc\xa7\xa5G=\b\x1ac\xbc\xc1\xe9a=(3\xb3;[`\xc0\xbc\xde\xd7\x94\xbc\xa7\x90{=\x9a\xc4\x11<\x89\x87X:W\xf7R=\x95\xd3B<W\xb4\x15=\x1a\x9e\xf7\xbb\xb1\x87\xfb\xbc\x19\xcd\xed<\xfa\x84\x91\xbc\xd9\xaa/\xbb\xe7\xac\x94\xbc6j\x8f\xbb\xeblp=i\x82\xb2<\xb9x\xb3\xbbr\xc3/=L \xc9\xbc\x8d\xb4\xb5\xbc:\xa8#=\xcd\x11\xf1;\xae\xd3r\xbd\x0b\x8fg<\xaf\am\xbdJ}'=\x92\x99\x19<\x02\xf4\xd8\xbc#\x9a\r=@P;\xbd\xcf\xe2><f\x8e\x00=\xe0\xd6\x87<\xef\x95\x95\xbcl\x03\x96<\xb4\x05*\xbc\xa6t\xb3<\x1e\xba\xbf;\xe1\x8d?=\x93\x0f\x1e<\"\xffE\xbc5\x8b\x82=\xe4U\xaa\xbc\x91\x1a\x0e=\x04\x9c\xe8\xbcb\xa7\xe1\xba*\"_\xbc\xf9\x18\xa6<\x1a\xc8\xeb<e\xdb&=\xceh\xd4\xbb\x18\x06\x15\xbdR_\xc4<0\xaf\xc8<\xf8\xfcb\xbd\xc2\xbc\x1c\xbcm\xf8\x19\xbd\x00\x819=\xb1\x0c\xde<\xd1\xa9\x8d\xbc\xd2\xc0|=\bTJ\xbd\xd0\x17\x00;\a\xa3\x16\xbaQ\xee\x02\xbam;\xd8\xbc>\x99\xd8;m\xa3\xf0\xbc\x9b\xf33<&\"A\xbc@[9<\xa4\xd2\x17\xbd6\x7f7=Zy\xb4\xbcM\xd5\xc8<\xb6%\x89<3\xe2.<\xe9g6=\x0b*E<\xbbLX\xbd\xe6\x89\x11;\x02\x9d\xcf<\x00.\xcb;\xe5\xd5\x8d\xbd\xb3\xb8\x82\xbd\xf1\xe4\x98\xba\xac\x03N\xbc\xb5\x8b\xee\xbc%-,<\xb3;S\xbd\xb5\xd2.\xbdV\xbf0\xba\xb8]&=L \x92\xbd\x19\xf3\xc3\xbb~\xe8\xcd<\x05\x1b\x19\xbd\x13a!=\x0b^L=L\b\x049jE\x85<\xb9\xfe\xad\xbd\t\xa70\xbd\x1eo\xe3\xbb\xaa\b\xa5<\xe4\x04\x1e\xbb\\\xe27\xbdY\xa2K;X;@\xbc@\xa3\xd9\xbc0\xcaj<>{\xeb\xbcZ\x9f\x94<F\xf3\xd7;\x88m\x90=\xb90\xfe<\x96\x95\xdb<\x19\xdd\x8a\xbcP\x97\xc9<\xb0\xa9\x82=t\x1b\xf8\xbbW\b\x8a=6G\xd5<Vt\x10\xbc\xce\xde\xea<\x11\xda\"={M\xfd\xbc\xf4\xdf\xe3<\xb7x\x81\xba\xd7V\"<d\xd0\xd7<@!\x14=\xc4\xc8@\xbd\x06\xbfZ=/\xfd\xe6< T!;\x96P#\xbd\xef\xf1\r\xbd-\x1e\r\xbb\xe8-\xea\xbb[\xe7f<\xbe\xc1\xa1\xbb\xa3\xe6\xf1\xbc31\xb3\xbd=\xbb==\x98\xa1i\xbd\xa33;\xbct\xf6\x00\xbd\xa7\xb7}=K\xe2\x9b<\xe3p\x1e=3\xea\x11=m\xb4\xab\xbc\xe5\xda)\xbc?A><\xd3(\x8f\xbc\xfa[t=\xa9a\xae\xbc\xc7*@=z\r\x95\xbd\x1c\x82`\xbd,\x9f\xc2\xbc\xe2f\xee\xbbP\x8cc;%\x1bP\xbc9D\x81\xbc\xca\x18\x17\xbc\x8a\xd1\x02<\xb5X\xbd\xbc\xdf!\xb3\xbc\x0b\xa8L=\xeb.\xff\xbcGmH<\xfbv\xb0<l\xa6%\xbdrT<\xbcH\x7f\x10\xbc\xa2T\xa4\xbc5\x16\x14=\xd5\x1b\b=\x82\xdf\x88\xbd*\xd8\xa8\xbc*(B=\xeb\xfeC=f-\xf2<6\\\xab\xbcy\xad|=\x81\x87\x8a<8\xfbK:\x95\xafz\xbc\x17\xe1\xf4\xbbE*\xe0<m(\x15>\xfa\xd8\x83<1\x1e|<s\x13\n\xbd+\xd7U\xbc\xce\x0c\xc9\xbco<\xa9\xbc\xb0&\xab\xbcJQ\x94\xbd\x1d[\xfd\xbc\xa8\x0e\x0f\xbcQ.\xb7\xbb\x89A\xb2<E5\xb6<\xad\x95\x1f\xbcw\x96S\xbdG\xa8\xf5\xbc\x10\xe0\x1b\xbd\x94\xf7*\xbcY\xbc\x87=\xc2`*=.;\xa6\xbcKt/\xbd&/\x0f\xbd\t\xc1\x9d=J/J\xbc\xad8\xb2<H2\xa2\xbcC\x19P<\xa8)\x8c;\xdd\x84\x8d<\xd5E-\xbb\xbc\xd2\xc9\xbc\x882:\xbd~\xf5\xed<\x9a\x82\xbc<c\t\xd3;\r\xd9t=v\xdc\xa5<\x1a\x16Q9F\x1d\xdb<\xb0\x85\x88;\xa4\xd2\xd4\xbcxG\x17\xbd\x15+\xa1:_A\xb6<\x9eb!\xbd\xe8\xa3\xa0\xbd\x0c\r\xd7<\xeb\xcc\xcd<\x19\xa0\x9a<\n\xa4M\xbdaoD\xbd3+\xad\xbb!\x9a\x00<\xc99f\xbc\xb8\xc3\x1b=<\x81C\xbdOs|=u\x8a;\xbd~\xb6Q\xbd\xd0\xf4\x19\xbd31X<\xaf6\xad\xbd#G\x8b<\xed\xa5u=\xa4\x9f\x03\xb9d:\xf4\xbcg[\xd2\xb9\xe9\xae5=\xe7a\x00\xbdp\xbf\x03\xbdBp\x1a=2O/\xbd{\xce\xb0;a\xeb\xd1\xbc\xc0R#=`C\x0b=\x13q\xa3:\xe8\xf8\x98\xbb\b\xf0J<\xcdV\xfd\xbc\x95\xe8\xa2<\xb3U\xb9;\x88\xb3\xb9\xbd\xd8\xd3S=\xb9S\x88\xbdg\xb0(\xbdq\xbc(<\xac\x0b\xe9;-L\xd9<\xc5M\x81\xbc\xd0S\xc7\xbc\xdd\xfc-<\x15\x85\xd3\xbc\x11\xc0[=#\xbb\x04\xbd@\xd0f=Z\xc30\xbd\xcf\xa3\xb1;\xfa\xe9\xb1\xbc\xe9\xa2\x04\xbd\x1e\xf2Q<\xae\xc7\x98<\xd5\xad\x18\xbd\xfb9q=\xcb\x89g;\xb0\xd7\xd6<{\x94\x03\xbbxa\xe0;\xf9\xca\x16=M\xdfW\xbc8\xf7\xdc<NP\x0b\xbd^\xe2\xdf\xbc\x7f\xcc\xa2\xbc\x81\xf9\xa7\xb9\xb7\x1e\xed<\x8dhI\xbc\xf9\xe9/\xbc:Y\xff\xbc\x11:\xd7\xbc~\x06\n=J\xf49\xbb\t\x16\xe2<s\xa4\xbb<c\xca\x8f;87\x95<\x11\xdf\x8e=W\x83\xa6<\xf9\x15\xab\xbd\x88\x02w=~\xe5==\xe4Y\xd7\xbd\xe4+\x89;\xd6U\xfd;\xbbZ\x83\xbd8%\xf9;\xc9\xc9\xe4\xba\x06\xaba<\x84\x16\xa1\xbd&L\x0f\xbcLl&\xbd\xcf\xc1\"\xbd\xb7.\xa5\xbc\xa0\x8d\xd2;\x00O\t=\x94\xa2\a\xbc0\\m\xbc\x9ax_\xbcl\x8c8<\xeev5<\x9c\x1b\xcc<\xa2\x8fO\xbb\xbc\x9a\xc4\xbc\xa4u\xc9\xbd\x92wR=,-\xb5\xbc0\x95\x82\xbc1\x89\x8b<&J\xb9<\x8f\xf6\x15\xbd\xbbf1=\xcf\xc73\xbdj\xfa\x9b\xbd\\3\x06\xbc3B\xee;\xbe\xaf\x82\xbd\x84\xb7)\xbc\x1b9b\xbc\xd0\xb1m<GX\xff<\x10Ka:\xf1\x13\"=\xf2\xe8\x0b\xbd\xcb\\\xbd\xbd<\xde\x9b=Ew_\xbcG\xe6\xa3<\x13\xde\x01<=\xe2\xa9<K\x86\x8b;V\xa7>=6\\\x12\xbd\x11\x9e\"\xbd'\xa4\xb6<X\xb2G\xbd'v/=\x17\xa6\xdc;?\\\xf4;\xfb\x1a1\xbc\x9f\x18\x9e=\x83$]<\xdb\x0f\xa5\xbcC\xfa\x13=\xf7\xc2\xa6\xbcw\x11_=^5\x15\xbd\xfb\x84\x109\xaeMk=\x10\x9d\x1b\xbc\xd7\x98\x06<$WF\xbc\x03\x82\x85\xbb\xd2\xb2\x89<{m\x06<\xc7\xf8\x01\xbd\x9f\rC=)@K<\xc7T\x1b\xbd#\x0f\x92=\xb0I\x1f\xbd\a\x1b\xb9<\x90R,\xbd:\xf1<=n\x18\xe0\xbaP\xf4v<\rc\xba<\x1c\xee\xcd\xbc\xf70\xf0\xbbC>\xbc9\xb5\xd0l\xbd\x17\x92X\xbd\nI\x17\xbd\xe3\xea\x92=\x02WT< \x85\xf4\xba\x0b\x1b\x93\xbd\x1d\x91\x96<5x\xd9\xbcK\x1dE<\x1b\xd5\x15\xbc9\x8c\xa0=v\xf6C<\x85y'=H\x1e'\xbcS>u=x`\xf0<\x00\x89k:\xfa\x13H=\xed\xe1\xe1<\xd8\xab'\xbb\xe7V\xaf\xbd\x81\xc8\x89\xbcZ1\xd6\xbci\xf17\xbdP\xbdb\xbb\xee\xf7\x17\xbd|6W\xbd\xb6\x16\x9a<\xed\xcf\x1d=r\xfa\x85\xbd\x88\xab\x86\xbc}\xc2\x9a=\x13r\xb6;\x17\xa4\x8e\xbdp\x90\xa7\xbd\x0e\xef\xce;[3\x8a\xbd\x9f\x8b\xe4\xbb]3<=\x99\xc7\x06<b\xfc,=^!\xb5\xbcH\r!\xbb\xfaP\xc8\xbc\x9e\x18\x03\xbc\x18 \x9a\xbc\xe4B\x0c\xbd\xdf\x8a]=\x10\xf0[\xbd\x9b\x7f\xb0\xbc8\xca\x0c\xbd\rf\xe8\xbc\x05c\x8e\xba\xe8\x93D\xbc\xb8\xb5\x17\xbd\x00\x84l=\x82\xed\xde\xbcr\x0cw=\x94\x9f&=\x83~\x93\xbc\x19y\"<Km\x89<\xafkm\xbdv\xd3\xe3\xba8^\x13\xbc\x81\x8d\xb4\xba\xa9&\xb4\xbcD{(\xbd\xce\x1e\x1f\xbd\x87\xbe\xd4<\xef1\xe0<F\xcf\x83<g\xc5\xbb\xbbj\xaf\x83<\xabgf\xbcWE\x93\xba\xae\xba*=LS\xb4\xbco\xfeI\xbd\x04fb\xbd\x97\xe9\x9c<\x82\x0b\xd1\xbc\xd7\xa8\x0f\xbc\\\x96\xb2\xbc\xe1\x16\x86=\x9cmI=\t`\xa2\xbdB?-\xbd\x18|\xf5\xbcT\xa4\xf4;\xd2\x94\x05\xbc\xb1\xd0M\xbc(\xa0\xc3\xbb\xe74\xab<e\x9d\xe7<\x00FC\xbc\x98\xb4\x94<\x16\x81\x97\xbd\x1eU\xfc\xbc\x16\x17R=Ob\xd7<\xe8\x14\xdd\xbcL\xa4\xb9\xbc\x13\x05\xbf\xbcL\x96k\xbc\xfd6j<\xd2\x12\xb0=\x02\xa4\xbc\xbb\x96\xa1\x0b=T\x01\x9c\xbc\xd0~\x16\xbd\x1b\xbd\x9a\xbc\x1e!t\xbc\xe9n\x0b=\x90=\xed\xbc\xbfq\xf8\xbc\xea46=:(\x9a\xbd\x91l\xa5\xbcu\x9b =;\x87\xe8<\xbfO\x86=\x06\xc1\xdb\xbb\x04o\xd7\xbb\x0c\xb5\x1f\xbd|E@\xbd\x8c\x8a\t\xbd}B\xbb;\x0b\xbc\xf6;\x8eg)=\x00q\xe7<\xf9\xe03\xbc\xe6\x80,\xbd\xd6z-\xbdw\xbc\xff\xbc\x8aw\x9b\xbc\xa1k\xaf\xbcF\xa9\xc3;\x94\xcd@\xbc\xd5\x12A=\xbbT!=\x0c5\x18<\x81\x83\x18\xbd\xe4\xb8\x01=xV^\xbcU\xe2\x0e=0\x90\xd9\xbc+\x02\x02;sD\xc5\xbc\xca\xffR<a(,=\xe2\b\xe2<\xebi9\xbdx\x80\xf8<" "content" "SUMMARY:\nThe video discusses the limitations of MySQL at scale and introduces Redis Enterprise as a solution to improve performance. Redis Enterprise can be used alongside MySQL to store frequently accessed data in memory, reducing latency and speeding up responses. Additionally, Redis Enterprise can offload secondary indexed queries from MySQL, further reducing load on the database.\n\nQUESTIONS:\n\n1. What are the limitations of MySQL at scale?\n2. How can Redis Enterprise improve the performance of MySQL?\n3. What type of data is best suited to be stored in Redis Enterprise?\n4. How does Redis Enterprise handle secondary indexed queries?\n5. What are the benefits of using Redis Enterprise with MySQL?\n6. Can Redis Enterprise be used as a standalone database?\n7. What is the pricing model for Redis Enterprise?\n8. How does Redis Enterprise compare to other in-memory data stores?\n9. Are there any specific industries or use cases where Redis Enterprise is particularly well-suited?\n10. How can I get started with Redis Enterprise?" "metadata" "{\"id\":\"FQzlq91g7mg\",\"link\":\"https://www.youtube.com/watch?v=FQzlq91g7mg\",\"title\":\"Redis + MySQL in 60 Seconds\",\"description\":\"What are the possibilities for MySQL when integrating with the real\\-time power of Redis? Try Redis Cloud for free: https://redis.com/try\\-free/\\n\\nMySQL is open source, free, and can be fast when working on a relational database, but to handle modern use cases, your MySQL will need a boost of real\\-time performance \\- the type Redis Enterprise can provide. MySQL can be difficult to scale and lacks the modern features necessary to quickly operate complex queries. Enable your MySQL applications with the real\\-time performance power of Redis.\\n\\nFrom the blog: https://redis.com/blog/3\\-reasons\\-your\\-mysql\\-db\\-needs\\-redis/\\n\\nDownload our MySQL Solution Brief: https://redis.com/docs/modernize\\-your\\-mysql\\-database\\-with\\-redis\\-enterprise/\\n\\nExplore Redis + MySQL: https://redis.com/comparisons/redis\\-enterprise\\-and\\-mysql/\\n\\nTry Redis Enterprise Cloud for free: https://redis.com/try\\-free/\\n\\n#MySQL #SQL #Redis\",\"thumbnail\":\"https://i.ytimg.com/vi/FQzlq91g7mg/maxresdefault.jpg\"}"
"EXEC"
"MULTI"
"HSET" "google-video:0" "content_vector" "\xa4q\t=\xc1\xdes\xbdZ$<\xbd\xd5\xc1\x99<b\xf0\xf2<x[\xd9\xbb|vt\xbcE\xb3\xe1\xbc\xccv9<p\x00\x14\xbcfF%\xbc\xbeP\x14=S\x10'\xbb\x84z4=\xa579=\x1a\xd2\xb1\xbd\x8e*]<[\"q\xbdV6X<\xadS\x81<z \x9d;\xf01Y\xbd\x0e\x13\x1d\xbc\xf4o\xa5\xbb\x93\xae\x9f\xbc\x1b\x9f\x99\xbc!\x9a^\xbb\xd9SE\xbd\x1a\x01A=\xee\xba5=\xd9\xa9N\xbd\xdc1X=\xda\xdb\x16\xbd\x7f\xecS\xbc\x9a \xf6\xbc\x9f\xf3\xd4\xbb\x1d&M\xbd\x06\xa0==n=i\xbb+>\xd8<\x8b/w<bK\xd0<\xafm\xba\xbc\x16\xed#\xbc\xe4\xf4\x01\xbd\xfa\x17\xb3;\xdal\x18\xbc\xb5\x1a\x96;!\t/=!\"\xd2\xbc\xddSi\xbc-b\x13\xbbh\x1a\xd3<,0\x87\xbdL\x05o=\xfc\xcc\xd4<r\x8e\x0e<0]q\xbdd\xc3\t\xbd\xbb\xde\x00\xbb}R\x0c=-0\x0e\xbb\xfc\r\xab\xbcR\x13\x8e='\xd6\x13=\xec|r\xbdIr\x8e\xbcO\x98\xc9\xbbS\xaa`=v\x01\x02\xbde\xb4\xec\xbaM\x02N<\x96(\xad=\xf0R\xa9\xba\x1f\x8e\x8d\xbd\x83p!\xbd'\xf6\xc4\xbc\x99\x84\xba=\x01O\x98=3[\xd4<NR(\xbd\x82\xd8\x82\xbd\"\xc3\xb7\xbd\xed\x992\xbd,}\xc0\xbbqiL=\xa1\xa2_\xbds\xa0\xba\xbcUs\xaf\xbb%N\b=h\xeb\xcc;FY&<Ke\t=\xfd0.\xbd\xce\xf5?=\xa2pY=\xf0\xa5\x87\xbb\x91\xd9\xf6\xbc_\x8a\xe9\xbc\xb4%\x80\xbd\x05-\xeb\xbc\x12\"\x03\xbd\x8b\x1b\r\xbd\xc1\x85\x1c=\t,\xef<\x1bBL=\x18\x16*\xbc\xb6E\x9c=@h\xd5\xbc \xbd\xd3<c\x1c\x9d\xbdU0\xac\xbb4\xad\x9a\xbc\xe0|\x1a\xbd_\xca\x18=\xa2R\b\xbd\xd3\"\x15\xbc\xee\x12\x89=6\xc8r:nH\x83<\x9e,\xed<~\xb3P\xbc\x9e\xa4k=\x92\xf8\xe2\xbci\xc0<\xbc7^\x03=<\xf0\x1d\xbch\xfeQ<\x80\xe0\xa5<3{\xef<\x9a\xc4\x91\xbbU\r\xb3\xbcG\x11\xbd:\xa1\xa3\x0f=\xebF\xbf=w-\x8a=\x8e\x96\r=q\x99\xeb<\xb0\x87\r=\x91\xeaO;\xa2:\x14;UKu<\xb3\xd6\x05=\xcb]\xbf<\xae]\xfd\xbc\x05\xb7H=h\xbc\xc0\xbc\xe8s/<2\xf2\"<\xe6_\x0b<Z\x04\x92\xbc\xa6N\x83;\xa6mA\xbd\xc0u\xb9<\x9d]\xcd<m\xbf\xcb;K^\xc9;\x8c\xfe\xc1\xba\aw\xaf\xbc\x1c\xb3\xd7\xbctU\x98=6Y\xc7<\xd4\xeb\xa2\xbc\xcb\x18\x16\xbc\xea\x1c\xbc\xbcj0\x96\xbc\x16t\xbd\xbbB\xf6\x19\xbcK5\xf5;\x99\xa8\xea<\xde\xd1\xad<\xff'\x7f=)\x98\x98\xbdA\x8d\xd7<\xfc\xd4\x0c\xbd\x02\x87\x85\xbd]\xd3\x05=\x93\x87\xa0<DK\xfa\xbc|_\n=\x0fn\x15\xbd\xad\xc0\r\xbdB\xbdE<\x99\xa2H=\x03S\xbf<%Y\xce\xbao2\xdc=\x96\xbeA\xbd\xb4H\xaa<\x05ux\xbc\x9b\x87\xdd<\xec*{\xba\x84\xc3\x1f\xbd!\x83\xe9<\xc8\x82\xb8\xbc\xa7\xa5G=\b\x1ac\xbc\xc1\xe9a=(3\xb3;[`\xc0\xbc\xde\xd7\x94\xbc\xa7\x90{=\x9a\xc4\x11<\x89\x87X:W\xf7R=\x95\xd3B<W\xb4\x15=\x1a\x9e\xf7\xbb\xb1\x87\xfb\xbc\x19\xcd\xed<\xfa\x84\x91\xbc\xd9\xaa/\xbb\xe7\xac\x94\xbc6j\x8f\xbb\xeblp=i\x82\xb2<\xb9x\xb3\xbbr\xc3/=L \xc9\xbc\x8d\xb4\xb5\xbc:\xa8#=\xcd\x11\xf1;\xae\xd3r\xbd\x0b\x8fg<\xaf\am\xbdJ}'=\x92\x99\x19<\x02\xf4\xd8\xbc#\x9a\r=@P;\xbd\xcf\xe2><f\x8e\x00=\xe0\xd6\x87<\xef\x95\x95\xbcl\x03\x96<\xb4\x05*\xbc\xa6t\xb3<\x1e\xba\xbf;\xe1\x8d?=\x93\x0f\x1e<\"\xffE\xbc5\x8b\x82=\xe4U\xaa\xbc\x91\x1a\x0e=\x04\x9c\xe8\xbcb\xa7\xe1\xba*\"_\xbc\xf9\x18\xa6<\x1a\xc8\xeb<e\xdb&=\xceh\xd4\xbb\x18\x06\x15\xbdR_\xc4<0\xaf\xc8<\xf8\xfcb\xbd\xc2\xbc\x1c\xbcm\xf8\x19\xbd\x00\x819=\xb1\x0c\xde<\xd1\xa9\x8d\xbc\xd2\xc0|=\bTJ\xbd\xd0\x17\x00;\a\xa3\x16\xbaQ\xee\x02\xbam;\xd8\xbc>\x99\xd8;m\xa3\xf0\xbc\x9b\xf33<&\"A\xbc@[9<\xa4\xd2\x17\xbd6\x7f7=Zy\xb4\xbcM\xd5\xc8<\xb6%\x89<3\xe2.<\xe9g6=\x0b*E<\xbbLX\xbd\xe6\x89\x11;\x02\x9d\xcf<\x00.\xcb;\xe5\xd5\x8d\xbd\xb3\xb8\x82\xbd\xf1\xe4\x98\xba\xac\x03N\xbc\xb5\x8b\xee\xbc%-,<\xb3;S\xbd\xb5\xd2.\xbdV\xbf0\xba\xb8]&=L \x92\xbd\x19\xf3\xc3\xbb~\xe8\xcd<\x05\x1b\x19\xbd\x13a!=\x0b^L=L\b\x049jE\x85<\xb9\xfe\xad\xbd\t\xa70\xbd\x1eo\xe3\xbb\xaa\b\xa5<\xe4\x04\x1e\xbb\\\xe27\xbdY\xa2K;X;@\xbc@\xa3\xd9\xbc0\xcaj<>{\xeb\xbcZ\x9f\x94<F\xf3\xd7;\x88m\x90=\xb90\xfe<\x96\x95\xdb<\x19\xdd\x8a\xbcP\x97\xc9<\xb0\xa9\x82=t\x1b\xf8\xbbW\b\x8a=6G\xd5<Vt\x10\xbc\xce\xde\xea<\x11\xda\"={M\xfd\xbc\xf4\xdf\xe3<\xb7x\x81\xba\xd7V\"<d\xd0\xd7<@!\x14=\xc4\xc8@\xbd\x06\xbfZ=/\xfd\xe6< T!;\x96P#\xbd\xef\xf1\r\xbd-\x1e\r\xbb\xe8-\xea\xbb[\xe7f<\xbe\xc1\xa1\xbb\xa3\xe6\xf1\xbc31\xb3\xbd=\xbb==\x98\xa1i\xbd\xa33;\xbct\xf6\x00\xbd\xa7\xb7}=K\xe2\x9b<\xe3p\x1e=3\xea\x11=m\xb4\xab\xbc\xe5\xda)\xbc?A><\xd3(\x8f\xbc\xfa[t=\xa9a\xae\xbc\xc7*@=z\r\x95\xbd\x1c\x82`\xbd,\x9f\xc2\xbc\xe2f\xee\xbbP\x8cc;%\x1bP\xbc9D\x81\xbc\xca\x18\x17\xbc\x8a\xd1\x02<\xb5X\xbd\xbc\xdf!\xb3\xbc\x0b\xa8L=\xeb.\xff\xbcGmH<\xfbv\xb0<l\xa6%\xbdrT<\xbcH\x7f\x10\xbc\xa2T\xa4\xbc5\x16\x14=\xd5\x1b\b=\x82\xdf\x88\xbd*\xd8\xa8\xbc*(B=\xeb\xfeC=f-\xf2<6\\\xab\xbcy\xad|=\x81\x87\x8a<8\xfbK:\x95\xafz\xbc\x17\xe1\xf4\xbbE*\xe0<m(\x15>\xfa\xd8\x83<1\x1e|<s\x13\n\xbd+\xd7U\xbc\xce\x0c\xc9\xbco<\xa9\xbc\xb0&\xab\xbcJQ\x94\xbd\x1d[\xfd\xbc\xa8\x0e\x0f\xbcQ.\xb7\xbb\x89A\xb2<E5\xb6<\xad\x95\x1f\xbcw\x96S\xbdG\xa8\xf5\xbc\x10\xe0\x1b\xbd\x94\xf7*\xbcY\xbc\x87=\xc2`*=.;\xa6\xbcKt/\xbd&/\x0f\xbd\t\xc1\x9d=J/J\xbc\xad8\xb2<H2\xa2\xbcC\x19P<\xa8)\x8c;\xdd\x84\x8d<\xd5E-\xbb\xbc\xd2\xc9\xbc\x882:\xbd~\xf5\xed<\x9a\x82\xbc<c\t\xd3;\r\xd9t=v\xdc\xa5<\x1a\x16Q9F\x1d\xdb<\xb0\x85\x88;\xa4\xd2\xd4\xbcxG\x17\xbd\x15+\xa1:_A\xb6<\x9eb!\xbd\xe8\xa3\xa0\xbd\x0c\r\xd7<\xeb\xcc\xcd<\x19\xa0\x9a<\n\xa4M\xbdaoD\xbd3+\xad\xbb!\x9a\x00<\xc99f\xbc\xb8\xc3\x1b=<\x81C\xbdOs|=u\x8a;\xbd~\xb6Q\xbd\xd0\xf4\x19\xbd31X<\xaf6\xad\xbd#G\x8b<\xed\xa5u=\xa4\x9f\x03\xb9d:\xf4\xbcg[\xd2\xb9\xe9\xae5=\xe7a\x00\xbdp\xbf\x03\xbdBp\x1a=2O/\xbd{\xce\xb0;a\xeb\xd1\xbc\xc0R#=`C\x0b=\x13q\xa3:\xe8\xf8\x98\xbb\b\xf0J<\xcdV\xfd\xbc\x95\xe8\xa2<\xb3U\xb9;\x88\xb3\xb9\xbd\xd8\xd3S=\xb9S\x88\xbdg\xb0(\xbdq\xbc(<\xac\x0b\xe9;-L\xd9<\xc5M\x81\xbc\xd0S\xc7\xbc\xdd\xfc-<\x15\x85\xd3\xbc\x11\xc0[=#\xbb\x04\xbd@\xd0f=Z\xc30\xbd\xcf\xa3\xb1;\xfa\xe9\xb1\xbc\xe9\xa2\x04\xbd\x1e\xf2Q<\xae\xc7\x98<\xd5\xad\x18\xbd\xfb9q=\xcb\x89g;\xb0\xd7\xd6<{\x94\x03\xbbxa\xe0;\xf9\xca\x16=M\xdfW\xbc8\xf7\xdc<NP\x0b\xbd^\xe2\xdf\xbc\x7f\xcc\xa2\xbc\x81\xf9\xa7\xb9\xb7\x1e\xed<\x8dhI\xbc\xf9\xe9/\xbc:Y\xff\xbc\x11:\xd7\xbc~\x06\n=J\xf49\xbb\t\x16\xe2<s\xa4\xbb<c\xca\x8f;87\x95<\x11\xdf\x8e=W\x83\xa6<\xf9\x15\xab\xbd\x88\x02w=~\xe5==\xe4Y\xd7\xbd\xe4+\x89;\xd6U\xfd;\xbbZ\x83\xbd8%\xf9;\xc9\xc9\xe4\xba\x06\xaba<\x84\x16\xa1\xbd&L\x0f\xbcLl&\xbd\xcf\xc1\"\xbd\xb7.\xa5\xbc\xa0\x8d\xd2;\x00O\t=\x94\xa2\a\xbc0\\m\xbc\x9ax_\xbcl\x8c8<\xeev5<\x9c\x1b\xcc<\xa2\x8fO\xbb\xbc\x9a\xc4\xbc\xa4u\xc9\xbd\x92wR=,-\xb5\xbc0\x95\x82\xbc1\x89\x8b<&J\xb9<\x8f\xf6\x15\xbd\xbbf1=\xcf\xc73\xbdj\xfa\x9b\xbd\\3\x06\xbc3B\xee;\xbe\xaf\x82\xbd\x84\xb7)\xbc\x1b9b\xbc\xd0\xb1m<GX\xff<\x10Ka:\xf1\x13\"=\xf2\xe8\x0b\xbd\xcb\\\xbd\xbd<\xde\x9b=Ew_\xbcG\xe6\xa3<\x13\xde\x01<=\xe2\xa9<K\x86\x8b;V\xa7>=6\\\x12\xbd\x11\x9e\"\xbd'\xa4\xb6<X\xb2G\xbd'v/=\x17\xa6\xdc;?\\\xf4;\xfb\x1a1\xbc\x9f\x18\x9e=\x83$]<\xdb\x0f\xa5\xbcC\xfa\x13=\xf7\xc2\xa6\xbcw\x11_=^5\x15\xbd\xfb\x84\x109\xaeMk=\x10\x9d\x1b\xbc\xd7\x98\x06<$WF\xbc\x03\x82\x85\xbb\xd2\xb2\x89<{m\x06<\xc7\xf8\x01\xbd\x9f\rC=)@K<\xc7T\x1b\xbd#\x0f\x92=\xb0I\x1f\xbd\a\x1b\xb9<\x90R,\xbd:\xf1<=n\x18\xe0\xbaP\xf4v<\rc\xba<\x1c\xee\xcd\xbc\xf70\xf0\xbbC>\xbc9\xb5\xd0l\xbd\x17\x92X\xbd\nI\x17\xbd\xe3\xea\x92=\x02WT< \x85\xf4\xba\x0b\x1b\x93\xbd\x1d\x91\x96<5x\xd9\xbcK\x1dE<\x1b\xd5\x15\xbc9\x8c\xa0=v\xf6C<\x85y'=H\x1e'\xbcS>u=x`\xf0<\x00\x89k:\xfa\x13H=\xed\xe1\xe1<\xd8\xab'\xbb\xe7V\xaf\xbd\x81\xc8\x89\xbcZ1\xd6\xbci\xf17\xbdP\xbdb\xbb\xee\xf7\x17\xbd|6W\xbd\xb6\x16\x9a<\xed\xcf\x1d=r\xfa\x85\xbd\x88\xab\x86\xbc}\xc2\x9a=\x13r\xb6;\x17\xa4\x8e\xbdp\x90\xa7\xbd\x0e\xef\xce;[3\x8a\xbd\x9f\x8b\xe4\xbb]3<=\x99\xc7\x06<b\xfc,=^!\xb5\xbcH\r!\xbb\xfaP\xc8\xbc\x9e\x18\x03\xbc\x18 \x9a\xbc\xe4B\x0c\xbd\xdf\x8a]=\x10\xf0[\xbd\x9b\x7f\xb0\xbc8\xca\x0c\xbd\rf\xe8\xbc\x05c\x8e\xba\xe8\x93D\xbc\xb8\xb5\x17\xbd\x00\x84l=\x82\xed\xde\xbcr\x0cw=\x94\x9f&=\x83~\x93\xbc\x19y\"<Km\x89<\xafkm\xbdv\xd3\xe3\xba8^\x13\xbc\x81\x8d\xb4\xba\xa9&\xb4\xbcD{(\xbd\xce\x1e\x1f\xbd\x87\xbe\xd4<\xef1\xe0<F\xcf\x83<g\xc5\xbb\xbbj\xaf\x83<\xabgf\xbcWE\x93\xba\xae\xba*=LS\xb4\xbco\xfeI\xbd\x04fb\xbd\x97\xe9\x9c<\x82\x0b\xd1\xbc\xd7\xa8\x0f\xbc\\\x96\xb2\xbc\xe1\x16\x86=\x9cmI=\t`\xa2\xbdB?-\xbd\x18|\xf5\xbcT\xa4\xf4;\xd2\x94\x05\xbc\xb1\xd0M\xbc(\xa0\xc3\xbb\xe74\xab<e\x9d\xe7<\x00FC\xbc\x98\xb4\x94<\x16\x81\x97\xbd\x1eU\xfc\xbc\x16\x17R=Ob\xd7<\xe8\x14\xdd\xbcL\xa4\xb9\xbc\x13\x05\xbf\xbcL\x96k\xbc\xfd6j<\xd2\x12\xb0=\x02\xa4\xbc\xbb\x96\xa1\x0b=T\x01\x9c\xbc\xd0~\x16\xbd\x1b\xbd\x9a\xbc\x1e!t\xbc\xe9n\x0b=\x90=\xed\xbc\xbfq\xf8\xbc\xea46=:(\x9a\xbd\x91l\xa5\xbcu\x9b =;\x87\xe8<\xbfO\x86=\x06\xc1\xdb\xbb\x04o\xd7\xbb\x0c\xb5\x1f\xbd|E@\xbd\x8c\x8a\t\xbd}B\xbb;\x0b\xbc\xf6;\x8eg)=\x00q\xe7<\xf9\xe03\xbc\xe6\x80,\xbd\xd6z-\xbdw\xbc\xff\xbc\x8aw\x9b\xbc\xa1k\xaf\xbcF\xa9\xc3;\x94\xcd@\xbc\xd5\x12A=\xbbT!=\x0c5\x18<\x81\x83\x18\xbd\xe4\xb8\x01=xV^\xbcU\xe2\x0e=0\x90\xd9\xbc+\x02\x02;sD\xc5\xbc\xca\xffR<a(,=\xe2\b\xe2<\xebi9\xbdx\x80\xf8<" "content" "SUMMARY:\nThe video discusses the limitations of MySQL at scale and introduces Redis Enterprise as a solution to improve performance. Redis Enterprise can be used alongside MySQL to store frequently accessed data in memory, reducing latency and speeding up responses. Additionally, Redis Enterprise can offload secondary indexed queries from MySQL, further reducing load on the database.\n\nQUESTIONS:\n\n1. What are the limitations of MySQL at scale?\n2. How can Redis Enterprise improve the performance of MySQL?\n3. What type of data is best suited to be stored in Redis Enterprise?\n4. How does Redis Enterprise handle secondary indexed queries?\n5. What are the benefits of using Redis Enterprise with MySQL?\n6. Can Redis Enterprise be used as a standalone database?\n7. What is the pricing model for Redis Enterprise?\n8. How does Redis Enterprise compare to other in-memory data stores?\n9. Are there any specific industries or use cases where Redis Enterprise is particularly well-suited?\n10. How can I get started with Redis Enterprise?" "metadata" "{\"id\":\"FQzlq91g7mg\",\"link\":\"https://www.youtube.com/watch?v=FQzlq91g7mg\",\"title\":\"Redis + MySQL in 60 Seconds\",\"description\":\"What are the possibilities for MySQL when integrating with the real\\-time power of Redis? Try Redis Cloud for free: https://redis.com/try\\-free/\\n\\nMySQL is open source, free, and can be fast when working on a relational database, but to handle modern use cases, your MySQL will need a boost of real\\-time performance \\- the type Redis Enterprise can provide. MySQL can be difficult to scale and lacks the modern features necessary to quickly operate complex queries. Enable your MySQL applications with the real\\-time performance power of Redis.\\n\\nFrom the blog: https://redis.com/blog/3\\-reasons\\-your\\-mysql\\-db\\-needs\\-redis/\\n\\nDownload our MySQL Solution Brief: https://redis.com/docs/modernize\\-your\\-mysql\\-database\\-with\\-redis\\-enterprise/\\n\\nExplore Redis + MySQL: https://redis.com/comparisons/redis\\-enterprise\\-and\\-mysql/\\n\\nTry Redis Enterprise Cloud for free: https://redis.com/try\\-free/\\n\\n#MySQL #SQL #Redis\",\"thumbnail\":\"https://i.ytimg.com/vi/FQzlq91g7mg/maxresdefault.jpg\"}"
"HSET" "google-video:1" "content_vector" "\x15\xf2\xf6;D\x18`\xbd\xfc\x1c\x00\xbd\x14\xa2\xbd\xbcF \xca\xbb\xef\xf2\x05;\x9aq\x01<\x8b\x9bT\xbd\xda\xf0,<\xa3\x04i=m\xc1-<y\x91\x10=\xeb\xe5\x99;T\xc5\xbc\xba\xf2\x01R=%}A\xbd\xbe*Z\xbch\xbe\x0b\xbd\t\xcf\xf9\xbc\xaf\xcb\x88\xbc\xb4J\xa4\xbcU\x1c\xfd\xbb7\x95|<qg\x98\xbc\xaf\x04\"=\x14w<\xbc\xa7y\xe7<I#Y\xbcaXe=.\xd0\x1c=G\n\xde\xbcEAy=\xf6\xcb\xe1\xbcG\xed0=\xda;\xe2\xbcB\n\b\xbdsy\xc0\xbcW\xe2o<\x8cL;:\xab0F=\x1a\xc4\r=\x8e0\x04\xb9u\xc7K\xbd{\xc1\x0f\xbd\x1b\xa1a\xbb\xdf\x98\xbe;\x8a\x1e\xa4\xbbD\x82o<M(\xc9<\xf6U\x1c\xbd\x0e\xea\xf2\xbc\x0b\xbd\xa2<J[\xf7\xba\x01r\xe8\xbc\xe7\xe2\xe9<\x90\xf6\x85;\x7f\x95\xcb;\xf2'\x8c7$\\(\xbcz\x01\xcf;AV\x9c=.R%<Mc#\xbc\xe4y\b=W\n\x8d<\xf9Ms\xbdO\x16\xe5\xbcZ\x8c\xca\xbb\xd3V~=\x06\xa1\xdd\xbc\xd7\xac\xa1<c#\x80<\xb3\x02\x9e=\xc5\xa9\\\xbd\x9a\xc8;\xbd!\xa3\xcb\xbdK\x9d\xf2;n\x9b\x8d=4\xaeK=dx\xbf<3G=<\xeb\xe2\x18\xbd\x12\xcc\xe9\xbc\xc1\xfb\xea\xbc\xe65\x8a\xbdE\xa3\xa2=D\xc6.\xbdS\x10\xb7\xbcqHB\xbccX\xb7<9\xca+\xbce\xe5<=Z\xbd`=\x01\xa4z\xbd..\xa4;\x8bu\t=\xb1b\xdd;<\xb5\x84\xbd\xb3D~\xbcA)\xd2\xbb}_Y\xbc$<\x0f\xbd\xc8g_\xbc\xaey\xa0=2\x99~=\xad\x9b\x8c<\xf5\xea\x9d;T\xc8T=\xcc-\x88\xbd\xbe\x11\xe4<\xb3\xf2\x86\xbdU\xf8\xe3\xbb\r,\x11\xbd6\x17p\xbd\xec\xcb\x99<\xb7;\x92\xbc\xc8\x14A\xbc|\xda]=\xdf\xe7\x0c;,\xcd\xd7<\xd1\x88h=-\xbf\xd5<\xb4\xfex<b\xb9\xcb\xbayM?\xb8\x81\x16\x86\xbb\x03\x04H<\x8d\t\xaa\xbb\xa3\xc9i=f\x8d{=\x83~\x01<\xa4\xe7#\xbd\xb4\xc6b;\xc0\xaa\xce<\x15\xdc\x8d<\xccV+<E\xae\\=K@~<L\x82\x02=\\\x87\xf7<|\xb3=<[LN<t\xfd\x10\xbd\xf8\xb5\x1f=\xd71\xae\xba\x93\xbb\xa3;^&\xde\xbc\xcf*\x02=@\xb2i\xbcr=\xc2<\xe4\xda\x1f\xbc\xe5x\r\xbc\xe8\x12\xb0\xbd'\x16\x15\xbb+!\xf39\x81\x9f\x90\xbc!dS<\x17\x0f\xfb<\x01\xb7\r=\xefT\"\xbd\x8f\xfb\x86=:i\x8e<D\x05>\xbd\\\xce\x98\xbc\xbe\x83\xd3\xbc\x0f\a\xd0\xbc\xbcO\x0f\xbdv-B\xbc8?\x96<G\xa9p\xbc\xcel\x05<\x8d\xec\\<\xb5JZ\xbd\x11\r)<[\x85\x9a\xbc\xf7\xf3\x8a\xbd\xb1\a0\xbc'%\r=\xb2\x17\x19\xbdG\x86\x90\xbbd\xc22\xbd\xa4\xe5\r\xbd\x18\x90<<\xc0\x90\x8c<\xfa\xd5\x1f=\x118\x1f=[\xc9\xf4=\xce\x06\xb0\xbd*\xbb0\xbc\xa2r\xac\xbcO\xf6U\xbc\xf4o\xc5<\x7f\xf27\xbd\xa3E\xf7<\xda\xbc4:+\xa5\x9c=.\x85\xe5\xbb\xca<#=5^*\xbcy\x98\xa9\xbc\x90\xb9\x84\xbc\xaco\xc0=\x93\x18\xc0<\xcdeU\xbd\xad\x02\xf4<\xbf\xcb\xff;F\xcd\x19:\xec\xee\x0e\xbd\xf2\xd2/\xbd\x82\x87\x1e='\x8f\xf6:\x9a\xdb\xb6<Zi\x10\xbc\xaf\xfb$=\x86B\xdb=\xea\x1bz;#\x88\x83<\xe5Pt=\xbc\xd9\x1f\xbd\xbdzN\xbd\xb9\xf3\xab<\x00\xc1\x8c\xbc\x1b\xfd\x0e\xbd8\xcb/\xbc\xda>\x9e\xbc@u\x98<p\xb4\xaf<,4\xaf;\x85\xcag<\x97;\x03\xbb7\x81\xf7;,\xb8\xbb=\x80\x9e\xfe<m\x7fu\xbd\x11M-=c\xe1E<\x10\xba\xd1;\xc7L\x01=\xf1`\x15=\xd7tQ\xbc\xf5\xa73\xbdg\xb2\xbb<dc$=?\xb6o=\x1c\x80E\xbd \xd9M\xbd\"\x90\b\xbdR\xe7\xa6<c\xb9\x1a\xbb\x1b\xfe\x83<\x1e\xda\x1a\xbd\xdc\xf5\xf0\xbc-\xac\xf0<\xceXG<\x10\xc6\xa8\xbd\x1a3\xbd\xbb|\x0ez\xbd\x06\x14G;\xd6\xffz:i\xc1K;\x03\xc5\xdb=\xdc|0\xbd\xed\x95\xa9\xbb\xec\xaeD<\x11p\xbc\xbc\xe0*\t<\xe1\b\xa6\xbc\x9f\xfaH\xbd\xa7\a\x97\xbc\xa6\xee\xf9;\x80)\xc4\xbc\x06\xa1\x8e\xbd\x1a\x81{=\x15\n\xbc;\xc52\"=IA\xab<\x92\xa7\x94\xbc b\b=\x04pZ<Vm-\xbd\xf3\x9a\x0e=\xee\x01\x00=\x9ch\xf8<\xc7\x9e)\xbd\xa7\xe5\x8a\xbd\"fG\xbc\xf7\xa2\xd8\xbc\x12\x92\xe7\xbctL\xac\xbc\xf2wY\xbd\xeeC8\xbc\x18C\xda:\xb4)\xdc\xbcZ\xac\xf7\xbd\x93\xe757F\xfd\xc7\xbc\x0b\xc7.\xbc\xf7\xd2\x1d\xbc\xd8CX=[0<;\x06\xe6\x87\xbb\xcehS\xbd\x85\x01\xef\xbb\x03\x94\x0f\xbb\xd3G\xb5<\x0b\xc80\xbc\x85\xba\xa1\xbcqL#\xbdV\xcd\xbd\xbb'\xd1\xe8\xbc\x04\x9a\x87;\x99\xf1\xfb\xbc\xb2\xb7\xc2<\xa8r\xae\xba5\x8f\x92={1\x80<i\xff.;\xb3,\x80<b\xd20\xbb)f\xed<\xac\xe7\x1b\xbc\xf8\bG=\xa9R@=F\xc5 <:9F;\x9f=;=k9<\xbd\x98m%\xbb\x9c%\xab<WY\x02=\x12\xf5\xef;\xd8\x06\x02:\x91\xc9\x06\xbdBB\x05<\x8bb\xfd<\xf5;\"=(\xc3\x9b\xbc0>\x82\xbbD\xc0\x9e\xba\xc0\xfb_\xbaO)\xdc<\x12\xb3\a<\a&6\xbdZ\xfc(\xbd\x06\x8e*=sZ\b\xbdqR$\xbd\x8d\xee&\xbd\xef\xfe\xb7='\r\xdd\xba\xcb\x9e\xef\xbb`b\xbd=\xf7/2\xbc\x06\xd4\xe3<\x8cX$\xbb\xefL\x99<\xdd\x04m=\xef\x93\x9d\xbc\xbb\xc6\xc6;\xbe\xf3\t\xbd\xd5\xb8\x1b\xbd\xa0\xca)\xbdgg\xdf:l+\x12\xbd\r\x10\x90<>\xc52\xbbwb\xf1\xbb5g\xea;s\x11S\xbd\xbc\xd1(<3\x86\x83<9\xcc\xfe\xbc1\xe2\x02\xbb\xcf\x88\x15<IL\x1a\xbc\x96\t\xd8\xbb\x93\xdd\x9d\xbc\x14\x889\xbdP\xf2\"\xbb ~p\xbcY\xc5\xbb\xbc\xe9\x7f3\xbd*\xd0Z=g\xff#=\xb6\xc3\x8d<N\xd7E\xbc\x06\x04.=m\xf4\x9d=\xa3\xf4\x13\xbd^\xae_\xbb\x1es\xb3<\x18\x87\xb2<Xbm=Qjk=V\x8e\x1b<\x8d\xc7\x80\xbc>r\x93:\xdb\x1e\x9c<\xb5[}\xbc\x87\xf23\xbd 5\xab\xbc\x1eM?\xbc\xa5\x8cq\xbd\x19>\x89\xbc\xb4\xa8\xdf\xba\xa4\xab\x91\xbc\x99\xe6\xdc\xbc3F\xb3\xbdw\x06\x12\xbc\xd7\xef^\xbd\x9bX#;\xbd\xea\xa9=\x99|\x9a=+\x9b\x7f\xbdK\x96\x18\xbdc5!<\bG\x17=\xfd\x830\xbc\x1bK&\xbb\xb4\xb4\xc9;\x01I\xb1<\xee\x007:\xc0\x93R<A\x13\xef<,\xbfh\xbd\xe9\xfe\xd2\xbciu\xcd\xbb\x84\xdb;\xbb\x88\x93\xf0;76\x00<\xf3\xe4\xa1;*`\xea\xbcvz*<x\x95Q:\xe5\xe2\xce<,\xd0\x00\xbd\x1c\xe6\xd6;o\x03H=T\x9f\xfd;m\x01+\xbd(i\x8c<\xfb\xe2\x19<\xff\x94}\xbb\xbc\xcf\xc6\xbc\x9dH\x0e\xbd\x83\xe3`\xbc\x91\xb9t<\xca>u\xbd\xa9\x8fi<\x18\x10\xac\xbd\x8a\xf6\xd4<\x84@\x99\xbd<\xd4}\xbd\xf4\xffL\xbd\x05\xcb\xb1\xbc\xca\xa9t\xbd\xb0\t\xc6<\x84\xb8\xe2:P\x95,\xba\x9bqd\xbd]\xff\xad\xbc\xd5\xd4\x84\xbc\xc7\xf3\x7f\xbcG\xf5G\xbd\xdf\xdbY=V\xc5\xde\xbc\xc8\x01\x10<\x15U\x04\xbd\xc7+\x9e=E\xe0\x89=EP\xa6<\t\x8f\xe5\xbb\xad\x9b&=\xa3Y1\xbd/b\xa0<\xc3E\xa2\xbc.n\xd4\xbd\xa3\x1e\x04=Z\xb8\x0b\xbd[\x11\x1f\xbd\xe5\xc4\xf5;+\xc2b<\xd4\xd3\xf9<G\x824\xbdV\x84\x0e8\x05\x1a\xc4\xbbT\xfeW\xbd\xf1*\xf4<'\xf5\x10\xbd\x05\xf5[<t\xc7\xbf\xbc\x15dT\xba\xe7\xab\x02<~\xbaa\xbd\x854\xc4<\t1\r=\x04o\x9f\xbd\xa4i\xa6<\xd5\x00\xdc\xba\xc8x+<\xa5\xef\\\xbc\x14\xb2\xb6;\xc4\x0e/\xbc\x81\xa3\xd5\xbcDG\xc6<\xaaSU\xbd\r\x02\xfa<\xc4\xe6\xa5<\x9e\xe9w\xbc'\x92<:\xd82\x00\xbdu\xb1\xc1<O\x03\xa4<-p\x0b\xbd`Y[=\xf8\x87R\xbc0\xc2M\xbc\xe6\x0e|<\xb0\x10\xa5<\xd6\xbbz<\r)n=\x97w\x04<t\xe0\x02\xbd\x14\x05\xf9\xbb\x16@;<\xf9\xf5\xa3\xbdNc\x88\xba\x8c\x1f\x86<\x16\x86\xe0\xbc\xa3\xd0\xa0<\xdf/\x8f<\xc7J/\xbd\x8bF\x1d\xbd\n\xb0\x9a\xbc\"\xad\xdd\xbb\xed\xbe\x94\xbc\x88\xe8\x1d=w3s<f\xcb\xd9<\xf2,\xbf<T!\x8c<\xff[\xce\xbcp\xa3\xcb<+#O\xbc\xfd\x8d%=\x98\x9c\x19\xbd\x84\xf5\xb3\xb8\x00t\xb0\xbd\xe1\xc3\x10=\xf5YQ\xbd\x06\x02-\xbc\xed\xcc\xbd<@\xde\x0e=W\x8c\xce\xbd\x9f\xf4\xa7<\xa9\x19Y\xbd\xf8\x0f2\xbd\xd9\x03\xc0\xbcce\xd0\xbbo\x9a\x87\xbc\xe2_\xdf<\xd1\xdd\x84<\x18\xd1\xc0\xbc\xf0\xc2\x8c\xbc\xfap\xa9<\xa3\x95\x0b=yC\xd3\xbcE\xcd\x1c\xbdR\x1dN=w\xfc,\xbd?,o\xbc\xd2\x9d\xdd\xb8\x0f\x16\x18<\x88)R\xbcl\xf9M=\x01\xa7b\xbd\x10\x8c\a\xbd\xe3k\xb1\xbb\x94\xf6\xd5\xbbA\xca\x81<\xb6\x1a\xa0<O>\x8f<\x8f\xab\x0b\xbdu/\xc2= \x85\xe9\xbc\xb2}\x82<\xdd\x97/=X\x15\xac\xbb{pq=qS6=\xb3\xcc\x91\xbd\x10\xce2={@\xc8\xbc\xe2L)\xbc\x84s\x80;8o\xa1:\xcc\xa1\xe9<FV\xcb\xbb\xc7ko\xbd \xa8\x86<\xf3\xd7 <\xe7S^\xbc\x9c\xa2\xa2=\x10 \x18\xbd\xee\xec\xe1<\x8e\xb2!<\x0c&\x98:t\xbd\n=#\xef\x04=/\xf9\x02\xbd\xb1c>\xbdc\xcf\xd2;Zfl=\x17#M\xbdX\xddP\xbd6\x9e~\xbc @G= 7^;C\x10\x0b=\xe8\x83(\xbdc\xf2\b<\xcc\x95\xa4\xbc\x95\r\xb1\xbc\xed\xca\x89\xbc\xdd\x12`<\x8b8 =fo\x00\xbd\xf4\xb0\x01\xbdM\x9a\x9d=\xa5(\"=6\xb5\x06=E0\xd6=\xc6\x18\xab;S\xbd\x8e<\xd4j\xd8\xbc\xdc\x8f\xe0\xbb\x95\x9b\x17\xbd`\x0b\xa6\xbcC\xd1\x99<\xeb\x82)=\a\xe1\xd0\xbd\xc4\x8f'=\xa3\xf4d=\x93\xacW<\x90A\xfc\xbb^\x97B=\x96\xa0\xfa<x\xfd6\xbd<lj\xbd]\xa3\x14<a-\xb3\xbc\xd4{\x9e\xbc\xb1I-=\xbb\xe4\x99<~Xy=X\aQ\xbc\xc7\xd6\xdc<\x05\x03/\xbd)\xae\xf9<\xc03\x8e\xbb\x9eeY\xbd\xc1\x8e\xee<\xa5j(\xbd;[N\xbcw\x00\xcf\xbc \x0f\x13\xbd\xe1\\z\xbd\xe9\xdcX\xbd\x15TQ\xbd\x8b\x9e+=N\a\\\xbdB\xe2\x80=\x98\x06\x9b=\xcf\x97\xbe\xbce5\xd8<\xd4o?<A\xdd\x90;\xe9\xf6\x1d=z\xf4D\xbaZ\b\xc2\xbce\xdc\x17=\xf9\xca\xd7\xbc\xb2W\xd7\xbc\xed]\xe6<_\xe0\x16\xbc\xc7\xfcR<E\x8b\x9a\xbcU\xce.=\xf41\x12\xbd{\xc5\x97\xbc\xcd\xb4\x9d\xbc\xce{\xa3\xbc\xa4\xa5\xac\xbd\r\xa3\xd3\xbc\xb1\xa0\x14=\xcd\x81\x11\xbc\xfbW\x0b=\x04\xea\x85\xbb;\x94K=\x0eA\x86=j\x97\xe0\xbcoQO\xbc\xb7p\xcd<\xaa\xb8\xe4<\xc3\x12\x1a=\x83\x97a\xbc\x01\xa3\xd9<1\x95\x82\xbc0\x0bN=\xe9\x1e\x9b<\xfa\xa63=\x86g\x93\xbd\xabrV\xbd\xc9\x1a\x8c==\x86,;\xee6\x9d\xbb\xaf?\xdb\xbc\xb6r\xe5;?f\x88\xbd4\xc8\xe0<\xc5\\G=wR\xfa\xbaW\x9e\xbf\xbbZ'\xf2\xbcu\x8cD\xbdOd\xfd<+a\x18\xbd\x13^6=\xf7\x10\xb6\xbb>\xfeY<\x0cu==\x17\x10\x10\xbc\xbe<\xd2;@\xbcQ=\xa31\xa9\xbc\xf2M\x83=\x17\x93\x81<AR\xb3\xbb\xf4\xbd \xbd\xa2N\x84\xbd\x82\xc2\xa2\xbc\xb1\x13\xff\xbb\x9aq/<\xd6\xde\x80<\x9f' \xbbG\x8aP\xbc\xb5\xf0M\xbc\xeb#\xc19T:\xc4<%\xba1\xbd\x8aZ\xa4\xbd\x10\x88\xfa<\xa6\xec\xbb\xbba\x1a!=\xae?\x8c<\x04\xbe\x88<\xce\xc8\xeb<\xbe\xcb$<\xe0\x8f\xd8\xbc[PD=\xd1\\q\xba*`\x10\xbc\"\xd2\xd5\xbc\xb8\x04z=\xb5\xbbD=\xcd\xe7\xcf<\x02Y)<Q\xa4\xe8<" "content" "**Summary:**\n\nThe video provides an overview of the new features introduced in Redis JSON, which enable efficient querying and indexing of JSON documents. The demonstration utilizes the Redis Stack platform and RedisInsight, the Redis GUI, to showcase the creation and manipulation of JSON objects. Additionally, it introduces RediSearch, a component of Redis Stack, to demonstrate indexing and querying JSON data.\n\n**Questions:**\n\n1. What is the key format used to store vendor data in Redis JSON?\n\n2. How would you append an event ID to the events array within a vendor JSON object?\n\n3. Explain the purpose of the SCHEMA option when creating a RediSearch index.\n\n4. What are the data types supported by RediSearch for indexing JSON fields?\n\n5. How can you search for a specific tag within the cuisines array of a vendor JSON object?\n\n6. What is the syntax for creating an index on event JSON documents using RediSearch?\n\n7. Provide an example query to find all events with a specific number of assigned vendors using RediSearch.\n\n8. What is the purpose of the pro tip mentioned in the video regarding searching for an exact number of assigned vendors?\n\n9. Where can you find the Redis University course mentioned in the video that covers Redis JSON and RediSearch?\n\n10. What are the options available to try out Redis Stack?" "metadata" "{\"id\":\"I\\-ohlZXXaxs\",\"link\":\"https://www.youtube.com/watch?v=I\\-ohlZXXaxs\",\"title\":\"Redis and JSON  Explained (Revisited)\",\"description\":\"Hungry for more Redis and JSON tips and tricks? Check out this video from Redis on how to create and update JSON documents in a Redis Stack instance! Then create secondary search indexes with Redis and Search to query Redis for some delicious results!\\n\\n00:00 Introduction\\n00:32 Why we use Redis Stack\\n00:44 Intro to the use case\\n01:22 JSON.SET truck:42 \\- create and store a vendor JSON object\\n02:00 JSON.SET location:23 \\- create and store a location JSON object\\n02:21 JSON.SET event:11 \\- create and store an event JSON object\\n02:47 JSON.ARRAPPEND \\- ad an element to an existing JSON array\\n03:11 JSON.SET \\- adding to an existing JSON document\\n03:52 Redis Search & JSON\\n04:46 FT.CREATE \\- creating a search index for \\\"truck:\\\" JSON documents\\n05:55 FT.SEARCH \\- query for text within a search index\\n06:40 FT.SEARCH \\- query for TAG words within a search index\\n07:10 FT.CREATE \\- creating a search index for \\\"event:\\\" JSON. documents\\n07:51 FT.SEARCH \\- query for numeric range within a search index\\n08:26 Conclusion\\n\\nLinks: \\nRU204: Storing, Querying, and Indexing JSON at Speed: https://university.redis.com/courses/ru204/\\nRedis University \xe2\x86\x92 https://university.redis.com/\\nRedis \xe2\x86\x92 https://www.redis.com/\\nRedis Stack \xe2\x86\x92 https://redis.io/docs/stack/\\nRedis and JSON \xe2\x86\x92 https://redis.io/docs/stack/json/\\nRedis and Search \xe2\x86\x92 https://redis.io/docs/stack/search/\\nNeed a Redis Cloud now? Sign up for a free Redis Cloud Essentials account \xe2\x86\x92 https://bit.ly/3xdTyMR\\n\\nJoin our discord server \xe2\x86\x92 https://discord.gg/redis\",\"thumbnail\":\"https://i.ytimg.com/vi/I\\-ohlZXXaxs/maxresdefault.jpg\"}"
"HSET" "google-video:2" "content_vector" "\xf1V\"\xbca\x1eP\xbdu\x9b{\xbd\x96^\x10\xbd+[\xcb<8\xfb\xbf\xbbpPR\xbc\x02\xa4\x00\xbd\x97\xc8\b<\xee\x0b\xce<\x0f\xc0(\xbc\x92.\xff\xbbG\xc3\x9f;\xfe?:\xbc3\xdcz=X\x1cA\xbdO\xd2\xdd<C\xd4\xf1\xbc\xacs\x82\xbcH'\xd4\xbc>/\x9c\xbd\xff\xca;\xbd'\xb4Z<\xbd\xf3\xdc\xbc\x81\xc5\xef; D\x16<\xf9\xff\x17=-\x7f'\xbd\x13\xfe\xe8\xba\xd7\xe2\x1f=F\x06\xc1\xbc\x01\x19u=V'w\xbd\xf6`\x1d\xbcy]\xcb\xbc\x101n\xbd\x98\xfej\xbc\xeb\a<<\x93\xd5\xac\xbc\x84\x82\xd4<\xcf\xd47=\xf1\xbeO\xbd\x00\xdf\xe9\xbcA\x0fk\xba?6\t;0\xd6\xf7;$\x03\x1f\xbc\x15O\xda;e\xba\xd0;\xd1\xc2\x18\xbdk\xbd\x9f\xbc\xa2>\x9c\xba\x85\x04/<\x05\x8d8\xbd\xcf\xecC9<q8=Un\xae\xbc;\x83\xa7;,\x83{\xbc,u9\xbc\x02\xda\x9c=9\x16\xa7<\xd2\xd4u\xbc \xe6*=\x80\xa3 =El\x9b\xbd\xc9\xd7\xa3\xbc\x9a\x8f\xa0\xbc\xc2:)=\x83\x81\xc3\xbc\xc3]\x06\xbc\x13\x87\x8f\xbc\xe9g\x82=v\x96\x85\xbd\xb3\x99 \xbd\xcc\xd9\xe3\xbd*\x9d\xa1<\x9a\xe3\xa2=\x13\xce\x1c=\xfb\xad\xa8<\xb9\x1e\x9f\xbc\x8a\x8b|\xbd8\x89\a\xbd\x99\x98\xd7\xbc;\xee\xff\xbc\xac\x9b\xcd=z\x1fP\xbd\x8c\xdeX\xbdHZ\xff\xbc\x1d\xba\x10=:\x1f\x05\xbc\x97\x02\x89\xbc,@]<\xa4\x17o\xbdoS\x05=\xd0K\xab=\x1a\xfbk\xbc\x8a\x98\x98\xbd\xd2\xfe\xe9\xbcc\xb0\xee\xbb\x1c\x92\x16\xbc\xb9L\xbe\xbc$\xb4\x06=\xdc\x10\x85;.\x1dF=\xe8\xc1~=\x1fp\xe9<\x95\xfbd=\x90PI\xbd,\xfd\xd6<;*'\xbd\xe3\xed\x16\xbdE=}\xbd\xf8\x06\x82\xbd\xaa\xaa\xf2;PR@;\x04\xaaU\xbc\xacF\xa2=\x1e\x97\x1c=\x90Or\xbc*\xbb\x9e=\x05T\xca<O\x1a\x82<\xf7\xb1\x1c<S\xa5 \xbdS\xceS\xbc\xe3\xc3\b<\x9eq5<\x9a\x12\x82=\x96\xf6\xaf<\x9dU\x83\xbb\x1eT>\xbd=g\xdd<\xe6N7<\xb8D\x8f=*K(=\x9d\xf78=\xa6zy<\xd4\xccn=\"'\xf9<\xfa0\x0b;f\xb4\xa1;\xe3(-\xbd\xb9\xed\x1c=\xe5%\x1a\xbc%\xf3\xd6\xbbB\xa4\x85\xbb\"\x90\x89\xbb|6/9\xfc\xe5\xc3\xbc\xecW\x0c\xbd\xecH\r\xbdvo\x9d\xbd\x1fD\xd4<\x19\xcb\xb4<u\xe3_<\x17\xe0\xd9\xbb\xaf\xd9\xf1;*X\b;\xba\x84B\xbc,$\xa3=\xc4\x93\x19=\xe2\x02\xf2\xbc\xe8u\x18<rp,\xbd\x1dM\xdf;S\xba\x84\xbd5\xf5\xdb\xbc\xfe\\\xae\xbc/\xd0\x80\xbc\xe7\xa0\x19\xbd'\x82m=\xc3\xbd\x19\xbd\xff`9\xbc.\xb3\t\xbdJ\x01\x91\xbdi\x15X\xbcw\xcdH=\xb0U\xaa\xbc\x0b\xe4\xa3\xba\xa0\xb0\x19\xbd\xdb\x90\xb8\xbb\n\xaa\x0e=\xb1G\x98\xbc;\x81%=\xa9`\xe0<|\x97\x83=\a\n\xbd\xbd1\xfd\xb8\xbcC\xcf\a\xbd\xbex\xd1\xbb\x87\x0e><$\xd4\x0c\xbd\x7f\xa4\xc0\xbc\xba\xcb\xa1\xbc\xe4!M=f\x90\xef<\xa9\xfb\x03=\xbcE%\xbc\xcd)!\xbd\xb3\r\xd6\xbc\x97\xe3\x99=\xb1\x14\xec<k\xb9R\xbd\xbfe\xd1<\xdb:\x8a<^: =a'k\xbd_{\xa7\xbb\xebbH=:(\xff\xbc/\xbc\xf4\xbc(R\x99\xbc*\xaeS<^\xd7o=\xb8\x82\x11=E\xc1*;\x0bA\x8b=k\xa3\xa0\xbcZ\xcd\x9c\xbd\b\x9b\x80=x\xaa$:\xbc\xd9\x1a\xbc\xba\x97\xec\xbc\xe1\x0c\xaa\xbc\xa3\x95\xf5<\xad\xd4U=\xfd\xf6\x04<\x8aR\x1a=clo\xbc\x84I><\x15\xee\x17=\x95\xbd\xd4\xbc\xef\x85|\xbcD\xf8\t<\x8d\xb6\xd4;@\xb1\x1a\xbbRn\x89<\xfb\xfb\x01=m\xe2\xce\xbc\x8f\x93T<\xdf\xab\xe9<:/\xf0\xbat\xcaN=\xa0n\xcb\xbc\xb8\xa9\x99\xbc\x83!'=d\x10\x11=\x00\xe9\x9a\xbc\x82\x04\xe4;tF\x1a\xbc\"\x94\xf4\xbcZ<\x90<^e\x13=\x17\x9e\x1c\xbd;z%\xbc\x84\x945\xbd\x942\xd7<\xe4`\x14<C\xcf\xc7;i7\x9c=\xc6!\x17\xbd}\xcb\xd1\xbc\xc8\xb9\x9d;pAJ\xba\b\xd0\x8a;\xd2\x03\x7f\xbb\xa4.\xda\xbc\xb0E$<\xf4A\xe6\xbbk\x88\xfe;d\xe7E\xbc*\xff\x81=*#\x1c=o\x8a\xd2;\xa83\xea\xbaM\xd0\xad\xbc\x9dj\xf0<\xd5\x8da<\x0e\xe5\xa2\xbd\xba\x89\x82\xbc\x8d\xf4\x9e<U\xf8A\xbc*@U\xbdO\xb6\x9c\xbdX\xad\x8b\xbc{\x99%\xbd\xdd\xc5!\xbc)7\x0f;\x1e\xf8m\xbd\x05\b\xcb\xbc9\xe1\xad\xbc\xe1>_;\xd4\xf7\x83\xbds\xfcT<8\xbf-=\x05\xbc\x94;*\x8c\xd4<\xe8\x84Q=.1\x9a\xbc|Mh;.`>\xbd\xfe\xe5 \xbd\xc2\xdc,\xbd\"\xcf_=\xad\x8b\x98\xbc\xb1\x93\x10\xbdK\xb6\x16\xbd\x82\xeba<~\xaf)=\xcc\xbb\x9b<ns\x01\xbd\x8f\xeb\x82\xbc\x1b\xdd\x96<;\xab\xb4=\x0c\x981<\xbfP\xd7\xba2\x0c\x0c=\x0bT:\xbdl\xdb\x8c=\xb9\xfa\xad\xbc4\xc7\xac=lj\x9e=\x0b\x98\a\xbc,\xaf\xa1\xbc\xde\xf1(=V\xbc\x11\xbd!t\x0e\xba5m\xcb<\x8b\xa7\xed<\b\xe8\x9f\xbb\x04X\x04\xbd\xa8\xe1\x8b\xbcvV\xf7\xbb\xa9\xe1\x1e<RWD\xbc\x12\xc1<\xbd\x82\x82\x01<\xcd\xcbu\xbcaN_\xbcX\x95\xa8\xbb\xcd\xc0\x0e=\x04\xdd\x1a\xbd7\x00\x1b\xbdG\x7f\xc1<\xed\xe1\xb5\xbc\xcd\"q<\x1a\xdf \xbd\bZ\x8b=\xa4e\xeb\xbc\x8b(|:\xdb\xd5U=\x9c\a\x87\xbc\xd8>v\xbc\xa2\x0cB\xbc\x90$\x0b\xbc\xd8\x82T=J\xe3&\xbd0x\x88<\xf4\xf3K\xbd\xf2\x9c\xed\xbc\xc6w3\xbc\xc3(\xde<\xd9\xbe\xcc\xbc\x01\x83S=\x9fK\r=\xb5g\xe9\xbb\x8d\xcaN<\xbb\xe4\xcf\xbb_\x00\xda;\x92\xb77=\x03\xdd8\xbdH\xf3;\xbcb]\x1e:\x82j\xdd9\xd2\x1d\x97\xbc\xf1UJ\xbd4\xe6\x95\xbc\x8b\xab\x8f;#}#\xbd\xfd\xf2\x91\xbd\x88F\x82\xbd\xbc'>=eC\xaa<\x9c\x94\x0f=6\xcff<<\x80\x0c=\xe7\xd7\x96=\xbbV\"\xbd\xcb)\x19:\x01\x1bc\xbc\x1ea\x1f=3\xfd\x9d=b\x89==7\xd4=<\x11P\xc4\xbb\xaa\xbfp\xbc\xfagF\xbd\xa3\xd8z<S\x02\x04\xbc\xbdV4:\x1a\xa3\xc1\xbbyGA\xbd\x97u\x83;IB\x05=\xdb-}<\x97\x16\a=,\xad\x8d\xbdG\xe19<\x1cs\x02;\x9c\xab\x94;\a\xaf\xd1=\xa8\xfe?=\t\x1e\xaf\xbc\x9d<\x93\xbc\xcfq\x9c<y\xb3\xbe<\\M\xa5\xbc\xfe\x96\xd2\xbc\x1d\x10\x13=\x11H\x92\xbc\x05q\xe4\xbc\xdb\x97\xd2\xb9HAa<\xf0\xbe\x04\xbdV\xd8{\xbd\n\xf4\xb3\xbc3D\xcb\xbc\xd0\xb6\xbf<\xe6\x9eY\xba\\_\x94<=[\x91\xbbT;\x9b\xbc\x12\x1d\xd1\xbc\a\xbf~\xbb\x9a\xfd?\xbd\a\xe7\x1d<\x04\xb9\x8a;\t\x061;\x84g\xb6\xbcH~1=\xa7\xa7\x81\xbd*\x13\xab<\xedU\xf1\xbcj0\x13\xbd\xd8\x1d$\xbd\x02\xc4}\xbc\xf9$\xa3\xbd\xd1\xb3X<\x18C]\xbd\xbf\xf1\xc7<\x0f\xe0\xd0\xbdE4\x00\xbd\xbd\xa7S\xbddB\xed\xbc_\xd6)\xbd#4\x0f=\x95\x15i='\xd9\xaa\xbc\xce4\x0e\xbd\xee\xdb'\xbcH5 \xbd\x94T\xba\xbc\xf9<\xf7\xbc\xcc\xbe\xd0;\x81\xc9*\xbd\xaa\x1e\x1d\xbc\xd3>\xdb;\xc8{\x99<q\xef\x89=\x1cC\xa8<\x90{'\xbd\xef\xd2\x03<T\xa6\x13\xbc\x9bFO\xbbmr\xc3<05p\xbd\x85\xc8\b=\xa3\x8c\x1b\xbdu\x82\x85\xbd\x8dIa\xbcC\xc4\x01<\xbe\xf9B=\x8b\xb1\x00\xbd]=\x17<\xc2'\xfa\xbc\xab\xd1\xe8\xbb\xda\xcf\xc4;m+\xba\xbaZ\xabQ<N\x00\x81\xbc\xf3\xfbv<\xd0@\x04\xbdQs\xbf\xbc\x0f\\\xbf\xbc#7\x91<\xc8\xd3M\xbd\xdb\xf7q=\xb7t\x0c=\x8fr\x94<\xf2\xa2\x0f=J\r#=\xd4-\xb6;>E.\xbdS\xe6\x93=\x8b@\x9a\xbd\x132\x86<w3r<\r\xaf\x8e<\xfa\x81\x95:\xfc^\xc9\xbc\x9e#\xc7\xbc:mS\xbb\x9b\x10\x95:\x98\\\x13=\x17\xee\xcc\xbc\xd8A#=%z\x03\xbc\xef\x9a\x9e:\xac\xc8\x16<Dd\xab=R\xb1\xcb<\x1f\xb8\x99\xbd\"f\xbd<\x044\xef<\xfao5\xbd\x0c?\xda;5TY=\xb2\xb7\xf6;M\x14\x019\xd3]\xd1<\xd5{\x8c\xbc\xc8\x81\x95\xbd]\xb8{\xbcq,U\xbcn\xa93\xbc\xde\xab\xa4\xbb\xb5=u;\xb2\x1a\t:X\x03p\xbc\x14\xcf\x0b=\x98\xe9\xf0\xbcx\x83\x0b=\xa0x\xcc<\xc9\xc9E=\xb44\xbc:\x01\x03'\xbdA\xf7\xb6\xbd\xfb\x1e\xc1<W\x1cP\xbd\x19j\x19;ps\xc5<\x96j\x8f=\xcb\x0b[\xbd\x0b/\x0b=@~\r\xbd\xedA\x89\xbd)/&<\xda\x04\x00=y+\xb6\xbb\x0f\xc5\b\xbdl\x1d\xac\xbc]7\x99;_*\x16\xbc\xc4\x12?=\xa5l@<l\b\x96\xbc\xc6\xac<\xbda\xa4}=\\\xb4\x1b\xbd\xe1\xda'<\xcc\x7f\x16=\x9b\x9a1=\xde\xe1\xbf\xbc'\xcfg=\x10\x12\x8e\xbd\xcd\xa2\xf4\xbc\xea\x9d\xa5\xbc\x8f\x05k\xbc@\x89\x95\xbc\\$\xef<\x02\x14\x0c=\xc1+x\xba\xdc\x9f\x8f=\xf5@5\xbdU\xdf\xdf<_\xad =\xce\xf89=!%P=\xf9\xff\x8d<\xeb\x00%\xbd\\8P<\x1e\xc2O\xbd\x83\xb5\xa9\xbc\\\x17J;P\xd3\xce<\xcd\x96r<\xec\xce\xc2;3\x8e\x00\xbd\xfe\x97\xfb:\x85\xb2\t=Gei\xbcb\x18\xc4=\x0b\xe5F\xbdL\xfe\xcc<x\xdf\x1b=\xc3J\a=\xb2p\x92<\x92\x83<=ir\xa4\xbc\x1e\xee\xdd\xbc\xe9\xd7\x11=WE\x1c\xbbG\"\xf8\xbc@\x0e\xd2\xbc\xffO\xa4\xbcj\x18\x04=\x9bB\xfb\xbb\x86n\x97<=\xab!\xbd\x1bzx\xbc\xb8\xc6F\xbcK\b}<C\xc8\xd3\xbc7\x8d\x89\xbcr\xad\xb1<T \x8c\xbb\x7f\xae\x81\xbc\x84\x96\x81=d\xf5\xfc<\x95}a=\xc2\xdb\x82=\xb5j|\xbb\xad\xc5\x0b=i\x94\xe1\xbc\x18\xc9\x91<\t\xaf\x0c\xbd\x7f;H\xbc!\xe5(=\x84>)\xbb\xe7\xa8\xd4\xbd:q\x0c=\xd3\x19'=\xfe\x01\xf2\xbc\xee!\xcf\xbc\xab\xafw=\nf\xc9<\xcb\xd6\xa2\xbd\xb3\t5\xbc\xddB\xbc<\xb9\xf8\t\xbd\x91k\x97\xbc\xff\xc9e=R\xe5H\xbc\x04\x11\x13=Q\xa1\xf6\xbb\xe1\xb9\x9d<\x18\xd9I\xbd\xa6\xf1\x11=\x96\xb1\x1c\xbcB\xa7x\xbd\x00u[=\xa9:{\xbc\x10\xd3\x1c\xbd\xdb=\xaa\xbb1\xb5\xda;T\xc6\xd0\xbd1\x8az\xbd\xbfpL\xbd\xe7\x97\x02;k\xc1>\xbd\xa7\xf4\x82=\xc7&\x88=?\xbc\xaf\xbc_Ma=t\"\xe2<\xed\xa8\xb5<<\x7f\t=>\xb0\x88;\x8a\x0f\x8c\xbcW\xba\xb1\xbcr\xe2,\xbd+\x12\x0c\xbb3\x19\xd1<\xc4\t\xc0\xbbX{\x9e<L6\xa09\x1e\x1d\"=EG\n\xbdW\x991\xbd\x13\xb5'\xbc\xc5\b\xf8<\x9e\xcb\x8f\xbd\xa2a\x15\xbc\xc4\x18+=\xb8\x18\xa9<\xdb\x01_=h\xd4\x17\xbd\xa8\x92\xd7<O\x0e\x1f=F8N\xbcd\x13j\xbd\xe2\\\xb9\xba\xf0L\xc5<\xb3\x99_<F\xfc\x06\xbd\xc7\xf9,=\xc9\xb8\xba<\xd5\xb84<\x94\x01@=9\xb2\x0c=\xd5\x05\xfa\xbc5\xfa\x05\xbd\xe8\xe7\x8d=\xbd5\x90<\x02)\xcd\xbc`\xb0}\xbd\xd1$x;ay\b\xbd\x7f\x81\x1e=v\b:=\x9ej\x85<@\xa00;rE\xa9\xbc\xd7w~\xbdgS5=\x19\x0c\x05<\x93X\b<\x9b\x8b\x91\xbc8\xf4Z\xbd3{<=\xa3\xad&\xbd\x83\x92\xe8\xbb\x9c\x89r=j\xf5U\xbcz\xde\x04=\x0b6\x92;\x1b\x9b$\xbb\xca\xc1/\xbd\x06\xc0\xa8\xbc\x970T\xbb\xc7{\xd7;=\nR\xbc\xb0w\x91=A\xa6\xbc\xbazSi\xbd\xce\x97[<_b\xb9\xba\x12\x194\xbc\xcd9\x13\xbd\xbbM\x9f\xbc\x12|\x10=\xacj\xc8:Y\xaat\xb9Zh\x05=\xfa\xcf\xad;s\xb8\xa6<\x83:\xb8\xb9z\xe3J\xbbH\x1e\xdd<\xfa\x96\xcb\xbb\xb2\xe9\x05\xbc)\xb4G<\x85\xb1\x9f=\x06\x1bl=\x9f\xdc =\x92y\x02<\xd4\x84\xfa<" "content" "**Summary:**\nThis video is an advanced tutorial that demonstrates how to enhance a Node.js API built using Express and Redis with RedisOne and Redis' native features. The API supports CRUD operations and various search capabilities, including full-text search, geo search, and location tracking. Furthermore, it introduces the use of streams to maintain a history of location updates.\n\n**Example Questions:**\n\n1. How does RedisOne facilitate the mapping of Redis data types to JavaScript classes and objects?\n2. What is the role of the .env configuration file in this project?\n3. What is the purpose of the createIndex() method used in personRepository?\n4. Can you explain the difference between searching by a string (\"lastName\") and a number (\"age\") using RedisOne?\n5. How does RedisOne differentiate between searching for verified and non-verified users?\n6. Provide the syntax for performing a full-text search on the \"personalStatement\" field using RedisOne.\n7. Demonstrate a complex search query that combines multiple criteria, such as searching for verified users over 21 with a specific last name.\n8. What advantages does the text field type offer compared to the string field type for storing data in Redis?\n9. Explain the role of the client.fetchRepository() method in establishing communication between the client and the RedisOne repository.\n10. How can you use the Swagger UI to test and interact with the API endpoints?\n11. What is the significance of the keyname property in the context of creating a Redis stream for location history?\n12. How do you use Redis commands via the command-line interface (CLI) to retrieve the location history stored in the stream?\n\n**Question and Answer Bot:**\n\n* Question: What is the benefit of using RedisOne in this Node.js API?\n  * Answer: RedisOne provides a convenient way to map Redis data types to JavaScript classes and objects, simplifying the interaction with Redis.\n\n* Question: Why is a .env file used in this project?\n  * Answer: The .env file stores sensitive configuration data, such as the Redis connection URL, separately from the application code.\n\n* Question: What is the purpose of the createIndex() method in the personRepository?\n  * Answer: The createIndex() method is used to create an index on a specific field in the Redis database, optimizing search performance.\n\n* Question: How can I differentiate between searching for verified and non-verified users using RedisOne?\n  * Answer: You can use the \"verified\" field as a filter in your search query to differentiate between verified and non-verified users.\n\n* Question: Can you provide a syntax example for performing a full-text search on the \"personalStatement\" field using RedisOne?\n  * Answer: To perform a full-text search on the \"personalStatement\" field, you can use a query like this: `where personalStatement matches \"search_term\"`.\n\n* Question: How can I create a complex search query that combines multiple criteria?\n  * Answer: You can combine multiple criteria using logical operators like AND and OR in your search query. For example, to search for verified users over 21 with a specific last name, you could use a query like this: `where verified = true and age > 21 and lastName = \"lastName\"`.\n\n* Question: What are the advantages of using the text field type for storing data in Redis compared to the string field type?\n  * Answer: The text field type supports advanced search capabilities, such as full-text search, stemming, and stop word removal, making it suitable for storing textual data.\n\n* Question: What is the significance of the keyname property in the context of creating a Redis stream for location history?\n  * Answer: The keyname property is used to identify the stream for location history and should be unique for each person.\n\n* Question: How can I retrieve the location history stored in the stream using Redis commands via the CLI?\n  * Answer: You can use the XRANGE command in the Redis CLI to retrieve the location history stored in the stream. The command syntax is: `XRANGE keyname - +`." "metadata" "{\"id\":\"KUfufrwpBkM\",\"link\":\"https://www.youtube.com/watch?v=KUfufrwpBkM\",\"title\":\"Redis Stack Workshop: Redis Stack OM Library for Node.js\",\"description\":\"Join us on April 13th at 5:30pm GMT for the Redis Stack OM library for Node.js workshop with Redis Developer Advocate Guy Royse. \\n\\nTune in to follow as Guy demonstrates how to create applications using Redis Stack and Node.js. Also, see how to store your data using Redis OM and store data using RedisJSON. Follow along with the sample application built with Express, which is available on GitHub. Guy will be on chat to answer any questions. Stay tuned!\\n\\nSource code for the demo application: https://github.com/redis\\-developer/express\\-redis\\-om\\-workshop\\nRedis OM Client for Node.js: https://github.com/redis/redis\\-om\\-node\\n\\nFrom the blog: https://redis.com/blog/introducing\\-redis\\-stack/\\nDiscover Redis Stack: https://redis.io/docs/stack/\\n\\n#Redis #RedisStack #NodeJS #RedisOM\",\"thumbnail\":\"https://i.ytimg.com/vi/KUfufrwpBkM/maxresdefault.jpg\"}"
"HSET" "google-video:3" "content_vector" ";\x03\xfc<\x17\xed\x14\xbd\xc6\xb6A\xbc\xed\xa1\x80\xbb\x7f\x1d-=\xb8\x1c\"<\xe6\xb7\xd2<\xd4\xa6\x04\xbd\xb8\xf4\xe7<\x02\xef\xa6\xbc3\xa1\x06\xbc\xf2e\xeb<\xf3&\x9a\xbb\xcb\xf8\xbd\xbc\x11\x04D=/\xbd\xa3\xbd\x8b-\x98\xbc\xda\xa0\xb3\xbc\xfd5\x15<\xd1Sm<a\x19k\xbc\xfc\xb5m\xbcXA\x86<r\xc4\x87\xbc(\xb9\xeb<3\xd7\x9f\xbc]B\xdf<'S<\xbd\xff\xd9\x88\xbc\x8e7\x10<:o\x89\xbd\xff,\x7f=\xc6p-\xbd\xcd\x964<\xde\x87\x0f\xbb\x1a]\xa3\xbc\x96y\xc5\xbc?U\xc5<L \xc6:\xae\x97\x96=\xfd\x85\x0c=\xdaAi;\xf1\xc9E\xbd_\x0f\xcf\xbc\xc8\x03\xa5\xbb|\xdb\x9a\xbcK\xc4k<\x94F\x1f<\x1fW\xc7;\xe97?\xbd\x81\x0b\xf9\xbc3R'\xbcjS\"=\x117\xd9\xbc\xce\x88$<\xfa\x03;<\xba:W<P6\x97\xbb\x19n\x86;X?\xc5\xbc\xa6\x87r=\xe8\xf0\xc4;C\xb5\xf2\xbb\xed\x89\xfc<<\xb7W<\x14g\x91\xbdCd\x05\xbd9C\x8b;:\xa3\x1a=k\xd0O\xbc\xc4\xc1\xe0\xbc\xc5Ks\xbb\x00\xfb\xb6=K0\x9f\xbc\xc3\xd2\xa0\xbd\xe2\x01\xdd\xbd\xf8\xbb\xc2:o:#=\xee)\xa9=*\xdc\xff;\x00\xcf\x80\xbb^f ;\xb0\x14\x06\xbd\x8bw\x95\xbc\xd2^J\xbd]\x04L=F\xffy\xbc\xf6\xda\x90\xbc\xaa\xcf\x0e\xbd\x02B\x84<\x82\xe5\xd1\xbc\x02\xad\xb2<\xce\xe0\x9d<|\xcc\xba\xbd\x1b\xf1\x8f<SP\xf8<\xbbQ\xda<\xb4g\x00\xbd\xdb\\a\xbc\xf9\x9dw\xbd\xa8\xd3\x7f<\x96\xf5\xd0;Y\x12\xc2\xbb\xbd.3=i.\xe2<\x8aX\xb2<H\x9cP\xbctX\xa6=\"\xe4\xc1\xbcq\x06\x94<\xa6\x89u\xbd\xa3\xf7r;i7\xc5\xbb\xd2\xc6c\xbdN\xd5e<\x91\x0f\xcb\xbc\xea\xf0=<\xbcj\xbf=\x94\xdd\a<\xbf\x9d\x14=!6\x9e=\x00?q<\bh7=\xe0\x8f\xde\xba7\xeb\xb2\xbc\x8cn\xbb<*p\x8c<\xbf{\xfb<\xedi\x05=\x13\x7f\x82<\xc7\xa0X:J\xc5v\xbd'_\xd4<\xa1L\x17<\xe8\xcdM={\x17\x0b=vmK;\xd6\xbf\x91=\x04\xaf\x93=YJc=\xa8\xf0\x14;1\x0b\x9c;f\x12(\xbdF~%=J\xdd\x0f\xbd\xd2\x10\x02;\x01\x95\x06=t\x12\xf3\xbb\xf2\x85\x89<]k7\xbd\xf8q\xf4\xbc\x9d=\xad\xba\xbd\xd4b\xbd\xa0k\x18<\tC\x91=\xa2\xe6\x04\xbd{\x1f\xad<\xd9\x11\xd8<\xb1L\x8c<\x85\x81\x9f<\xe8\xb9\xbe=\x883B=8y\x91\xbcF?\xb6<H{\x99<V\x81t<\\i\xa7\xbaI\x84\"\xbc\xec2j<\xc4\x8fj<d\xfaY\xbb\xca\xee\xac==@\xc8\xbc\\,\x88\xbc\xdc\xb1K\xbd\x00]\x87\xbd(o\xd2:-N\xde<4\x9bW:\x9b\xe6\xe4:II\xae\xbc\xc0\x96\x9f\xbc\x7fw =\xc5\x80\xc2\xbb\xbb\xc2\x9a=\x9a\"e\xbb\xfe`\xd9=\a\xb3\xaa\xbd\xe8c\xe4\xbcK\xce\xaa\xbc\x9c\x05\x01\xbc\xe7\x91\x01<QIG\xbd\x03&p< L\xc7\xbbv\xd7E=^#a\xbc;\x8b\xb2<p\x9e\xf3;\x005\xfa\xbc\x11\xb5\xa7\xbc\xccq\xc4=\x01\xe6#=\xbc\xac\x05\xbd\xe8\x01Z=\x8c\xeb\x12=\x10,\x01=[%\x0f\xbd\xd5[\xef\xbcwm\xdf<\xc9\xa9\x88\xbd+\x18\x13;\xe5\x12\x1d<\xede\x03=7Q\xe0<\xd8W\x8a<\xf8\x15\xb7\xbc\x0b\x9d~=;^L\xbd//\x02\xbd\xf0\xb8\x05<\x1em\xd1;;\xa4\xb6;\x16\x9b\x83\xbce\x06M\xbc\x18nT;\xd4N0\xba\xee\x1c\b\xbd\x11\xa7\xe8<\x11\xe0l\xbd\x94\x89I;\x9d\xea\x81=\xd2<\x97:I\x93\x1d\xbd\xb7\x02\x89<|\x91\x9f\xbcy;z\xbb:\xcdM=\xc2\xc4D=+G\xde\xbc\xb9\xdb\xcd\xbc\xc3\x1f1=\x82\xba\xaa;\xaa\x1f\xe0\xbb\xdd\x9b\x1c\xbd\x8b\xdd\x98\xbd\xb0\xa1\xcf\xbc\x8e\xa6\x15=\x04F\xb09 2\xf8<\xa3\x97/\xbd\xc4\xc39\xbdG\xc5 <>\xf8\xfd<I\xfb\x90\xbd\xa4(\x17\xbc8\xaa\x11\xbdeJ2<\xda\x02\xe2\xbb\xc3\x82\xfc\xbcq\x10a=\x91<n\xbc\xfb\xa46\xbd4\xa3&\xba\xfb\x90<<\xc1\x15\x92\xbc\xea~1<\x83=\xff\xbc\x13\x19\xbb<W\xf2\xba\xbc\xe6\xac\xbc<\xc8-'\xbd2\x18\xab=$\xa6\x99\xbcJ\x03\xe9\xbbqb\x96<\x97\x8e\xed\xbb \x88\xf8<]X\xd7<\xf8~J\xbd\xe0 \x1b=\xa6\xa4\xdf<\xf8\x1b\xcc<g\xcd`\xbd\xdb\x0b\xd2\xbc`Y1<\xbb]\x16=\r\xcd\xe5\xbc\xa7\xf7)\xbd\xd66\xaa\xbbB\x90\x92\xbc\x01*M\xbc\xe8\x0fM<|E\xaa\xbd\x8a\xa6\xe1<wd\x06\xbd\xe3\xc3f\xbd\xd6\xad\x05=\xdb6e=\x84]\x93\xbb\xc7\x91\xbe\xba\xbf\x86b\xbd\xe9\x8eU\xbc\xd2Y\xea\xbbp\xd9\x82\xbc\xe8\x03\x1b\xbd}\xed\x80\xbcA\xfcA\xbcG\x98\xf3;?\x9c\x94\xbcFC\xe7;\xdb\xde\x00\xbcdu\x90<\xcasM\xbb,\xbdZ=\xe6Au<\x05>\xac\xbbx\xc4\x1d\xbc\x04\xb8\xf5\xbb\xd0n\x0b=\xa8E0\xbd|[\x03<\x8d\x89\x05=W\xdb\xea\xbb\xf2;\"<\x13\xb8\xa9=9\n\n\xbd\x85\xce\"=OY\x86<kF\x82=R\xc7\x9f\xbc8\xb3\xd3<\xaf]\x13\xbc+\x86\xc6<\x0e\xcd\x82<l\xdd\xdf<\xa6N\x80\xbd\xc9\x02\xc8\xbcK&\x93<\"\xb9X\xbc\xacT\xf0<\x8e^D\xbb\xd1\x0b\x18\xbd6\x0b\xa5\xbdH\xdf\xf4<\x01\xf0\x85\xbd\n\xe3\xbe\xbc\x969^;\x8dNU=\xd4\xdeg\xbb\x97\x14\xae<\x90.\x97=\xc0\x0e\xca\xbc\xf7X\xd6\xbc\xe5\xe9\x89\xbcL\x9d\x0f\xbdv\xd8\xaa=\x05\x1d\x1e\xbdq\xeci=g\xe9f\xbdD\x11\xa9\xbcc\xa2V\xbc(\xc8\x96\xba\x13\x80\xea\xbc\xb6\xdc:=\x15\x01\xc9:An\xf1\xbc$\xe9&\xbc\xc2#\t\xbd\xfd\xae\x1a<\xcc\r\"=I\x8b\x15\xbd\x95\xca\xb1<\x17\x13:\xbc\xa0\xcc,\xbc\xa9\xf0\x06\xbdDrp\xbd\xc1\xd8\x9d\xbcS \"<p\xa1(<\xdd \x06=El\x0e<>\xb2X=\xdd\x94\xab<7\xad\xfa;:\xe3\x9a<\x1f`\x17=`7p=\xda\x87)\xbd\xa0\xa4\xca;\xa2d\x9b\xbb\x1f\xcd*\xbc\xbe\x8c\x06>\xf2I0=s\x1f\xa9<\xe1\r\a=\x8e#\xdc\xbc\xeb\xaa\x1f\xbcUb\xcf\xbc\xf5\xce@\xbd\xb5\xc5\xaf\xbcE\xf4l\xbb\xd3'\xc0\xbc8i&\xbb;\xf4\xa0<\xc5Z\t\xbcj\x17\x01<\xf4\xdf\xbf\xbc\xc8\bT<(\r\x99\xbc\xbf\xde\xc9\xbb\xee\xd5\x9f=\xd2\x0cA=\xbbw/\xbd\x8fjS\xbd\xe4$t\xbc\xa9\xff\xc7<\xd1\xd4\xc2\xbcz\xd7\xfb\xbc\xd9\xd0\xde;\xe8\xd7\x8b\xbc\xc8\x15\xb7<\xaf~\xb89\xeb\xce0<\x80\xca1\xbd1Yr\xbd\xd2A\xf7;\xa7t\xb5\xbc\xe1*@<\x80?u<\x98\x10\x8f=\x84\x18\xfa<\x87\x8cg\xbb\xa9\x00\x8e\xbc\xac\xc1\xf5<\xd5M\xe6\xbc\xca\xd5:\xbc\xd7,\xed<d\x94\x05\xbd%\xb1\x16\xbd$b-=\xa6\xac|;gV1\xbc\a\xa6D\xbc\x8a_\x9a\xbd/\x98\x8e\xbdB7\xa6;\t\xb8\xa3\xbdV_.=\xf8\xabX\xbd\x94\xf1e=\xf4\xf9T\xbd\x8e\x86\x99\xbd\xd8\xb9\\\xbdGJ\n\xbc\xdb\x85\xa4\xbdi\x10\xf7\xba\xa4J\xc2<\xdb1\x94\xbb\x1f\x91B\xbd\xe4\x8c+\xbc\xd1\xe1\xae\xbc\xa3\xb9\x1e\xbd\x9b\x7f\xdb\xbc<.z\xb9\x94\xa3\x1e\xbdw0I\xbc\x87e\xb3\xbc\x8d;e=\t\x8e+=\xe7uG=\xed\xab\xae\xbc\xc0\xd2\x0e=\x94\x15\x95\xbcY\x1a\x17< \x94\xa3\xbaQ\x1c\xc1\xbd\x0e|v=\x13\x8a\xa9\xbc\xaa\xa0\x88\xbcc\xbd\x1c<\xe3\xe7\x03\xbb\x86>@=\x11\xc6`\xbcw{\x1f\xbd\x84\x01\xd7;#\xb1\x8a\xba\xfc7\x9d<=\x83\x8b<%\x8f\xa8<,\x96\x85\xbc\xa6\xc8\x99<\xaes\xd5\xbc\xb53&\xbbt\x1b\x89;\xb2\x89\xaf<\xdf$\x1d<inQ=8\xb0\xaf\xba\x04\x04\x02\xbd\xa7|Y\xbb\xea\x1a\xf6;\xc6?\x96<\xb1\xe0\xea\xbc\xf7\x15\xa9=\x03\xf7\x03\xbd C0;n\x9fF<\x0b\xef\x8d\xba*\xd1\x87<\xd4Q6\xbdX/\xdb<N\r\xf6\xbc\x82j\xa2\xbc2L\xfb\xba\x11\xd0\xfb\xbb,\xe4\x88<\xd0\xa3b=\x04\xc4\xc3;\xeb\xf5><]\xa2\xe4=m\xc1\xa9\xbb]\xd4\xdc\xbd3$\x01\xbd\x01k<=\x0e7m\xbd{I$\xba%\xd3\xf0\xba\x10\x81.\xbd\x16\xe6R<\x92\xc9b\xbc\xea\a\x90:\xfa\xe5\"\xbds)[\xbc@\xa7\xa2\xbb\x05\x919<\x99\xdb\xdc\xbc>\xd9\xa5<b\x874=\x02\xb3\xbd\xbc\xe6\xc4\xde:eL\xc5\xbc3<\x95\xbb\xbd[\xce<\xf99\x17<Fk\xed\xbc*V\x9a:\x1c(\x96\xbdx\x820=\xd7\x84\xf1\xbc|\x90\xc4<\x95}\xf5;6l\xe3<\a\x03\xb4\xbd\x90\xd6\xaf=T\x8e\xb6\xbc\xad\xf3g\xbdio\xf8\xbb\xa7\xeb~\xbc\x0e\x8d\xee\xb9xs\x1f<;\x94\x95<.\xd0!<P\x1d\xba<\xc9B\x1a<V\xd9f=V+\x10\xbd4-#\xbd\xb1\x0f^=\xd7\xc7\xdf\xbcZ\xdd\x00=z\xd5\xc2\xbc\x024\x8b<x\x1b\xb4\xbcs\xdby=1_\x13\xbd~\x04\xef\xbc\x1a\n\x87<\x04wl<\\\x1f\x82;hC\xdd;I0\xe9;A\xa1l\xbbVK\x14=\a\xc0\xa3\xbc\xea*\xad\xbcf\xb5\xf7\xba\x97\x04\xd6\xbc\x9f\xc7L=\xfeS \xbd;\xfe\xcb\xbc\xb0\x0f\x8b<J\x9c'\xbb<\xa7\x0c\xbc\xca\xa8\xae\xbb\x1e\x13\xa2<\xa5@4=\xfaa\";\xfb\xea\x0e\xbd\xc9\x8f&=qJj:\xd8\x87\x9b\xbc\xdfD\x8d=M\x02R\xbd\"\xd1v=\xe3m\xc4<\xca\x1c\\=K\xd2<<%\xb43=\x8c\xcf\x0e\xbd\xb2\xb6\xd0\xbb5Q\x81=\xab\xa2\x13=b\x1bU\xbd\x1b\xd5\x04\xbds\xef\x0c\xbd\xe4v~=\x1f\xd7\xe7\xbcR\x85\xc1;<\xabw\xbd\xf1\x93\x92<#,\xba;a^\x00\xbc\xab\xa0\x85\xbd{x\x8f<\xda\x199\xbctp\x05\xbdY\x949\xbd\xa2`\x84=\xa6\xa0\xed<\x9cAL\xbc\x9b\x8c\xbb=Ein\xbc\xb5k\x93;\x17%=\xbd\xbdh\xcb<\x94\xbb$\xbd\b\xca\xfe\xbc\xde<\xf0<\xf7\xa1\x01=H\xbd\x84\xbd\xded\x05=\x17\x91\xea<\x04\xd11\xbd|*\x14<\x05\xb6?=!pi;\xfc\xa7\x99\xbd\xeeo\x95\xbcA=\xb4<8\xf2\x8c\xbd\x1b\x8c\x9f;\xf6~)= _\x18\xbc\x02]\xf4<?\xe4^\xba\x02)a<\xda!o\xbd\xaa\xe7\xeb<\x18)\xbb<\x02\xc6%\xbd\xc8\xa4\xa3=s\xb1I\xbd\xf3I\x8a\xbb[\xf1K<5\x02\xee\xbc'4T\xbd\xcfz\\\xbd\xaem!\xbd\xa2S\x12=w\xe8\x7f\xbdi\xd7]=KH\xa3=\x9d\xa7\xd1\xbc\xc53\t=\x1e\xac\xf9<\x0f\xff':\"\xe1+=cf\x88<\xb4\x14Q\xbd^ab\xbc\xe1\xbc0<\x1ad \xbc.\x9f\xa099\x10\x0e<\x83\x98\xa4<\x8e\xf4\xc4\xbbX\x97B<\xa9\xf0\x01\xbc`Uq\xbd<\xa6\xbd<\xb9\xda\xca\xbc\x1ad\\\xbd|b\x97<\x11\xe2\xad<\x82\x17\x9b<B  ;\xb5A\xf4\xbc(5Q=\x95\xb4/=V\xc2\xe0\xbc\x8a.\x04\xbd8\xe6\xff\xbcrw\xce<\x1e\xd0\xf5<\xa9\xbf\x1f\xbc\xbf\xcc\xb4;\xd2=\xee\xba IK=\\ak;*\xefA=\x01\xe0\x9a\xbd\xa4w\x94\xbd\xe8\xca\x84=\xc7h\x03=~M\x8e\xbc\xe0V[\xbc\x9ck[\xbc\x14\xa9\xe5\xbcl\xd1>=\xb8\xfe\xb1<(\x02==\xf4\xcf\xe0\xbc=_\xce\xbc?-Y\xbdK~\xc2<\xf2\xff/\xbd\xbb%E=<\xedn\xbd\x99\xd8r\xbc\xc1\xc7\xfa<\xba\x95\x15\xbd\x02Z\xcc\xbc>\xbaK<\x89?\x82<_\xc1L=m^\x98\xbc\xdd\xab\x92\xbc\xd0bI\xbd\x93\xd9(\xbd-^\x8d<\n\x0b\x1f\xbcI\xab!\xbbulc=f\xa8\x7f<\xb2\xc7$\xbd\xda\xa9\x10\xbd\x8e\x85\xeb\xbb\xf5:\x05<\xe3\x1c\x8b\xbd\xc3hM\xbd!\x01\xe4<GZ\xbe\xbc\t2z=\xf0\xb7\x8a<\xa7R\xd8;\x8a\xf7m\xbc\x99,\x99\xbc%}\x0e\xbd&\xd5\x81<\x86\x83t\xbc{\xa3><A;\x00\xbc\x9d\xbd_=\xa0\xcc\x83=t\x1f\x92<\x17\x9b\x93<`\xdb9=" "content" "SUMMARY:\n\n- Redis Stack is a multi-model database that supports multiple data structures and capabilities in a single database, reducing complexity and saving time.\n- The demonstration showcased a real-time stock watchlist application built with Redis Stack, featuring a watchlist, trending stocks, stock charts, and real-time updates.\n- The application utilized Redis Stack's capabilities for storing data in various formats, including sets, hashes, JSON documents, time series data, and probabilistic data.\n- Pub/Sub was used to facilitate communication between different microservices in real-time.\n- RedisInsight provided visual insights into the data structures and content stored within Redis Stack.\n\nEXAMPLE QUESTIONS:\n\n1. What are the key data structures and capabilities employed in the demonstration application?\n2. How does Redis Stack's multi-model nature contribute to the overall efficiency of the application?\n3. Can you explain how sets and hashes are utilized in the context of the watchlist functionality?\n4. What is the significance of storing time series data in Redis Stack for the stock charts and trending stocks features?\n5. How does Pub/Sub contribute to real-time communication and data updates in the application?\n6. What are the advantages of using RedisInsight for monitoring and exploring the data stored in Redis Stack?\n7. How does the application leverage Redis Stack's features to facilitate seamless addition and removal of stocks from the watchlist?\n8. What is the purpose of the top k filter, and how does it assist in identifying trending stocks?\n9. Can you provide insights into the process of updating the watchlist and trending stocks based on incoming trades and bars?\n10. How is the latest trade price retrieved from Redis Stack, and how is it displayed on the stock chart?" "metadata" "{\"id\":\"LaiQFZ5bXaM\",\"link\":\"https://www.youtube.com/watch?v=LaiQFZ5bXaM\",\"title\":\"Redis Stack Crash Course: How to Build Apps with Superpowers\",\"description\":\"Redis Stack turns Redis into a multi\\-model database, enabling you to build rich real\\-time applications with Redis as a primary database. Explore Redis Stack \\- http://redis.info/3Lq9gbF\\n\\nRedis Stack consolidates the capabilities of the leading Redis modules into a single product, making it easy for developers to build modern, real\\-time applications with the speed and stability of Redis.\\n\\nRedis Stack is free and unifies the leading Redis modules in a single product. This makes it easy to start building with our Redis\\-based search, document, graph, and time series capabilities.\\n\\nRedis Stack is a suite of three components:\\n\\n\\- Redis Stack Server combines open source Redis with RediSearch, RedisJSON, RedisGraph, RedisTimeSeries and RedisBloom\\n\\n\\- RedisInsight is a powerful tool for visualizing and optimizing Redis data, making real\\-time application development easier and more fun than ever before\\n\\n\\- The Redis Stack Client SDK includes the leading official Redis clients in Java, JavaScript, and Python.  These clients also include our new suite of object mapping libraries which offer developer\\-friendly abstractions that get you productive with just a few lines of code. Known as Redis OM for .NET, Node.js, Java, and Python, these libraries also make it easier than ever to integrate with major application frameworks such as Spring, ASP.NET Core, FastAPI, and Express.\\n\\nSign up for Redis Cloud for free using code TIGER200: https://redis.info/3pyzVea\\n\\nGet the Source Code for This Video: https://redis.info/36PTesO\\n\\nFrom the Blog: https://redis.com/blog/introducing\\-redis\\-stack/\\n\\nLearn more about Redis Stack: http://redis.info/3Lq9gbF\\n\\n#RedisStack #Redis #RedisEnterprise #RealTimeData\",\"thumbnail\":\"https://i.ytimg.com/vi/LaiQFZ5bXaM/maxresdefault.jpg\"}"
"HSET" "google-video:4" "content_vector" "-\xa9?=\x92\xfa[\xbd\ak\xf3\xbc\xde~\x88<\n\x0b5=n\x9f\x90<\x91c\xe7;\xb6\xc4\xde\xbc\xa3h\xad<R\xea\x80<\xa2<\x8b<`Qt<\x87`\x0091\xbe1\xbc\xab\xb9\t<\xe7\xdf!\xbd\\q\x82\xbc\xed\x80%\xbd\as5\xbc\x0c\x9a\xda;Zy;\xbd\"$*\xbd,\x18\xcb\xb9\xe5j\x9d\xbarK\xed<\x02P\x98\xbcX\xab\xb7<4%-\xbd\xa9K\x0b=bU\x86=\x1f\x0e\x1d\xbd\x12\x0f\x94<%M\x94\xbc\x83\x93\r=,\x19\xda\xbcd\xae2\xbd\xad,\xaa\xbcZ\xd6\x83<\xcf\x91\xbd\xbb}\xaeu=z\xc85=\x18\xc5\xaa<\x1c\x9d0\xbc\xed'I\xbd0\x89D<\x1d\xf0e\xbdS\xdfc<[\xe6\xc8<\xc67\x0b=\xaf\xf0\x98\xbcZ\xd9l\xbdy\x18b\xbdV\x93-=6P2\xbd\xaes\xac<\xbd\x96C<\x19\x0c3<(\a\xeb\xbb\xf7\x15\t\xbcV\xe2$\xbc(\xa2h=\xe4<\x1d\xbcYL\xfd<-\xe4\x93\xbc\x13\xac\xcc;\xcbO\xb7\xbd\xad*Q\xbc\xde\xe0\x9c:\xac\xe6Z=\xdfFe\xbc\x14Al=\xa0\x86\x16<\x1cl\xbe=D\x8c[\xbc\xdfW\x7f\xbd\xe6B\xa7\xbdT%}\xbc/v\x1f=\x10\xd1\x86=\xb4\xa9\x12<\xc36:<\xc1\x9e<\xbd\x13\xb3\x84;I\x9f\"\xbd\x90\xcaN\xbd`d\xd7<\xe6\xedL\xbd\x83\xac\xd3\xbb\x0c\xd1\x19\xbd\xf4\x03 =8\xf5z;\x99(\xc6\xbb=\xe1\xc0\xba\x81Y\x1c\xbdy\x15\x1c;b\xdfX=\x8b\x86)\xbc[\x00a\xbd\xddx\x05\xbdO\x11\x91\xbc\xf5\x01\n\xbb\x81\xc0\x98\xbc\xe1\\\xc6<\xbf\xa3]=W\t]9E\x9b\x9f\xbb\x04f\xfc<\xe4\xe1u=\xba\xa7\xe5;}\xd9\x9e<\x96X\x9d\xbd\xac{\\\xbc.\x0f\x93\xbc\x00\x0b\xab\xbc\xc6\xe2\xdd<\xde6\x0c\xbd;\x8d\xe2<F\xa9\xa5=\xed\xf3\xab<{=\x18=S\xafU=\xfc\xf1\x1f=\x17\x00\x85=\xf1f\x8e\xbc\x87\xe0\x8c;3\xea\xaa:C\xd1+=9\x04\x10=\x80&\x7f=5\xb1\x0b=\xf2\xe4\x9d\xbc\xa7L\x82\xbd~\xd6\xb1\xbc\xb6\x95B:\xbb2s<\xf1\x9c\xff<\a]9=\xf0\xa0\t=v\xfaE=\xc9\xb9h=\x1d\xe4\xa3\xbc*\xa8\xa2<\xde\xf5\x1c\xbdlY\xda9\x96{\xc1\xbbGN\xa3;\x9d\x87\n\xbc\xe2)\xcd<\x81\xc6\xe1<\x84\x05\xc7\xbc\x89\xd3\x11\xbd0G\x8e\xbc$A\xbb\xbd\xb5U\xd0<\xf8\xc5\x87=t'[\xbcJ41\xbc#\x91\x84<H#\xbd<$\x8b\xda<w\xd2i=c[\xd2;\xb5\xd3`\xbc\\\x94\xf6<kS\x10\xbd\xa9\xa5>\xbcf\x82\x14\xbdg]\x10<\xca\x8f!\xbcD\xa9A;h\x87\xf9;\xd5\xc8g</\xe4\x16\xbdc\x03\xdc<n#\xbf\xbc\x8c\xfaU\xbdI\x95\x95\xbcy\xf1b<?\x98\x80\xbck\xb8\x8e\xbb\x94Uu\xbc\xbf[:\xbdr\xf2I<\xee\xa5\x15;\xaeI4=\x01\x8e\xf9<>^\xbf=\xf1U\xc3\xbd\xfc\xb4\xd8\xbc=\x8e\x88\xbc\x9e>\x8c\xbb9\xb9\x97<VBI\xbdM\xd0\x18=\xe6\xab\xdc:\xe7$\x86=\xee.@\xbc\x82\x16<=\xbd4$\xbc\xddpq\xbdh[\xf8\xbc\xd0\x02\x93=;'$=\xfc(K\xbd\xc8\x068=Oc,=\xb8A_<=G\x9b\xbc\x10\xb9\x15\xbd\xd5=\xc7<e\xdb\x0e\xbd\b\xc5*\xba\x82\x00\xd2\xbb\xd2-[=r\xe0\x9c=\\\xa3\x1e\xbc\x95\xee6<\xc0S\x82<\xbc\xd9U<\xb3\xac\xec\xbcIL,\xbc\xce\x82\xa9<\xb8\\%\xbd\xf1\xd7\x0b=L\xa8\xa1\xbc\xbfk!=\xca\xeds=\xb5\xa2\x95;\xf3\x87\x85<\x80\x18j\xbd A\x04\xbb\x8d\"\\=\xc0y\xe8<\x96\x06\xca\xbc\x96M\xff<\x924\x8b\xbc\x0b N=0\xca\x02={\xcc\x82=g?\xcc\xbc\x8b_n<\x1d\bE=\x8b\x1b\xaf<\xd2\x9c\x88<3\xbe\x89\xbc\xb9 \xdc\xbc\xc7B\x02<e\xfd\xd8<^(\xd0<\xa6I\xfe<\xd3\x93F\xbd$\x0e\x15\xbd{\xa8m<\x0b_1=\x81=\xbe\xbdR\x97\x91\xbc@\xa7\x94\xbdC\x0e\xa6<\x0c\x10\x96\xbc\xd6\xa2\xbc\xbc'\x98\n=\x8e\x93\"\xbdw\x14\xd5\xbc\xcc\xcf\xb8\xbc\x16\x94K=<2\xba\xbc\x02V!=\x8cz\a\xbc\xe1\x91=<\x1d\a\b\xbd\x98\x81F\xba\x81\xe6%\xbc\x853\xb1=9\xfc:\xbd\xa7\xc0\xd3<\xc3\xb0D<\xdf\x83\x0f\xbd\xaa*\x1d=\x00\x19\x8b<r\x97@\xbd\x0fB\xf6<E\xec\x81\xbb\x17\xdf\xa3<]\x84|\xbd?\xe1\x0f\xbd\xa9\xa78;\x7f\x92\xf5\xbc\x0b\x92\\<L:\xa8<\xf3K|<_\xc6Y\xbc'\xceY;SSp\xbc.\xd9\xaa\xbd|\xab\xbe\xbb\xd6\x12\xf3<\xebCT\xbd5\xd5\x1a=0\xcc\x98<\x19\\\xa6\xbc\xba\x19\x92:B\xe4\x1b\xbdy\xe4\xaf\xbc\xd1\x93\xcb\xbc\x0bu\xdd<\xc3zQ<\xa7\xfda\xbd+\xfe\xc6\xbc\xbc3\x82\xbc\x11\x81\x03=\x0b\xae\a<~\r\a;\xc3\xec\xe7;]\x18\xf2\xbc~\xde\xb4=n(\xfe<,\x16\x04\xbdx\xad\x82<6\x0c\x10=\xac\xd7\x1b=\xa6\x01\x93\xbc\xbe\xb7\b=\x19\xae,=\x95t\t\xbd\xa5\xe3\xd3\xbc^=S=\x89\xfd\x14\xbd\x86\xdf\x18=$~\x86\xbc?-\x14=\xc0$\xa9<\x9dU\xa4:27\x9b\xbd\xe8T%;p&G=N\xd4.<\xeb\xca\xcf\xbc\xbf\x93\xb2:\x13\x0f\xcf\xbcsHz\xbb\x1f\x84o<A\xc8\x17\xbc\xdc\xa9_\xbd@Cq\xbd0\x04b<\x82\x0cP\xbd\x1dR\x84\xbb\xbe\xfb\x12\xbd\x9a\x88\x83=C\xf1\xc5<\xc8jX<.w\x81<\xdc\xbdl;:\x90?\xbc\x0fs\xcd\xbb\\\xde\xfb\xbb\x11p\x89=\x96\xf3~\xbd\xeb\a\x8d=\x88j\x85\xbdL\xa9\xdc\xbcg[\x87\xbd\xb5\b\xaa<*\xcf\x05\xbdP\xa5\xfe<\x0etT\xbca\xbd\t\xbd\x02\xe6\xf6\xbbTA\x0e\xbd!-\x83;\x8c\xe0\x96<\x82\xbe\x1a\xbd\xea\xff\x88<t2\xfc\xba\xe5\x05\xd6\xb9|\xeb)=V1<\xbd\xb0\xb2\xe8\xbcdo\t\xbc\xe7\xb7N<+\x98\xda\xbc?^\xc3\xbc\xb6\x96\x00=D\xaf\x0b<\x82\xce-\xbcd\xfa~\xbc\xb1mw=\x06\xd9{=Yh\x8d\xbd\xed\xe1\xa1<\r\xc8,=_\xc4A=l!\x1b>\xc7\xf8\xa2;8\xe5y\xbc\x9efF\xbcL\r\x15\xbd\xc7%U\xbc\x97\xf5N<\x864\xd3\xbc\x9b\x811\xbdB7D\xbd\x18\xca\x8f\xbb\xf8\xe6n\xbc\x7f\xec\xfd<\xfa\xc2\xf3\xbc\x13\t\xd9\xbb\x03\xc43\xbd\xd6\x0e\xa6<\xfb\xb6\xed\xbc\xcb\xabV<\x90\n&=\xfb\xf3\xec<\x9a\x82\x9a\xbd6\x1c\xe9\xbc\xad\x14-<\xae\xca\xea;u\xca]\xbd\xaa\x8f\r\xbd\x9c\xea\xc7\xbb.\x15\xb3\xba\xac*5<5my;\x0c\xec\xfc<\xf3\\F;D\x0fL\xbd\xbb\xd8b<\x1e\x8d\xe3;\"\xc4\xd4<a\xb1\x17=w\x93\xa1<\xfc\x99\x87\xbc@\x89\xb4\xbb{i\xa5\xbc\xc3\x1e\xb9;\xc6l\xa5\xbc\xd0\x1d><\x96\x12s=\xdd\x8d\x93\xbc\xab\\\x87\xbdV6\xbb<<j\x86;&~8<\xc6G\xb9;\xd7\x01\x98\xbd\xf7\xf1\xfc\xbc\xabT\xd3\xb9,\xca\a\xbd\xd0\xb3r=\xfc\x8e\xef\xbc\xac 9=\xf85r\xbdI\x99{\xbd\xef\xd1\x9e\xbc\xb3\x8c\n\xbc\x8e\xa7e\xbd\xe4\xb1C<\xd6 \xba\xbb\xbb_u;\x12B\xc7\xbc\x8e\xdaA\xbd\x19\b.\xbd\b F\xbd~+\xd8\xbcJS\xfd<\x1b\xed\xff\xbc }\x85\xbb\xdf\xf2\xc0\xbc\xc4xE=\x93\x11)=\x10/\xae<\x88\xe7\xe9\xbc\x9c\xe8l<\xa5\xe2U\xbc\xbf=\xb1:Qp\xbd\xbb&\xa5\x9e\xbd\xf90\xa5=\r\xef\x92\xbd\xb3\aJ\xbd\xcd\xa4\x01=\xb7\x03\x01=)\x99h=ki*\xbc\xbc\xd6\x16<\xa5x\xb7<\x85'\x9b<\x0cW\x8e<\x8eS\xab<a+\x0b=\x8f\xb4\a\xbbY\xfdu\xbc\xc7Yr\xbd\xe8a5\xbd\x04j\x1d\xbc\x17\x87\r;I@W\xbd\x134u=\a\x98\x8a\xbc\x89\xd0\xef;\x92\xe5\xb3<c8Y=\xe0\xbe\x02=\xa2\x81<\xbc\xf0\x01\x9f\xba\x8a@\x9e\xbdlN\x90=\xcb&\x00\xbch\xca\xba<\xf7\xc9\x06=\x8b\x86}\xbc\x13\xfaK<\xa5\xea\x95\xbc\xd478\xbc\xb0'\xb5\xbc\x12\x12\xf7;\xdd\\\x9d<kl\xd3<l\xd6%<\x8b:Q<g<d=\a_\x88<SW\xa7\xbd\xc2$\xcb\xbb\xc5\x10\xa1=%\xef\xc1\xbd~v\x94\xbc\x11\xb9\xa4<)!W;\x0c\xb1\xe6;\xc3\x05\xf9<\x10z\xc3\xba\xeb\xbd\x1e\xbd\n\b\x95\xbc_\xb0\a\xbc5\xbbh\xbc\x9a\xae\xf0;\x9c\x81\x02=h\xba\r=\x86\xe8\x13=\xfa\x06s\xbc=\x06\x02=\xd1\x83\xf8\xbb\xc8w\x88<\xf7\x9e\x1d=\x80\xc5-\xbc\x19^\xf2\xbc\xb1c1\xbd\x9b\xc8\x04=nf\xd5\xbc\xac\xb4\x1b<\x7f1\x17=\xa6\xbe\x9a<\xb1s\x80\xbdN\x848=d\x16\x0b\xbdm`F\xbd\x95\x8b\xb4\xbc\x8e\x1e\xac;\xcf\xcd\xbe\xbcC\xca\x85<f\xea\xd1\xbbH_\x85\xbb\x18\xfe&<\xa82\x18<\x9fnm=\xa3\x06\xd7\xbcr\xe4\x1d\xbdqU\x17=)\x82\x17\xbd\xc4\b.=4\x18\x9f\xbb\x00\xa9\x8c\xbc\xd0\\F\xbd\xc9Y\x97<\xd1H\xa3\xbdm\xe1\b\xbd\x89\x1a\xb6<-\xb1\xe3;\x1c9&\xbc\n\x95\xf4<W\x0f\x9c<yd\x13<\rl\x8e<]t\x06\xbd\xba\xc50\xbdY\x16==\xd5\x94\x1c\xbdm\xc3\"=\xf2\xee\x8e\xbd~\xd8\x9e\xbcO\t\xdd\xbbk\x9aa<!\xe2)\xbb(>;\xbc\ag\x8d<-\xfd\xa4;m\x82\xd1\xbc\x10i:\xbdUx\x86\xbc\xf4\x06\x8a<\xcc-Z\xbd{\xf0v=\x8b\xac\x10\xbdw\xa24=\x90MV\xbc9\x944=@\xbe\x13=-\x1d\x8d<\xb2Q\xf2\xbc\x9c\xa4\xf4\xbc\xf9\xf8\xe3<G0\xbe<:\xf3t\xbd$\xcfM\xbd\xc0L\x02\xbd\xb5\x01A=a-\xb8\xbaB/\x9e\xbc\xc3s\x9f\xbd\xa6\xab\x9b\xbc\xeeL\x9b<\x197\x97\xbcZ\xe8\x87;3\xbe\x17=vp%\xbc\\\xfd>\xbc\x96\x1b#\xbc\x89\x0eW=\x84FO<\xe7\xbf\xc5<P9\xa2=\xf7\xc1h\xbc\xdb\xa3\xb4\xbc\xb5\xbf-\xbd\x18\xaf,=\xae5\xb1\xbb<\x82T\xbb<;\n=\x92-\xfe\xbc\xc2\"\xcd\xbd\x80\xc9\x8a<\x06\xc8==y:I\xbd\x04\xb7\x1c\xbd\xafXT=\x84r\xa3:\xe1\x81\xa2\xbd\xf0\xaas\xbc\xce\x8f\xfc;\x85\xea>\xbdKc};\r\x87\x18=\x16n\x0f\xbd'`\x8a<\xab\xe2\x0e\xbc\xaf\x8c\xb9<\xce\xb5\xb9\xbcm*\xe6<2\xc1&:\xae\xd6\x11\xbdw\xe7\x86=\"\xbeW\xbd\xff\xb4\xe9\xbcE\xef\x01\xbb\xff\x03d<\xc7]O\xbd\xeeu\xf4\xbc_\x9e\x97\xbd.\xd5\x14=/xU\xbdE\x1a\xad=\xa0\xc5\xa6=<R\xda\xbc!C\xe8<\x17\x14\"=B\xc9\xd8<\x1fd&=b9\xf6\xbc\xb3\x1bg\xbcU\xaa\x18\xbc'\xadU\xbd\x1c\xdfJ<4 j;=\xf7x\xbc\xcfY\x18=\xe5b\x1d\xbd\xa0U\x80=\xf8\xd3\x7f;\xac\tF\xbd\xc6\xe3\xe2<Y\x8a\xe9\xbc\x1b\n\x1b\xbd^X\xda\xb9\x80\xe1\x0e=\x9cG\x98\xbc\x11\x13\xc4;\xea\xe7#\xbc\x80FU=\xdf\xc8\x81=@\xe2+\xbd\xfeGD\xbd{\x19u\xba\x06\xc9\x9a<\xf8\xeb\xe2<\x06\x06i\xbc\xf0\x0c!\xbb2\xe6\xc8<k;\xb5<\x19\xc0?=\xfd\xbc\x88<\x0e\x1a\x80\xbd\xfd7\xcc\xbd\xf4\x80!=\x944\xee<A\xd5\xa3\xbc\x10\xee \xbd\x19\xdc\x14<6\xb4\x1f\xbdv\x99\xc8<V\x9f\xa4=b~\x0e=\xf1>Y<a\xae\x91\xbb\x9aY\x1e\xba\xa8B\x87=\x87e\x1b\xbdNM\x89=\xab}\xaf\xbc\xc7\x91\xf2\xbc&(K=\xd9\xe4\\\xbd\x06\xe9\x87\xb9H\x13\xae9H.N\xbc\xef9\xec<\xb3w\x9a\xbc\x85\xf2\x17=:\x04\x80\xbd\xe4\x95\x8a\xbd\x8c\xd9\xf1\xbb\t\"\xcb<;L\xaf<\xf3H\x96=)\x17\xa6<\xa1\x83c\xbd\x0c\xee\xa8\xbc\x1ar\x06<\xda?\x89\xbb\xeclc\xbd\x8a8\xd9\xbc\xb08\x97;\x88\xbe\x0b\xbcO\x17\xa9<{\xcfU<\x01Q8=q\x84\x84<\xb8\xf7\x05=na\xd0\xbcq\xc67=\xfb\xa4\x8c;{\xf7\x7f<&\xa0\xb3\xbc\x1bD\xdf<8\x11\x0e=yq|<-\xf0\xb6\xbc\x00\xb6\xf6<" "content" "**SUMMARY:**\n\nRedis Time Series is a component of Redis Stack that allows for the storage and analysis of time-series data. It offers fast data ingestion, low latency reads, and various commands for data manipulation and customization.\n\n**QUESTIONS:**\n\n1. What are the key features of Redis Time Series?\n   - Answer: Fast data ingestion, low latency reads, customizable data structure, secondary indexing, and control over data size.\n\n\n2. What is the command to create a time series in Redis?\n   - Answer: `TS.CREATE`\n\n\n3. What are the optional sub-commands that can be used when creating a time series?\n   - Answer: `RETENTION`, `CHUNK_SIZE`, `DUPLICATE_POLICY`, and `LABELS`.\n\n\n4. What is the command to add samples to a time series?\n   - Answer: `TS.ADD`\n\n\n5. What are the different options available for the `TS.ADD` command?\n   - Answer: Timestamp, value, retention, chunk size, duplicate policy, and labels.\n\n\n6. What is the command to update the options of an existing time series?\n   - Answer: `TS.ALTER`\n\n\n7. What are the different options that can be updated using `TS.ALTER`?\n   - Answer: Retention time, duplicate policy, and labels.\n\n\n8. What is the command to retrieve samples from a time series within a specific time range?\n   - Answer: `TS.RANGE`\n\n\n9. What are the options available for the `TS.RANGE` command?\n   - Answer: Start and end timestamps, filter by value, and aggregation options.\n\n\n10. What is the command to create a new time series by aggregating samples from another time series?\n    - Answer: `TS.CREATE_RULE`" "metadata" "{\"id\":\"SzcpwtLRgyk\",\"link\":\"https://www.youtube.com/watch?v=SzcpwtLRgyk\",\"title\":\"RedisTimeSeries Explained\",\"description\":\"Have you ever tried to wrangle data via timestamps but never had the time to do so? Join Justin as we take a stroll down 'in\\-memory' lane with the RedisTimeSeries module.  The RedisTimeSeries module, part of Redis Stack, lets the developer create time series data structures within Redis with the speed you've come to love from Redis. Redis Stack is an extension of Redis that adds modern data models and processing engines to provide a complete developer experience.\\n\\nIn addition to all of the features of OSS Redis, Redis stack supports:\\n\\- Queryable JSON documents\\n\\- Full\\-text search\\n\\- Time series data (ingestion & querying)\\n\\- Graph data models with the Cypher query language\\n\\- Probabilistic data structures\\n\\n00:00 Introduction\\n00:25 What is RedisTimeSeries?\\n00:50 Example explanation\\n01:27 TS.CREATE \\- create a time series object\\n03:01 TS.ADD \\- add to a time series object\\n03:31 TS.ALTER \\- update a time series object's options\\n04:00 TS.RANGE \\- retrieve a range of a time series' values\\n06:06 TS.CREATERULE \\- create rule for a time series object\\n07:48 TS.QUERYINDEX \\- query labels across time series objects\\n08:29 Conclusion\\n\\nLinks: \\nRedis University \xe2\x86\x92 https://university.redis.com/\\nRedis \xe2\x86\x92 https://www.redis.com/\\nRedisTimeSeries \xe2\x86\x92 https://redis.io/docs/stack/timeseries/\\nNeed a Redis Cloud  now? Sign up for a free Redis Cloud Essentials account \xe2\x86\x92 https://bit.ly/3xdTyMR\\n\\nJoin our discord server \xe2\x86\x92 https://discord.gg/redis\",\"thumbnail\":\"https://i.ytimg.com/vi/SzcpwtLRgyk/maxresdefault.jpg\"}"
"HSET" "google-video:5" "content_vector" "\x8b.\xd6<z\xcf1\xbdb\xcd\xcd\xbc|\x99\x1c=\xd7`];\x95\xdc\xcd:\xbf<\x91\xbcO\xa9\x9c\xbc|gC<Fn\xc7<\xf8U\xcf<8MJ<=Q\xd6<\xc8\xfa\xa4\xbb\x9a\x86\x04=~\xb2\x93\xbd\x99n\xbd<\xe0\xb2\x11\xbd\xeai\xc2\xbcIA\xec\xbc\x1bA\xb2\xbdO;\x8a\xbc\xf6n\xcd;\xfa}\xe8;\xb1\xcb\x90;o\x06\x8a<\xcfI\xd8:\xd7g#\xbdK-Z<\xf7\b5=\xa1\xdb\x98\xbc\xc2\n\xc0<yDC\xbd\xa9\x04V<T|\xd1;b\xe1\x0e\xbdy\x87\xaa<*E\xf59\r\xf8\xbd\xbb`\x05\x10=\xa0\xe4\xde<\xd8\x864\xbb=c@\xbc\x18\xb8\x9a\xbc7\x8e,\xbc\x8c\xf5\x91\xbc\"&\xfa<;'4=\t\xa8<=\xefA\xd5\xbd\x11*\xea\xbcT\xfa]\xbc$r\xbc<\xc6\xc1\x13\xbd\xb5\xc0\x8e<\x93(\x94<\xbe\x81\xb0;\xe1o\xe2\xbc\x1c\a\xa1\xbc3D5<\x05y\xc4<M\xd38=\xd0 >=2I\xe8;> \xf9<\xc5\xf5\xe8\xbd%\xcc\x8a\xbc\xbaH\xe5<iED=G!P\xbd\xaep\x95=J\xee\x1d\xbd\xc8o\xae=\\\x98\xe8\xbc\xbe\xc1H\xbd\xb7\xc6\x03\xbeM{\xac<\x02\xdcp<\xba\xcd1=\x18|\xa9<Ef\x82\xbc\xf1\xcbl\xbd\xd7\x06\xcd\xbc\x98\x98\x0f\xbde-G\xbd\x9a\xc8\x9e<\x0e\xbe$\xbdp\xc0\r\xbdB~5\xbd\xe206=O\x8fG\xbcx\xf8\x9a\xbb?\x8d1=\xdb\xe3G\xbd\xbb\x92A<\xd4\x9d\x86=#{\x16\xbd/ \xc9\xbc\xa9\xb4I\xbd&\xef\xac\xbc\x95\xfd\x9b\xbc\xf6\xc7*<(<\xc5<\xb7\xa8\x84;\x14N\xe4<tl\xd4;L^\x9f<\xa7b\xc5= \xef\x81\xbc\x1cI\xab<\xf5Lb\xbd\x1d\xc1\x7f\xbcs\xb7\x0e\xbd\x82Y\xd1\xbc\x9f\xdd\xf5<h\xca\x1e\xbdl\x94\xbc<\xaa\xd2\xc0=\xa6N7=N\xca\xd5<w*I=\x03\x857==UN=\xa1\x95\x91\xbc\xb1\x02\xb3\xbc\x1f5.\xbc\xea\xb8\x0e\xbcy\xf0\x9f<~\xf5\x94=4\\\x01=\a\x0cI\xbb\xcfC\x1a\xbd\xcd=f<\xb9 `=\xa07==f?N=k\xda\"=i\xf3\xd3<\"\x82L=\xcf\xf1X=;\xba\x19\xbc\xb5\x18-\xbbi'\x0e\xbd\xe0\xb0+<\xa8\x17c\xbd>1F<\x1a`\x93\xbcP\b\xa3<Z\x7f\x10\xbd\xf5\x1b\b\xbd\x9ad\x0b\xbd\x1e:\xaf<\xe8O\xa0\xbd\x9d\xfd<\xbb\xff\x8fo<aL\xe8:\xed>\t<&\xba\t<\x1c\xc6W<>\x04;\xbc\x86\xc8w=4\xcd\xa7<\xb0\x82A\xbc\x8d\x81\xf4<\x0b\x19V\xbd@\x06\xc9\xbb\xc2\xde_\xbd,\x9a\x00\xbc\xe4\xea,<\xaa\xb2c<5\x82P\xbc\xec|V=\xd7\xcc^\xbd\xaf\xed,\xbb\xab\x1e\x18\xbd\x89\xed\xd8\xbdQ\x05.\xbd\x89\xc5j:\xd4\xab\x87\xbb\xf1V\x9f\xbczW\xe6\xbc\xbcf5\xbd\xd6+\xc2\xb9\xe7y\xe7\xba\xe9k\x96=Q\x1a\x83<+\x11\xc8=\b\x83\x9a\xbd+Q\xcc\xbc\\Z\x93\xba\xd2\x01\x1e=\xe5\xf3!<\xf3\xbb\xfc:|q\x0e=O\xb7C\xbd\xdd\xd6\x0c=i\x1d\xce<\x13G\x0c=\xbb\x06\xe8\xbb_\x9f\xde\xbc\xc0\a\xf7\xbbj\xe3\xb3=I\x0f\x06=WX\x1b\xbb\x88\xb6\xbf<\xcb\xab)<\xd1<8<\xae\xb9\xcc:q\xfd\x81\xbc\xbe\xa4\x9f<=\xd4\xd8\xbc\xc2/\xd1;\xed\x7f@<g\x0eW<4.\x1d=\x9a\x04h<E\xdc\x9d9\x11_\x03=q~\x16<\x19\xf7\xbe;p\xe1|:\xbaK\x90\xbc\x12\x0f_\xbd\x96nu<\xaf0\x8f\xbc\xa7\x95\x8a<\xaf\xab\xd4<\a4L\xba*z\x1e=)\x946\xbd\xa5\xb9\xa9<#@\xaa<\xd5\xd3\xf7\xbch\xa2@\xbd\xbek\xa5<\xeeA\xdb\xba\xfc\xb4\xcc<\xdd\xdb\b=\xe5\xfe0=\xc54P\xbd\x85\x1fD\xbb\xf52\xf9<z\xc0\x02\xbd\xda\x10*=\x16y\x0b\xbd\xeaa\x12\xbd-t(=\xe5|B<g\xb5\xe0;\xdc\x9d\xec<#I\x0c<}!!\xbc\xeaS\xab<G\xdf\xcb<\x87:\xb2\xbd\a\xeb(\xbdJ\xb1\x1f\xbd\xf1\xbb\x96=Z\x18\xe1\xbc\x17\x92\xbf<iY\x89<\x13\x1b\xfc\xbc\"\xc7\x1a\xbdFG\xce;0\xfa\xdb;\xeaYN\xbc5\xb0\xf3<T\xf3\x8c\xbb\xb8\x05j<\xd2\xc0\x94;\x88\xfcr<\xb3l\xa3\xbc\xff\x7f\x83=]\xa0\xa9\xbb\xf8\xcf\xdc;\x91\xc3=\xbc\x0b\xc9\x0b<&w\x15=\xed\xa9L<\x17\xda\x98\xbd\x80\x06w<\xd7\aO\xbcA\x04\x9d<pS,\xbd5\xfeH\xbd\r\x8e\xdc\xbc\xd3\xdfg\xbd\xd1\x17\xef\xbc>|\xf6\xbckF\b\xbd6\x11\x06\xbd\xf8\xedo\xbc\x8f\xe3\xcb;\xeb\x1c\xab\xbdV\xaeP<\x91jA=\xea\x85\xb9\xbc;\x1d/=F\x8b\xda<\xcd\x9f\xa6<'\xd3.<\xd0vb\xbd\x1bT-\xbd\xa8\x13\x89\xbd\xb3\xb6\x05=q\x90\xa2\xbc\t\x81M\xbd\xc2\xf1\x1d\xbd\xab\x0e\x15<\xb3\xc2\x0b=\x99\xe7\x84<\xf1x'\xbc+\xe7\x1a;\x1c\xe2)\xbc~\x02R=\xfcKI=\xb3\xb7\xfa\xbcf_+<\xf3\x84\xf4;P\x1b\xf3<\xbf'\t\xbd\x96\xa7!=\x9c\x18\x19=\x8a\xe4o\xbc{\xc5\xb5\xbc\xcex]=\x1c\xa6\x82\xbd%L\x05=$\xe0'\xbc\xd3\x16v;\x9c\xc9`<?`\x8c\xbc\x9fSM\xbd~\xfcL\xbc\xc3\xba\xe4\xbb\xe9\x10\x82\xbc\x18^\x85\xbc=\xc8\xb3\xbc|~\xe5<\xa1\x14\x8d\xbc0>\x8a\xbc\x8e\xe70<\xe6Vt\xbdO4d\xbd\xd8\x9e\x8a<Ub\x7f\xbd\x1f\x97\xe0\xbb$B<\xbc\x1b\xbb^=\xe6\x05*\xbb\xf8\x15\x9d\xbc\x9c\x93\x12=\xc8\xf2_<\xfa\x1d\xe0\xbc\x0b\xee\xd59Z\x96\xb9\xbb\x1b\x0b\x8b=\x03'E\xbdG\xebr=o\xd9\xa8\xbd\x10\xf3 \xbd<\xbeT\xbd\xca\xed\xeb<C\x7f\x06\xbd\xf2\xb7<=\x1b\xa6w;\x05\x7f&\xbd%\xf3\xd2<\xad\xc1u\xbb\xe2\x1f\x0e;\xe2?\xc7<\x8aC\x84\xbc\x1be\x0b=\xfd/^\xbci\"$\xbc\r]d<\x9c\xac\xa9\xbc\x9d\x8a\x01\xbc\xbb\"\xed<\xb8\xb3\xc6\xbb\xc1d.\xbd\x1e+F\xbc\x10\xef\xa0=\x9d\xaa\x8c=\xdeno<S6)\xbc\x04\xb0`=z\x1f\x81=\xd6\xd8\xa1\xbd1\x16'<\x9e\b\xeb<h\xf8]=\x16\xc1\xe9=.K\x93<\xa4B\x82\xbb\x82p\xcf\xbc\x15d\xfe\xbc\x9f\x8c*<\xdf\x06<\xbcLV\x00\xbd\xde\xad\x9d\xbc\xde\xa5\xfe\xbc\x12g\a\xbdn\xd2\xde<\xaf\x84\xb9<\xb4)6<\x8c\xaf\x94<w(e\xbd\x0epN\xbc\x7f\xc8\xc5\xbc\xacRK<\xf7\xd3\x13=;\xdc\xb4<\xd9\x04W\xbd)\xb8\xa0\xbcl\xa8d;\x90i\xa7;U\xc2\x05\xbdX\x946<K\xce\xab\xbb\xadwN<\xd6\xa6\x12\xbb\x9b\r\a\xbc`\xc1\xe2<\x0c\xfa\xbe\xbc\x05\xf5\x8e\xbd\xb1\xf5\xca;\xb1\xe3\xfe\xbcP\x8b\t<\x17\xc1h=\x9do\xd4<\x18\xc8\xfe\xbar\x18\xaf<z\xe5\xa9\xbcmu\x00<\xa3\xa4K\xbd\r\xbe!\xbc\xec\xb0?=Tt\xdf\xbc;m\xb8\xbdX::=\x9cL \xb9\xcaHA;p\x93\x8a\xbcN\x98!\xbd\xf0\x8d\t\xbd\x9f\x95\xc7;tE\xd0\xbc\x98\xca?=*=J\xbd\x8d\xc6\x95=\x80d\xd1\xbc\xad\xf9{\xbdiSs\xbdZ\xc5\xab<\x15\xaf\x10\xbd\x97\x98\x01=Q?\x06\xbdde\xeb\xbcy-(\xbd\x81\\'\xbc/C\x06\xbc\n\x7f\xa1\xbd&\xe51\xbdQ\xe6\xc2<\x87]&\xbb\xdf4\x9e<y\x11x\xbc\n\xe2\x93<E\x18%=\xefv-<\x0c/\x8c\xbb\xf8I\xfc<\xa3\x8b\x91\xbc_}\t<\x18\xa2\x9d\xbb\\\x14I\xbdP\xa4G=\xfdjw\xbd}T!\xbd\x19`\x9d<\x0b1\x87<x#\x8f=\xabG=\xbd@\x01\xbb<\x1c\xf8\xbd;\"\x90\b\xbc\xf2\x9c\"\xbc\xe8.\x80;\xf6$S\xbci\x0e\xd1\xbc2m\xe1<\xc7\xd0\b\xbd\xbf\xf66\xbd\xa9K\x1f\xbb\xf1\x8a\xe1<MD\x12\xbd\x8e\xed#=^\xd0\x17<(z\xc1;\xf7'\r\xbc\x87\xec\x87=\xf6\xe9V=G|\x95:\xfcw\xc4<\xfa\xbd\xc4\xbd\xf0W\x0f=\x81\x1d\xa5\xbb>t\xa2<\x0c\xdc?=\x01}\x0f;A\a\x99<\x15^-:\xfc:\x0b\xba\xd2\xbaU<=\xc2\xe0\xbb\x8c\xb9\x8e<K\xc4o<&\xc6(<hZ,=\xf2r\x88=<\xedU<M4\xce\xbd\xec\xb3\xaf<w\xaa\xb1=\xd1-\x8e\xbd^&:;\x1f\x13\r<Y\xa5\xe2\xbc\xb6\x82N<\xa3<X<\xb0\x9c\xab\xbc!\xe5\x81\xbd\xba\xdb\xb4< w\x82\xbcG\x86\x13\xbd\xa7a\x9a\xb9\n\xcc\x889\xc1q\xaf<\n\t~<\xab\xd1\r\xbd\x83\xb2\x01=O\xcb\xaa<\x88D'<\x83D\xd4<e\xd2(\xbd\xa3/,\xbd4\xa1\x8b\xbd\x1e\xd3M<i\x05#\xbd\x92\x9aI\xba\xd8K\xec<7\xd68=\xb4\xf3{\xbd\xe6\x9eE=\xcf2P\xbd\xfe\x7fB\xbd\x02\xe4\x82\xbc\xaf\xea\xfa<W\x92\x84:UK\x8c;\xcbGV=~@O</?\x13\xbc\xbb\xd9\x92<\xca\xa9\xa7<\x96\xc85\xbc\xe0bW\xbd\xd0\x91\x94=4\x12~\xbd\x9f\xdc\x0e=\xf6u\xe5\xbc\x1a\xb4\xb0:\x14\xcc\x04\xbc\x1f\xcf!=c\x81\xb0\xbdTRe\xbc\xda[V\xbcj!D\xbc\xf7\x98W\xbc\x9en\xd5<\x03\x82\x16=\xce\xe9\xd9\xbb\xa3\xbfj=\t\xf50\xbd/\x83\x8d\xbc\x80F\x0b<\xbc\xf8D\xb9\x85\xf2t=\xbf\xa1\x14\xbdla0:\x11\xcf\b=\x1b\xba\x0f;\xeb\x9f\xc9\xbbO\xd2\xf6\xbc{l\t=QU9=\x97\xff3\xbd\x9fLL\xbd\xd0k\x8b<\xdd\xe0\x9a<\xc37T\xbd\xab\x13#=\xad\xb8F\xbd\x8e\xf2>=u;h<\xd7/\x0e=c\xbf6;\xba\xabd=\x1f\xd3s\xbcr\xe0C\xbdA\x91k\xbc\xc5\x18\xba\xbbz@\x06\xbd\x94\x8bL\xbdU\xa9\x0e\xbd\xb1y\x8d=#8=<d\x94\x04\xbd01a\xbdWo\xa1;\x1e\xd6\xab<\xa8\x19x\xbc\"Z\x85\xbc\xe1\xaf\x00\xbaduG<\x13 \xc5\xbbe%;\xbdXXf=\xd6r\"=\xbd\xdc\xa8\xbb3\xae\x03=\xe2<\xb2<\xd6\xfdo9\x9d\x98(\xbd~\x7f\xcd;~M%\xbd\xdd\x9b$\xbc\xf1\x1c^=\xfc\x94\xf5\xbb\x0bP\x91\xbd\x11e\a=\x89\xb87=c\x04L\xbd\x02\x02\xea\xbcm\x11H=b1\xe0\xbb\x91\xb0L\xbdx\xd7\b\xbd '\xa6\xb9;\xab\xa9\xbd\x03\x83\xde\xbc\xe5M\x0e=\x1b~\x1e\xbd^\x1c\x1d=\xecAZ\xbc\xdeE\x88=\x96}\x05\xbc\x7fC\"=\x1b;};\xa6k\x00\xbdn!r=\x94\xad\x06\xbcb\x12\x1f<2o\x91<\xcb\xa2 \xbc\xfb\xf0|\xbd8\xd9)\xbdh\xbfT\xbd\xe5\xcf\a=\x88\xac\x8d\xbdRq\x9d=\xa8\xb2~=\xdb\x04\x8b\xbb\xacaZ=K\xf4\x03=WqL<\x90A{=\x9e\xe9\x03\xbd2{\xa7\xbc\x8d\xe9\xb9;\t\n\xe7\xbc\xda\x96_\xbce\x92\xef\xbc\n~\x0b\xbb\xf4\x19 </h\x0b\xbda7\xea<\x12\x9b\xad\xbc,\x0f\xc5\xbc\xd4\xfb\xd5<\x93c\xce\xbc\x83>j\xbd\x81\xda\xea\xbb\x88&#=w\x8e\x17<\x9aN\xb9:\x0f ^\xbc\x90\xc5C=\x1a\xcb\xe1<\xc1\xc8!\xbd\xd5@\x1e\xbdG\xad}\xbc>\xe0+=\xa5\x92\xdc\xbb\xfe B\xbcr$\xcb;qi\xe0;*\xb2\x05<\xa2\x8f\xc7<4\xe6\xcc:\x14\xb4\x1c\xbd\xa0~ \xbdG~\x0f=\xd7LY=^{\xb9\xbc\x80\x94*\xbd\x19WZ\xbc\xd2\xeb>\xbd\xa8\x83\xa5\xbc\xab[\x8c=\x0b\xaa@=\x17\x9bG\xbb\x0c\xb3v\xbd\xe2\xed4\xbc`\xbby=\xab\xa8\x12\xbc\x12\x03\xba=%\x1d::Wf\x94\xbceR\x81=]'s\xbd\xa7\\U\xbc\x0bs\xdf<\x01\xd8r\xbc\xaf\x86k=\x0e\x84\xd4\xbc)\x03\xdb\xbb\xc4Ps\xbd\xcc3\xdb\xbb\x9e\x81'\xbc\xa7zd\xbb\x9c;=<-\xd4\x8c=\x8c\xb9P\xbcn\x84e\xbd\x14\xa0\x91;\b\xca\x12\xbc\xf4\x161<\x8e\x7f4\xbd\xca\xda\xa1\xbcH\xd4\x1c\xbc\xd7\x0f\x90<,2T<z\xe5#=`\xc59<.\xa2\xc9;@\xd2C;\x0f\x9ba\xbc\x02\x01\x8e<\x1e\x8e\xd0\xbc\xac\xccb<\xb3\x0f\x0b<\xf1\xa4A=M\xa2C=\tm\x95\xbb\xd4\a\xcd\xbc\xe8\x8d\xc0=" "content" "**Summary:**\n\nRedis Streams is a data structure in Redis that allows you to capture, manage, and make sense of large and constantly moving volumes of data. It provides a way to store and process data streams, which are series of events or records generated continuously from various sources.\n\n**Example Questions:**\n\n1. What is the main purpose of using Redis Streams?\nAnswer: To capture, manage, and make sense of large and constantly moving volumes of data, such as streaming data from social networks, website analytics, sensors, and IoT devices.\n\n\n2. What is a stream in Redis?\nAnswer: A stream is a data structure that behaves like an append-only log. Once added, an entry in a stream is immutable. Each entry has a unique ID and a set of name-value pairs.\n\n\n3. How does a producer add entries to a stream?\nAnswer: A producer adds entries to a stream using the XADD command. This command assigns a unique ID to each entry, ensuring that entries are ordered as a time series.\n\n\n4. How can consumers read entries from a stream?\nAnswer: Consumers can read entries from a stream using commands like XRANGE, XREVRANGE, and XREAD. These commands allow consumers to retrieve entries based on time range, ID range, or by blocking until new entries are added.\n\n\n5. How to handle the constant growth of a stream?\nAnswer: Redis provides trimming strategies to manage a stream's memory usage. You can use the XTRIM command to trim the stream to a specified length or use the MAXLEN option in the XADD command to automatically trim the stream while adding new entries.\n\n\n6. What is the difference between XRANGE and XREVRANGE commands?\nAnswer: XRANGE returns entries in ascending order of their IDs, starting from the specified start ID and ending at the specified end ID. XREVRANGE returns entries in descending order of their IDs, starting from the specified start ID and ending at the specified end ID.\n\n\n7. How does XREAD differ from XRANGE and XREVRANGE?\nAnswer: XREAD is a blocking command that waits for new entries to be added to the stream before returning any data. It allows consumers to continuously consume data from the stream without the need for constant polling.\n\n\n8. What are common use cases for Redis Streams?\nAnswer: Redis Streams are commonly used for real-time data processing, event processing, IoT data collection and processing, social media data analysis, and log aggregation and analysis.\n\n\n9. What are some advantages of using Redis Streams?\nAnswer: Redis Streams offer advantages such as scalability, low latency, high throughput, and the ability to handle large volumes of data. It also provides features like stream trimming and consumer groups for efficient data consumption.\n\n\n10. How can I learn more about Redis Streams?\nAnswer: You can check out Redis University's free online course on Redis Streams, as well as the official Redis documentation and tutorials, for more detailed information and examples." "metadata" "{\"id\":\"Z8qcpXyMAiA\",\"link\":\"https://www.youtube.com/watch?v=Z8qcpXyMAiA\",\"title\":\"Redis Streams Explained\",\"description\":\"Redis Streams allow us to aggregate numerous sources of information into one easily consumable source of truth. Join Justin as we learn about the utility and power of the Redis Streams data structure.\\n\\nLinks: \\nRedis University \xe2\x86\x92 https://university.redislabs.com/\\nRedis University Streams Course \xe2\x86\x92 https://university.redislabs.com/courses/ru202/\\nRedis Labs \xe2\x86\x92 https://www.redislabs.com/\\nRedis Streams Introduction \xe2\x86\x92 https://redis.io/topics/streams\\-intro\\nNeed a Redis cluster now? Sign up for a free Redis Cloud Essentials account \xe2\x86\x92 https://bit.ly/2wasiCa\\n\\nJoin our discord server \xe2\x86\x92 https://discord.gg/redis\",\"thumbnail\":\"https://i.ytimg.com/vi/Z8qcpXyMAiA/maxresdefault.jpg\"}"
"EXEC"
"SADD" "google-video-vectors" "FQzlq91g7mg"
"SADD" "google-video-vectors" "I-ohlZXXaxs"
"SADD" "google-video-vectors" "KUfufrwpBkM"
"SADD" "google-video-vectors" "LaiQFZ5bXaM"
"SADD" "google-video-vectors" "SzcpwtLRgyk"
"SADD" "google-video-vectors" "Z8qcpXyMAiA"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "openai.summarize.docs" "message" "Summarizing https://www.youtube.com/watch?v=FQzlq91g7mg" "meta" "{\"id\":\"FQzlq91g7mg\",\"link\":\"https://www.youtube.com/watch?v=FQzlq91g7mg\",\"title\":\"Redis + MySQL in 60 Seconds\",\"description\":\"What are the possibilities for MySQL when integrating with the real-time power of Redis? Try Redis Cloud for free: https://redis.com/try-free/\\n\\nMySQL is open source, free, and can be fast when working on a relational database, but to handle modern use cases, your MySQL will need a boost of real-time performance - the type Redis Enterprise can provide. MySQL can be difficult to scale and lacks the modern features necessary to quickly operate complex queries. Enable your MySQL applications with the real-time performance power of Redis.\\n\\nFrom the blog: https://redis.com/blog/3-reasons-your-mysql-db-needs-redis/\\n\\nDownload our MySQL Solution Brief: https://redis.com/docs/modernize-your-mysql-database-with-redis-enterprise/\\n\\nExplore Redis + MySQL: https://redis.com/comparisons/redis-enterprise-and-mysql/\\n\\nTry Redis Enterprise Cloud for free: https://redis.com/try-free/\\n\\n#MySQL #SQL #Redis\",\"thumbnail\":\"https://i.ytimg.com/vi/FQzlq91g7mg/maxresdefault.jpg\",\"location\":\"openai.summarize.docs\"}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "openai.summarize.docs" "message" "Summarized https://www.youtube.com/watch?v=FQzlq91g7mg:\n ### Summary:\nThe video discusses the limitations encountered with scaling MySQL databases for high-performance applications, highlighting that MySQL, although popular for being free and open-source, tends to slow down significantly with increased data volume, especially when running secondary indexes. To address these challenges, the video introduces Redis Enterprise as a viable performance solution that works in tandem with MySQL. Redis Enterprise is described as the world\xe2\x80\x99s leading real-time data platform, capable of storing critical and commonly accessed data in memory to provide sub-millisecond speed. It also offers an effective way to offload secondary indexed queries, thereby enhancing response times and mitigating scaling difficulties associated with MySQL. Viewers are encouraged to attend a webinar to learn more about integrating MySQL and Redis Enterprise.\n\n### Example Questions and Answers:\n\n**Q1: Why does MySQL become slow when scaling?**  \nA1: MySQL tends to slow down with increased data volume and complexity, particularly when running secondary indexes, due to its architecture as a relational database.\n\n**Q2: What is Redis Enterprise?**  \nA2: Redis Enterprise is described as the world\xe2\x80\x99s leading real-time data platform, which enables the storage of application's critical and commonly accessed data in memory, delivering it with sub-millisecond speed.\n\n**Q3: How can Redis Enterprise improve MySQL performance?**  \nA3: Redis Enterprise can be used in conjunction with MySQL to offload critical and commonly accessed data as well as secondary indexed queries. This approach enhances response speeds and alleviates the scaling challenges inherent in MySQL.\n\n**Q4: Are secondary indexed queries a reason for MySQL\xe2\x80\x99s slow performance at scale?**  \nA4: Yes, secondary indexed queries are particularly problematic as they significantly slow down response times when MySQL is scaled.\n\n**Q5: Where can I learn more about using MySQL with Redis Enterprise?**  \nA5: The video recommends attending a webinar, which is detailed in the information provided below the video, for those interested in learning more about integrating MySQL with Redis Enterprise.\n\n**Q6: Can Redis Enterprise be considered a substitute for MySQL?**  \nA6: No, Redis Enterprise is suggested as a supplementary solution to be used alongside MySQL, enhancing its performance rather than replacing it." "meta" "{\"summary\":\"### Summary:\\nThe video discusses the limitations encountered with scaling MySQL databases for high-performance applications, highlighting that MySQL, although popular for being free and open-source, tends to slow down significantly with increased data volume, especially when running secondary indexes. To address these challenges, the video introduces Redis Enterprise as a viable performance solution that works in tandem with MySQL. Redis Enterprise is described as the world\xe2\x80\x99s leading real-time data platform, capable of storing critical and commonly accessed data in memory to provide sub-millisecond speed. It also offers an effective way to offload secondary indexed queries, thereby enhancing response times and mitigating scaling difficulties associated with MySQL. Viewers are encouraged to attend a webinar to learn more about integrating MySQL and Redis Enterprise.\\n\\n### Example Questions and Answers:\\n\\n**Q1: Why does MySQL become slow when scaling?**  \\nA1: MySQL tends to slow down with increased data volume and complexity, particularly when running secondary indexes, due to its architecture as a relational database.\\n\\n**Q2: What is Redis Enterprise?**  \\nA2: Redis Enterprise is described as the world\xe2\x80\x99s leading real-time data platform, which enables the storage of application's critical and commonly accessed data in memory, delivering it with sub-millisecond speed.\\n\\n**Q3: How can Redis Enterprise improve MySQL performance?**  \\nA3: Redis Enterprise can be used in conjunction with MySQL to offload critical and commonly accessed data as well as secondary indexed queries. This approach enhances response speeds and alleviates the scaling challenges inherent in MySQL.\\n\\n**Q4: Are secondary indexed queries a reason for MySQL\xe2\x80\x99s slow performance at scale?**  \\nA4: Yes, secondary indexed queries are particularly problematic as they significantly slow down response times when MySQL is scaled.\\n\\n**Q5: Where can I learn more about using MySQL with Redis Enterprise?**  \\nA5: The video recommends attending a webinar, which is detailed in the information provided below the video, for those interested in learning more about integrating MySQL with Redis Enterprise.\\n\\n**Q6: Can Redis Enterprise be considered a substitute for MySQL?**  \\nA6: No, Redis Enterprise is suggested as a supplementary solution to be used alongside MySQL, enhancing its performance rather than replacing it.\",\"location\":\"openai.summarize.docs\"}"
"SET" "openai-video-summary:FQzlq91g7mg" "### Summary:\nThe video discusses the limitations encountered with scaling MySQL databases for high-performance applications, highlighting that MySQL, although popular for being free and open-source, tends to slow down significantly with increased data volume, especially when running secondary indexes. To address these challenges, the video introduces Redis Enterprise as a viable performance solution that works in tandem with MySQL. Redis Enterprise is described as the world\xe2\x80\x99s leading real-time data platform, capable of storing critical and commonly accessed data in memory to provide sub-millisecond speed. It also offers an effective way to offload secondary indexed queries, thereby enhancing response times and mitigating scaling difficulties associated with MySQL. Viewers are encouraged to attend a webinar to learn more about integrating MySQL and Redis Enterprise.\n\n### Example Questions and Answers:\n\n**Q1: Why does MySQL become slow when scaling?**  \nA1: MySQL tends to slow down with increased data volume and complexity, particularly when running secondary indexes, due to its architecture as a relational database.\n\n**Q2: What is Redis Enterprise?**  \nA2: Redis Enterprise is described as the world\xe2\x80\x99s leading real-time data platform, which enables the storage of application's critical and commonly accessed data in memory, delivering it with sub-millisecond speed.\n\n**Q3: How can Redis Enterprise improve MySQL performance?**  \nA3: Redis Enterprise can be used in conjunction with MySQL to offload critical and commonly accessed data as well as secondary indexed queries. This approach enhances response speeds and alleviates the scaling challenges inherent in MySQL.\n\n**Q4: Are secondary indexed queries a reason for MySQL\xe2\x80\x99s slow performance at scale?**  \nA4: Yes, secondary indexed queries are particularly problematic as they significantly slow down response times when MySQL is scaled.\n\n**Q5: Where can I learn more about using MySQL with Redis Enterprise?**  \nA5: The video recommends attending a webinar, which is detailed in the information provided below the video, for those interested in learning more about integrating MySQL with Redis Enterprise.\n\n**Q6: Can Redis Enterprise be considered a substitute for MySQL?**  \nA6: No, Redis Enterprise is suggested as a supplementary solution to be used alongside MySQL, enhancing its performance rather than replacing it."
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "openai.summarize.docs" "message" "Summarizing https://www.youtube.com/watch?v=I-ohlZXXaxs" "meta" "{\"id\":\"I-ohlZXXaxs\",\"link\":\"https://www.youtube.com/watch?v=I-ohlZXXaxs\",\"title\":\"Redis and JSON  Explained (Revisited)\",\"description\":\"Hungry for more Redis and JSON tips and tricks? Check out this video from Redis on how to create and update JSON documents in a Redis Stack instance! Then create secondary search indexes with Redis and Search to query Redis for some delicious results!\\n\\n00:00 Introduction\\n00:32 Why we use Redis Stack\\n00:44 Intro to the use case\\n01:22 JSON.SET truck:42 - create and store a vendor JSON object\\n02:00 JSON.SET location:23 - create and store a location JSON object\\n02:21 JSON.SET event:11 - create and store an event JSON object\\n02:47 JSON.ARRAPPEND - ad an element to an existing JSON array\\n03:11 JSON.SET - adding to an existing JSON document\\n03:52 Redis Search & JSON\\n04:46 FT.CREATE - creating a search index for \\\"truck:\\\" JSON documents\\n05:55 FT.SEARCH - query for text within a search index\\n06:40 FT.SEARCH - query for TAG words within a search index\\n07:10 FT.CREATE - creating a search index for \\\"event:\\\" JSON. documents\\n07:51 FT.SEARCH - query for numeric range within a search index\\n08:26 Conclusion\\n\\nLinks: \\nRU204: Storing, Querying, and Indexing JSON at Speed: https://university.redis.com/courses/ru204/\\nRedis University \xe2\x86\x92 https://university.redis.com/\\nRedis \xe2\x86\x92 https://www.redis.com/\\nRedis Stack \xe2\x86\x92 https://redis.io/docs/stack/\\nRedis and JSON \xe2\x86\x92 https://redis.io/docs/stack/json/\\nRedis and Search \xe2\x86\x92 https://redis.io/docs/stack/search/\\nNeed a Redis Cloud now? Sign up for a free Redis Cloud Essentials account \xe2\x86\x92 https://bit.ly/3xdTyMR\\n\\nJoin our discord server \xe2\x86\x92 https://discord.gg/redis\",\"thumbnail\":\"https://i.ytimg.com/vi/I-ohlZXXaxs/maxresdefault.jpg\",\"location\":\"openai.summarize.docs\"}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "openai.summarize.docs" "message" "Summarized https://www.youtube.com/watch?v=I-ohlZXXaxs:\n ### Summary:\nThe video introduces significant updates to Redis JSON that enhance the efficiency of querying and indexing JSON documents in Redis. It employs a practical example involving organizing food trucks in Oakland to demonstrate these enhancements. The Redis Stack instance, equipped with JSON, indexing, and query capabilities, and the RedisInsight GUI are used throughout the demo. The presenter shows how to create and manipulate JSON documents for food trucks, events, and locations, focusing on the use of JSON path syntax for querying.\n\nThe video further explores the integration of RediSearch with Redis JSON for indexing and querying JSON documents. This feature allows for sophisticated searching capabilities through JSON data, such as searching by vendor name, cuisine, event location, and the number of attending food trucks. The process involves creating indexes on specific fields within the JSON documents and demonstrates how to perform searches using these indexes. The video concludes with an invitation to learn more through a Redis University course and to try Redis Stack either by downloading it or provisioning an instance in the cloud.\n\n### Example Questions and Answers:\n\n**Q1: What functionality does Redis JSON now offer for JSON documents?**  \nA1: Redis JSON now offers the ability to efficiently query and index JSON documents.\n\n**Q2: Can you name the tools used in the video demonstrations?**  \nA2: The tools used are Redis Stack and RedisInsight, the Redis GUI.\n\n**Q3: How is a new vendor JSON object inserted into a Redis instance?**  \nA3: A new vendor JSON object is inserted using the command `JSON.SET` followed by a key name, the root path ($), and the JSON document.\n\n**Q4: How can one search for a specific vendor by name using RediSearch in Redis JSON?**  \nA4: To search for a specific vendor by name, use the command `FT.SEARCH` with the index name, and specify `@name` to search within the name field, followed by the search term.\n\n**Q5: What is the purpose of creating indexes on JSON documents in Redis?**  \nA5: Creating indexes on JSON documents allows for efficient searching and querying over a collection of documents based on specific fields.\n\n**Q6: How is an index created for searching food trucks by their cuisine in Redis JSON?**  \nA6: An index for searching food trucks by their cuisine is created using `FT.CREATE`, specifying the key prefix and schema to index the cuisines array within the vendor object as a tag search type.\n\n**Q7: What is the command used to find events with a specific number of assigned vendors?**  \nA7: To find events with a specific number of assigned vendors, use the command `FT.SEARCH` with the index name, specifying `@assigned_vendors` and the desired range of vendors in square brackets.\n\n**Q8: How are JSON documents representing locations and events manipulated in Redis JSON?**  \nA8: JSON documents for locations and events are manipulated using `JSON.SET` for insertion and `JSON.ARRAPPEND` for appending data to arrays within the JSON objects.\n\n**Q9: Why might someone want to use Redis Stack and RediSearch for organizing food trucks in a city?**  \nA9: Redis Stack and RediSearch provide powerful tools for organizing food trucks by allowing efficient storage, querying, and indexing of JSON documents related to vendors, locations, and events, enhancing the ability to manage and retrieve data efficiently.\n\n**Q10: Where can one learn more about storing, querying, and indexing JSON in Redis at speed?**  \nA10: More information can be found by enrolling in the Redis University course RU204, which focuses on storing, querying, and indexing JSON at speed." "meta" "{\"summary\":\"### Summary:\\nThe video introduces significant updates to Redis JSON that enhance the efficiency of querying and indexing JSON documents in Redis. It employs a practical example involving organizing food trucks in Oakland to demonstrate these enhancements. The Redis Stack instance, equipped with JSON, indexing, and query capabilities, and the RedisInsight GUI are used throughout the demo. The presenter shows how to create and manipulate JSON documents for food trucks, events, and locations, focusing on the use of JSON path syntax for querying.\\n\\nThe video further explores the integration of RediSearch with Redis JSON for indexing and querying JSON documents. This feature allows for sophisticated searching capabilities through JSON data, such as searching by vendor name, cuisine, event location, and the number of attending food trucks. The process involves creating indexes on specific fields within the JSON documents and demonstrates how to perform searches using these indexes. The video concludes with an invitation to learn more through a Redis University course and to try Redis Stack either by downloading it or provisioning an instance in the cloud.\\n\\n### Example Questions and Answers:\\n\\n**Q1: What functionality does Redis JSON now offer for JSON documents?**  \\nA1: Redis JSON now offers the ability to efficiently query and index JSON documents.\\n\\n**Q2: Can you name the tools used in the video demonstrations?**  \\nA2: The tools used are Redis Stack and RedisInsight, the Redis GUI.\\n\\n**Q3: How is a new vendor JSON object inserted into a Redis instance?**  \\nA3: A new vendor JSON object is inserted using the command `JSON.SET` followed by a key name, the root path ($), and the JSON document.\\n\\n**Q4: How can one search for a specific vendor by name using RediSearch in Redis JSON?**  \\nA4: To search for a specific vendor by name, use the command `FT.SEARCH` with the index name, and specify `@name` to search within the name field, followed by the search term.\\n\\n**Q5: What is the purpose of creating indexes on JSON documents in Redis?**  \\nA5: Creating indexes on JSON documents allows for efficient searching and querying over a collection of documents based on specific fields.\\n\\n**Q6: How is an index created for searching food trucks by their cuisine in Redis JSON?**  \\nA6: An index for searching food trucks by their cuisine is created using `FT.CREATE`, specifying the key prefix and schema to index the cuisines array within the vendor object as a tag search type.\\n\\n**Q7: What is the command used to find events with a specific number of assigned vendors?**  \\nA7: To find events with a specific number of assigned vendors, use the command `FT.SEARCH` with the index name, specifying `@assigned_vendors` and the desired range of vendors in square brackets.\\n\\n**Q8: How are JSON documents representing locations and events manipulated in Redis JSON?**  \\nA8: JSON documents for locations and events are manipulated using `JSON.SET` for insertion and `JSON.ARRAPPEND` for appending data to arrays within the JSON objects.\\n\\n**Q9: Why might someone want to use Redis Stack and RediSearch for organizing food trucks in a city?**  \\nA9: Redis Stack and RediSearch provide powerful tools for organizing food trucks by allowing efficient storage, querying, and indexing of JSON documents related to vendors, locations, and events, enhancing the ability to manage and retrieve data efficiently.\\n\\n**Q10: Where can one learn more about storing, querying, and indexing JSON in Redis at speed?**  \\nA10: More information can be found by enrolling in the Redis University course RU204, which focuses on storing, querying, and indexing JSON at speed.\",\"location\":\"openai.summarize.docs\"}"
"SET" "openai-video-summary:I-ohlZXXaxs" "### Summary:\nThe video introduces significant updates to Redis JSON that enhance the efficiency of querying and indexing JSON documents in Redis. It employs a practical example involving organizing food trucks in Oakland to demonstrate these enhancements. The Redis Stack instance, equipped with JSON, indexing, and query capabilities, and the RedisInsight GUI are used throughout the demo. The presenter shows how to create and manipulate JSON documents for food trucks, events, and locations, focusing on the use of JSON path syntax for querying.\n\nThe video further explores the integration of RediSearch with Redis JSON for indexing and querying JSON documents. This feature allows for sophisticated searching capabilities through JSON data, such as searching by vendor name, cuisine, event location, and the number of attending food trucks. The process involves creating indexes on specific fields within the JSON documents and demonstrates how to perform searches using these indexes. The video concludes with an invitation to learn more through a Redis University course and to try Redis Stack either by downloading it or provisioning an instance in the cloud.\n\n### Example Questions and Answers:\n\n**Q1: What functionality does Redis JSON now offer for JSON documents?**  \nA1: Redis JSON now offers the ability to efficiently query and index JSON documents.\n\n**Q2: Can you name the tools used in the video demonstrations?**  \nA2: The tools used are Redis Stack and RedisInsight, the Redis GUI.\n\n**Q3: How is a new vendor JSON object inserted into a Redis instance?**  \nA3: A new vendor JSON object is inserted using the command `JSON.SET` followed by a key name, the root path ($), and the JSON document.\n\n**Q4: How can one search for a specific vendor by name using RediSearch in Redis JSON?**  \nA4: To search for a specific vendor by name, use the command `FT.SEARCH` with the index name, and specify `@name` to search within the name field, followed by the search term.\n\n**Q5: What is the purpose of creating indexes on JSON documents in Redis?**  \nA5: Creating indexes on JSON documents allows for efficient searching and querying over a collection of documents based on specific fields.\n\n**Q6: How is an index created for searching food trucks by their cuisine in Redis JSON?**  \nA6: An index for searching food trucks by their cuisine is created using `FT.CREATE`, specifying the key prefix and schema to index the cuisines array within the vendor object as a tag search type.\n\n**Q7: What is the command used to find events with a specific number of assigned vendors?**  \nA7: To find events with a specific number of assigned vendors, use the command `FT.SEARCH` with the index name, specifying `@assigned_vendors` and the desired range of vendors in square brackets.\n\n**Q8: How are JSON documents representing locations and events manipulated in Redis JSON?**  \nA8: JSON documents for locations and events are manipulated using `JSON.SET` for insertion and `JSON.ARRAPPEND` for appending data to arrays within the JSON objects.\n\n**Q9: Why might someone want to use Redis Stack and RediSearch for organizing food trucks in a city?**  \nA9: Redis Stack and RediSearch provide powerful tools for organizing food trucks by allowing efficient storage, querying, and indexing of JSON documents related to vendors, locations, and events, enhancing the ability to manage and retrieve data efficiently.\n\n**Q10: Where can one learn more about storing, querying, and indexing JSON in Redis at speed?**  \nA10: More information can be found by enrolling in the Redis University course RU204, which focuses on storing, querying, and indexing JSON at speed."
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "openai.summarize.docs" "message" "Summarizing https://www.youtube.com/watch?v=KUfufrwpBkM" "meta" "{\"id\":\"KUfufrwpBkM\",\"link\":\"https://www.youtube.com/watch?v=KUfufrwpBkM\",\"title\":\"Redis Stack Workshop: Redis Stack OM Library for Node.js\",\"description\":\"Join us on April 13th at 5:30pm GMT for the Redis Stack OM library for Node.js workshop with Redis Developer Advocate Guy Royse. \\n\\nTune in to follow as Guy demonstrates how to create applications using Redis Stack and Node.js. Also, see how to store your data using Redis OM and store data using RedisJSON. Follow along with the sample application built with Express, which is available on GitHub. Guy will be on chat to answer any questions. Stay tuned!\\n\\nSource code for the demo application: https://github.com/redis-developer/express-redis-om-workshop\\nRedis OM Client for Node.js: https://github.com/redis/redis-om-node\\n\\nFrom the blog: https://redis.com/blog/introducing-redis-stack/\\nDiscover Redis Stack: https://redis.io/docs/stack/\\n\\n#Redis #RedisStack #NodeJS #RedisOM\",\"thumbnail\":\"https://i.ytimg.com/vi/KUfufrwpBkM/maxresdefault.jpg\",\"location\":\"openai.summarize.docs\"}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "openai.summarize.docs" "message" "Summarized https://www.youtube.com/watch?v=KUfufrwpBkM:\n **Refined Summary:**\n\nIn this comprehensive workshop, Guy Royce from Redis demonstrates how to build a powerful Node.js API leveraging Express.js and Redis. The focus is on CRUD operations, search functionalities, and the innovative use of Redisome for object mapping. Throughout the presentation, Guy showcases the steps to create and manage person data attributes such as names, ages, and locations, stored in Redis as JSON documents. He delves into the usage of Redis Search and Redis JSON for advanced querying capabilities, like full-text searches that intelligently handle grammatical variations and ignore insignificant words. Guy introduces geo-searches, enabling searches for persons within a specified radius of a geographical point, using Redis's geo functionalities. An interesting addition is location tracking, where Guy explores updating location data and maintaining a history of location changes using Redis Streams, despite Redisome not directly supporting this feature. This is achieved by accessing the underlying Node Redis client to execute operations beyond Redisome's capabilities. This workshop serves as an educational tool for developers looking to integrate Redis into their Node.js applications, offering a blend of foundational and advanced techniques.\n\n**Example Questions:**\n\n1. **How does Guy Royce facilitate full-text searches within the API?**\n   - Guy uses Redis Search\xe2\x80\x99s full-text search capabilities by employing the `matches` verb in Redisome to search personal statements for specific words or phrases, accounting for grammatical variations and ignoring common, insignificant words.\n   \n2. **What makes the geo-search feature unique in Guy's demonstration?**\n   - The geo-search functionality allows searching for persons within a specified radius from a given geographical point, showcasing the ability to perform proximity-based queries using Redis's geo capabilities.\n   \n3. **How does Guy Royce implement location tracking and history in the API?**\n   - Guy extends the app with location tracking and history by utilizing Redis Streams to log changes in person locations over time, a feature implemented by accessing the underlying Node Redis client to circumvent Redisome's limitations.\n   \n4. **Can you describe how the Redis Stream data type is used for location history tracking in Guy's workshop?**\n   - Redis Streams are used to maintain a log of location changes by creating a stream keyed to each person\xe2\x80\x99s ID appended with \"location history.\" Each entry in the stream includes a timestamp and the new location coordinates.\n   \n5. **What adjustments did Guy make to integrate Node Redis directly with Redisome for location history tracking?**\n   - Guy modified the setup to import the `create client` function from Node Redis, used it to explicitly connect to Redis, and instructed Redisome to use this connection. This dual setup allows Guy to utilize Node Redis for operations Redisome doesn't support directly, such as Streams for location history tracking.\n\n6. **Why did Guy Royce choose to express distances in miles for geo-searching, and how could this be changed?**\n   - Guy humorously refers to miles as \"freedom units\" and acknowledges his preference due to being American but explains that the unit can be easily adjusted to kilometers, meters, or feet, according to the user's needs or regional standards." "meta" "{\"summary\":\"**Refined Summary:**\\n\\nIn this comprehensive workshop, Guy Royce from Redis demonstrates how to build a powerful Node.js API leveraging Express.js and Redis. The focus is on CRUD operations, search functionalities, and the innovative use of Redisome for object mapping. Throughout the presentation, Guy showcases the steps to create and manage person data attributes such as names, ages, and locations, stored in Redis as JSON documents. He delves into the usage of Redis Search and Redis JSON for advanced querying capabilities, like full-text searches that intelligently handle grammatical variations and ignore insignificant words. Guy introduces geo-searches, enabling searches for persons within a specified radius of a geographical point, using Redis's geo functionalities. An interesting addition is location tracking, where Guy explores updating location data and maintaining a history of location changes using Redis Streams, despite Redisome not directly supporting this feature. This is achieved by accessing the underlying Node Redis client to execute operations beyond Redisome's capabilities. This workshop serves as an educational tool for developers looking to integrate Redis into their Node.js applications, offering a blend of foundational and advanced techniques.\\n\\n**Example Questions:**\\n\\n1. **How does Guy Royce facilitate full-text searches within the API?**\\n   - Guy uses Redis Search\xe2\x80\x99s full-text search capabilities by employing the `matches` verb in Redisome to search personal statements for specific words or phrases, accounting for grammatical variations and ignoring common, insignificant words.\\n   \\n2. **What makes the geo-search feature unique in Guy's demonstration?**\\n   - The geo-search functionality allows searching for persons within a specified radius from a given geographical point, showcasing the ability to perform proximity-based queries using Redis's geo capabilities.\\n   \\n3. **How does Guy Royce implement location tracking and history in the API?**\\n   - Guy extends the app with location tracking and history by utilizing Redis Streams to log changes in person locations over time, a feature implemented by accessing the underlying Node Redis client to circumvent Redisome's limitations.\\n   \\n4. **Can you describe how the Redis Stream data type is used for location history tracking in Guy's workshop?**\\n   - Redis Streams are used to maintain a log of location changes by creating a stream keyed to each person\xe2\x80\x99s ID appended with \\\"location history.\\\" Each entry in the stream includes a timestamp and the new location coordinates.\\n   \\n5. **What adjustments did Guy make to integrate Node Redis directly with Redisome for location history tracking?**\\n   - Guy modified the setup to import the `create client` function from Node Redis, used it to explicitly connect to Redis, and instructed Redisome to use this connection. This dual setup allows Guy to utilize Node Redis for operations Redisome doesn't support directly, such as Streams for location history tracking.\\n\\n6. **Why did Guy Royce choose to express distances in miles for geo-searching, and how could this be changed?**\\n   - Guy humorously refers to miles as \\\"freedom units\\\" and acknowledges his preference due to being American but explains that the unit can be easily adjusted to kilometers, meters, or feet, according to the user's needs or regional standards.\",\"location\":\"openai.summarize.docs\"}"
"SET" "openai-video-summary:KUfufrwpBkM" "**Refined Summary:**\n\nIn this comprehensive workshop, Guy Royce from Redis demonstrates how to build a powerful Node.js API leveraging Express.js and Redis. The focus is on CRUD operations, search functionalities, and the innovative use of Redisome for object mapping. Throughout the presentation, Guy showcases the steps to create and manage person data attributes such as names, ages, and locations, stored in Redis as JSON documents. He delves into the usage of Redis Search and Redis JSON for advanced querying capabilities, like full-text searches that intelligently handle grammatical variations and ignore insignificant words. Guy introduces geo-searches, enabling searches for persons within a specified radius of a geographical point, using Redis's geo functionalities. An interesting addition is location tracking, where Guy explores updating location data and maintaining a history of location changes using Redis Streams, despite Redisome not directly supporting this feature. This is achieved by accessing the underlying Node Redis client to execute operations beyond Redisome's capabilities. This workshop serves as an educational tool for developers looking to integrate Redis into their Node.js applications, offering a blend of foundational and advanced techniques.\n\n**Example Questions:**\n\n1. **How does Guy Royce facilitate full-text searches within the API?**\n   - Guy uses Redis Search\xe2\x80\x99s full-text search capabilities by employing the `matches` verb in Redisome to search personal statements for specific words or phrases, accounting for grammatical variations and ignoring common, insignificant words.\n   \n2. **What makes the geo-search feature unique in Guy's demonstration?**\n   - The geo-search functionality allows searching for persons within a specified radius from a given geographical point, showcasing the ability to perform proximity-based queries using Redis's geo capabilities.\n   \n3. **How does Guy Royce implement location tracking and history in the API?**\n   - Guy extends the app with location tracking and history by utilizing Redis Streams to log changes in person locations over time, a feature implemented by accessing the underlying Node Redis client to circumvent Redisome's limitations.\n   \n4. **Can you describe how the Redis Stream data type is used for location history tracking in Guy's workshop?**\n   - Redis Streams are used to maintain a log of location changes by creating a stream keyed to each person\xe2\x80\x99s ID appended with \"location history.\" Each entry in the stream includes a timestamp and the new location coordinates.\n   \n5. **What adjustments did Guy make to integrate Node Redis directly with Redisome for location history tracking?**\n   - Guy modified the setup to import the `create client` function from Node Redis, used it to explicitly connect to Redis, and instructed Redisome to use this connection. This dual setup allows Guy to utilize Node Redis for operations Redisome doesn't support directly, such as Streams for location history tracking.\n\n6. **Why did Guy Royce choose to express distances in miles for geo-searching, and how could this be changed?**\n   - Guy humorously refers to miles as \"freedom units\" and acknowledges his preference due to being American but explains that the unit can be easily adjusted to kilometers, meters, or feet, according to the user's needs or regional standards."
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "openai.summarize.docs" "message" "Summarizing https://www.youtube.com/watch?v=LaiQFZ5bXaM" "meta" "{\"id\":\"LaiQFZ5bXaM\",\"link\":\"https://www.youtube.com/watch?v=LaiQFZ5bXaM\",\"title\":\"Redis Stack Crash Course: How to Build Apps with Superpowers\",\"description\":\"Redis Stack turns Redis into a multi-model database, enabling you to build rich real-time applications with Redis as a primary database. Explore Redis Stack - http://redis.info/3Lq9gbF\\n\\nRedis Stack consolidates the capabilities of the leading Redis modules into a single product, making it easy for developers to build modern, real-time applications with the speed and stability of Redis.\\n\\nRedis Stack is free and unifies the leading Redis modules in a single product. This makes it easy to start building with our Redis-based search, document, graph, and time series capabilities.\\n\\nRedis Stack is a suite of three components:\\n\\n- Redis Stack Server combines open source Redis with RediSearch, RedisJSON, RedisGraph, RedisTimeSeries and RedisBloom\\n\\n- RedisInsight is a powerful tool for visualizing and optimizing Redis data, making real-time application development easier and more fun than ever before\\n\\n- The Redis Stack Client SDK includes the leading official Redis clients in Java, JavaScript, and Python.  These clients also include our new suite of object mapping libraries which offer developer-friendly abstractions that get you productive with just a few lines of code. Known as Redis OM for .NET, Node.js, Java, and Python, these libraries also make it easier than ever to integrate with major application frameworks such as Spring, ASP.NET Core, FastAPI, and Express.\\n\\nSign up for Redis Cloud for free using code TIGER200: https://redis.info/3pyzVea\\n\\nGet the Source Code for This Video: https://redis.info/36PTesO\\n\\nFrom the Blog: https://redis.com/blog/introducing-redis-stack/\\n\\nLearn more about Redis Stack: http://redis.info/3Lq9gbF\\n\\n#RedisStack #Redis #RedisEnterprise #RealTimeData\",\"thumbnail\":\"https://i.ytimg.com/vi/LaiQFZ5bXaM/maxresdefault.jpg\",\"location\":\"openai.summarize.docs\"}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "openai.summarize.docs" "message" "Summarized https://www.youtube.com/watch?v=LaiQFZ5bXaM:\n ### Summary:\nThe video showcases the construction of a real-time application for tracking a stock watchlist, utilizing Redis Stack as a multi-model database. Redis Stack enhances Redis by supporting various data formats, including JSON documents, time series data, and probabilistic data structures, which simplifies managing multiple databases. The application features a stock watchlist, real-time trading information, trending stocks based on trade frequency, and latest news per selected stock, all updated in real-time. The back end comprises microservices for API, streaming, and UI, leveraging Redis capabilities for data storage, Pub/Sub for real-time communication, and Redis search for efficient data retrieval. The video also illustrates the use of Redis Insight for managing Redis data and highlights the code infrastructure supporting the application's functionality.\n\n### Example Questions and Answers:\n\n1. **What is the primary database and message broker used in the sample stock watchlist application?**\n   - Redis Stack is used as the primary database and message broker in the application.\n\n2. **How does Redis Stack simplify building real-time applications?**\n   - Redis Stack turns Redis into a multi-model database, supporting various data formats and capabilities in a single database, reducing the complexity and time involved in using multiple database technologies.\n\n3. **What types of data does the application store using Redis Stack?**\n   - The application stores basic data types, JSON documents, time series data, probabilistic data structures, and uses Pub/Sub for real-time communication between microservices.\n\n4. **How does the application handle real-time updates of stock information?**\n   - It uses WebSockets to receive price updates in real-time and Pub/Sub messaging for communicating information between microservices.\n\n5. **In what formats are stock-related data stored and managed in Redis Stack?**\n   - Stock-related data are stored in sets for the watchlist, JSON documents for stock details, time series for price data, and the Top K filter for tracking trending stocks.\n\n6. **Which external API is utilized for real-time trading data in the application?**\n   - The Alpaca API is used for fetching real-time trading data, including price updates and news about stocks.\n\n7. **What technologies are used for the application's front end?**\n   - The front end is developed using Tailwind CSS, Chart.js, and Next.js.\n\n8. **How does the API service facilitate communication between the front end and Redis Stack?**\n   - The API service acts as an intermediary, handling requests from the front end to add or remove stocks from the watchlist, querying data for display, and subscribing to Pub/Sub messages for real-time updates.\n\n9. **What role does the streaming service play in the application architecture?**\n   - The streaming service manages real-time data flow from the Alpaca API, updates Redis with new trades, and publishes messages regarding changes in trending stocks and trade information.\n\n10. **How are trending stocks determined and updated in the application?**\n    - Trending stocks are tracked using the Top K filter in Redis Stack, which creates a leaderboard based on trading frequency. This leaderboard is updated in real time as new trades are processed." "meta" "{\"summary\":\"### Summary:\\nThe video showcases the construction of a real-time application for tracking a stock watchlist, utilizing Redis Stack as a multi-model database. Redis Stack enhances Redis by supporting various data formats, including JSON documents, time series data, and probabilistic data structures, which simplifies managing multiple databases. The application features a stock watchlist, real-time trading information, trending stocks based on trade frequency, and latest news per selected stock, all updated in real-time. The back end comprises microservices for API, streaming, and UI, leveraging Redis capabilities for data storage, Pub/Sub for real-time communication, and Redis search for efficient data retrieval. The video also illustrates the use of Redis Insight for managing Redis data and highlights the code infrastructure supporting the application's functionality.\\n\\n### Example Questions and Answers:\\n\\n1. **What is the primary database and message broker used in the sample stock watchlist application?**\\n   - Redis Stack is used as the primary database and message broker in the application.\\n\\n2. **How does Redis Stack simplify building real-time applications?**\\n   - Redis Stack turns Redis into a multi-model database, supporting various data formats and capabilities in a single database, reducing the complexity and time involved in using multiple database technologies.\\n\\n3. **What types of data does the application store using Redis Stack?**\\n   - The application stores basic data types, JSON documents, time series data, probabilistic data structures, and uses Pub/Sub for real-time communication between microservices.\\n\\n4. **How does the application handle real-time updates of stock information?**\\n   - It uses WebSockets to receive price updates in real-time and Pub/Sub messaging for communicating information between microservices.\\n\\n5. **In what formats are stock-related data stored and managed in Redis Stack?**\\n   - Stock-related data are stored in sets for the watchlist, JSON documents for stock details, time series for price data, and the Top K filter for tracking trending stocks.\\n\\n6. **Which external API is utilized for real-time trading data in the application?**\\n   - The Alpaca API is used for fetching real-time trading data, including price updates and news about stocks.\\n\\n7. **What technologies are used for the application's front end?**\\n   - The front end is developed using Tailwind CSS, Chart.js, and Next.js.\\n\\n8. **How does the API service facilitate communication between the front end and Redis Stack?**\\n   - The API service acts as an intermediary, handling requests from the front end to add or remove stocks from the watchlist, querying data for display, and subscribing to Pub/Sub messages for real-time updates.\\n\\n9. **What role does the streaming service play in the application architecture?**\\n   - The streaming service manages real-time data flow from the Alpaca API, updates Redis with new trades, and publishes messages regarding changes in trending stocks and trade information.\\n\\n10. **How are trending stocks determined and updated in the application?**\\n    - Trending stocks are tracked using the Top K filter in Redis Stack, which creates a leaderboard based on trading frequency. This leaderboard is updated in real time as new trades are processed.\",\"location\":\"openai.summarize.docs\"}"
"SET" "openai-video-summary:LaiQFZ5bXaM" "### Summary:\nThe video showcases the construction of a real-time application for tracking a stock watchlist, utilizing Redis Stack as a multi-model database. Redis Stack enhances Redis by supporting various data formats, including JSON documents, time series data, and probabilistic data structures, which simplifies managing multiple databases. The application features a stock watchlist, real-time trading information, trending stocks based on trade frequency, and latest news per selected stock, all updated in real-time. The back end comprises microservices for API, streaming, and UI, leveraging Redis capabilities for data storage, Pub/Sub for real-time communication, and Redis search for efficient data retrieval. The video also illustrates the use of Redis Insight for managing Redis data and highlights the code infrastructure supporting the application's functionality.\n\n### Example Questions and Answers:\n\n1. **What is the primary database and message broker used in the sample stock watchlist application?**\n   - Redis Stack is used as the primary database and message broker in the application.\n\n2. **How does Redis Stack simplify building real-time applications?**\n   - Redis Stack turns Redis into a multi-model database, supporting various data formats and capabilities in a single database, reducing the complexity and time involved in using multiple database technologies.\n\n3. **What types of data does the application store using Redis Stack?**\n   - The application stores basic data types, JSON documents, time series data, probabilistic data structures, and uses Pub/Sub for real-time communication between microservices.\n\n4. **How does the application handle real-time updates of stock information?**\n   - It uses WebSockets to receive price updates in real-time and Pub/Sub messaging for communicating information between microservices.\n\n5. **In what formats are stock-related data stored and managed in Redis Stack?**\n   - Stock-related data are stored in sets for the watchlist, JSON documents for stock details, time series for price data, and the Top K filter for tracking trending stocks.\n\n6. **Which external API is utilized for real-time trading data in the application?**\n   - The Alpaca API is used for fetching real-time trading data, including price updates and news about stocks.\n\n7. **What technologies are used for the application's front end?**\n   - The front end is developed using Tailwind CSS, Chart.js, and Next.js.\n\n8. **How does the API service facilitate communication between the front end and Redis Stack?**\n   - The API service acts as an intermediary, handling requests from the front end to add or remove stocks from the watchlist, querying data for display, and subscribing to Pub/Sub messages for real-time updates.\n\n9. **What role does the streaming service play in the application architecture?**\n   - The streaming service manages real-time data flow from the Alpaca API, updates Redis with new trades, and publishes messages regarding changes in trending stocks and trade information.\n\n10. **How are trending stocks determined and updated in the application?**\n    - Trending stocks are tracked using the Top K filter in Redis Stack, which creates a leaderboard based on trading frequency. This leaderboard is updated in real time as new trades are processed."
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "openai.summarize.docs" "message" "Summarizing https://www.youtube.com/watch?v=SzcpwtLRgyk" "meta" "{\"id\":\"SzcpwtLRgyk\",\"link\":\"https://www.youtube.com/watch?v=SzcpwtLRgyk\",\"title\":\"RedisTimeSeries Explained\",\"description\":\"Have you ever tried to wrangle data via timestamps but never had the time to do so? Join Justin as we take a stroll down 'in-memory' lane with the RedisTimeSeries module.  The RedisTimeSeries module, part of Redis Stack, lets the developer create time series data structures within Redis with the speed you've come to love from Redis. Redis Stack is an extension of Redis that adds modern data models and processing engines to provide a complete developer experience.\\n\\nIn addition to all of the features of OSS Redis, Redis stack supports:\\n- Queryable JSON documents\\n- Full-text search\\n- Time series data (ingestion & querying)\\n- Graph data models with the Cypher query language\\n- Probabilistic data structures\\n\\n00:00 Introduction\\n00:25 What is RedisTimeSeries?\\n00:50 Example explanation\\n01:27 TS.CREATE - create a time series object\\n03:01 TS.ADD - add to a time series object\\n03:31 TS.ALTER - update a time series object's options\\n04:00 TS.RANGE - retrieve a range of a time series' values\\n06:06 TS.CREATERULE - create rule for a time series object\\n07:48 TS.QUERYINDEX - query labels across time series objects\\n08:29 Conclusion\\n\\nLinks: \\nRedis University \xe2\x86\x92 https://university.redis.com/\\nRedis \xe2\x86\x92 https://www.redis.com/\\nRedisTimeSeries \xe2\x86\x92 https://redis.io/docs/stack/timeseries/\\nNeed a Redis Cloud  now? Sign up for a free Redis Cloud Essentials account \xe2\x86\x92 https://bit.ly/3xdTyMR\\n\\nJoin our discord server \xe2\x86\x92 https://discord.gg/redis\",\"thumbnail\":\"https://i.ytimg.com/vi/SzcpwtLRgyk/maxresdefault.jpg\",\"location\":\"openai.summarize.docs\"}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "openai.summarize.docs" "message" "Summarized https://www.youtube.com/watch?v=SzcpwtLRgyk:\n ### Summary:\n\nThis video introduces and explains the Redis Time Series, a Redis Stack component, used for efficiently handling time series data with quick data ingestion and low latency reads. The tutorial covers a practical application by using Redis Time Series to monitor air quality using sensor readings from around a house. It demonstrates setting up WiFi-enabled Raspberry Pi sensors to track air quality, sending data to Redis Time Series on Redis Cloud, and then using various Redis Time Series commands to manipulate and monitor the data.\n\nKey functionalities of Redis Time Series covered include creating time series with specific options like retention time and chunk size, adding samples to the series, adjusting series settings with the `alter` command, and querying the series with commands like `range` and `revrange`. It also details advanced functionalities like data aggregation with `create rule` for simplified data analysis and visualization, and the `query index` command for filtering through time series keys based on labels.\n\nThe video suggests Redis Time Series is an invaluable tool for real-time data tracking in various use cases, including environmental monitoring, finance, device management, and more. It encourages learners to explore further into Redis Time Series through official documentation and to experiment using a free Redis Cloud database.\n\n### Example Questions and Answers:\n\n1. **What is Redis Time Series?**\n   - Redis Time Series is a component of Redis Stack that introduces a time series data structure to Redis, enabling efficient data ingestion and low latency reads for time-stamped data.\n\n2. **How do you create a time series in Redis?**\n   - You can create a time series in Redis using the `TS.CREATE` command followed by the key name and optional subcommands for specifying behaviors like retention time, chunk size, duplicate policy, and labels for secondary indexing.\n\n3. **What command is used to add data samples to a Redis Time Series?**\n   - The `TS.ADD` command is used to insert data samples into a time series, where you specify the key, timestamp, and sample value.\n\n4. **Can you update settings of an existing Redis Time Series?**\n   - Yes, settings of an existing time series can be updated using the `TS.ALTER` command, allowing changes to options like retention time, duplicate policy, and labels.\n\n5. **How do you retrieve data over a certain period from a Redis Time Series?**\n   - Data from a specific period can be retrieved using the `TS.RANGE` command, where you define the start and end timestamps to get samples within that range. There's also a `TS.REVRANGE` for retrieving data in reverse order.\n\n6. **What is the purpose of the `TS.CREATERULE` command?**\n   - The `TS.CREATERULE` command is used to aggregate data from one time series and record it to another, helping with data compaction and tracking custom aggregated values over specified time buckets.\n\n7. **How can Redis Time Series help in visualizing data?**\n   - Redis Time Series can aggregate large sets of data into manageable summaries that are less resource-intensive to visualize, making it ideal for integration with platforms like Grafana for graphical data representation.\n\n8. **Is it possible to filter for specific labels using Redis Time Series?**\n   - Yes, the `TS.QUERYINDEX` command enables filtering across all time series keys to find matches based on specific label values, facilitating searches through data based on metadata like location or sensor type.\n\n9. **What are some use cases for Redis Time Series?**\n   - Redis Time Series is suited for a variety of applications including environmental monitoring, financial and stock market analysis, real-time device monitoring, and historical data analysis.\n\n10. **How can one start experimenting with Redis Time Series?**\n    - Individuals can sign up for a free Redis Stack database in the cloud to begin experimenting with Redis Time Series capabilities." "meta" "{\"summary\":\"### Summary:\\n\\nThis video introduces and explains the Redis Time Series, a Redis Stack component, used for efficiently handling time series data with quick data ingestion and low latency reads. The tutorial covers a practical application by using Redis Time Series to monitor air quality using sensor readings from around a house. It demonstrates setting up WiFi-enabled Raspberry Pi sensors to track air quality, sending data to Redis Time Series on Redis Cloud, and then using various Redis Time Series commands to manipulate and monitor the data.\\n\\nKey functionalities of Redis Time Series covered include creating time series with specific options like retention time and chunk size, adding samples to the series, adjusting series settings with the `alter` command, and querying the series with commands like `range` and `revrange`. It also details advanced functionalities like data aggregation with `create rule` for simplified data analysis and visualization, and the `query index` command for filtering through time series keys based on labels.\\n\\nThe video suggests Redis Time Series is an invaluable tool for real-time data tracking in various use cases, including environmental monitoring, finance, device management, and more. It encourages learners to explore further into Redis Time Series through official documentation and to experiment using a free Redis Cloud database.\\n\\n### Example Questions and Answers:\\n\\n1. **What is Redis Time Series?**\\n   - Redis Time Series is a component of Redis Stack that introduces a time series data structure to Redis, enabling efficient data ingestion and low latency reads for time-stamped data.\\n\\n2. **How do you create a time series in Redis?**\\n   - You can create a time series in Redis using the `TS.CREATE` command followed by the key name and optional subcommands for specifying behaviors like retention time, chunk size, duplicate policy, and labels for secondary indexing.\\n\\n3. **What command is used to add data samples to a Redis Time Series?**\\n   - The `TS.ADD` command is used to insert data samples into a time series, where you specify the key, timestamp, and sample value.\\n\\n4. **Can you update settings of an existing Redis Time Series?**\\n   - Yes, settings of an existing time series can be updated using the `TS.ALTER` command, allowing changes to options like retention time, duplicate policy, and labels.\\n\\n5. **How do you retrieve data over a certain period from a Redis Time Series?**\\n   - Data from a specific period can be retrieved using the `TS.RANGE` command, where you define the start and end timestamps to get samples within that range. There's also a `TS.REVRANGE` for retrieving data in reverse order.\\n\\n6. **What is the purpose of the `TS.CREATERULE` command?**\\n   - The `TS.CREATERULE` command is used to aggregate data from one time series and record it to another, helping with data compaction and tracking custom aggregated values over specified time buckets.\\n\\n7. **How can Redis Time Series help in visualizing data?**\\n   - Redis Time Series can aggregate large sets of data into manageable summaries that are less resource-intensive to visualize, making it ideal for integration with platforms like Grafana for graphical data representation.\\n\\n8. **Is it possible to filter for specific labels using Redis Time Series?**\\n   - Yes, the `TS.QUERYINDEX` command enables filtering across all time series keys to find matches based on specific label values, facilitating searches through data based on metadata like location or sensor type.\\n\\n9. **What are some use cases for Redis Time Series?**\\n   - Redis Time Series is suited for a variety of applications including environmental monitoring, financial and stock market analysis, real-time device monitoring, and historical data analysis.\\n\\n10. **How can one start experimenting with Redis Time Series?**\\n    - Individuals can sign up for a free Redis Stack database in the cloud to begin experimenting with Redis Time Series capabilities.\",\"location\":\"openai.summarize.docs\"}"
"SET" "openai-video-summary:SzcpwtLRgyk" "### Summary:\n\nThis video introduces and explains the Redis Time Series, a Redis Stack component, used for efficiently handling time series data with quick data ingestion and low latency reads. The tutorial covers a practical application by using Redis Time Series to monitor air quality using sensor readings from around a house. It demonstrates setting up WiFi-enabled Raspberry Pi sensors to track air quality, sending data to Redis Time Series on Redis Cloud, and then using various Redis Time Series commands to manipulate and monitor the data.\n\nKey functionalities of Redis Time Series covered include creating time series with specific options like retention time and chunk size, adding samples to the series, adjusting series settings with the `alter` command, and querying the series with commands like `range` and `revrange`. It also details advanced functionalities like data aggregation with `create rule` for simplified data analysis and visualization, and the `query index` command for filtering through time series keys based on labels.\n\nThe video suggests Redis Time Series is an invaluable tool for real-time data tracking in various use cases, including environmental monitoring, finance, device management, and more. It encourages learners to explore further into Redis Time Series through official documentation and to experiment using a free Redis Cloud database.\n\n### Example Questions and Answers:\n\n1. **What is Redis Time Series?**\n   - Redis Time Series is a component of Redis Stack that introduces a time series data structure to Redis, enabling efficient data ingestion and low latency reads for time-stamped data.\n\n2. **How do you create a time series in Redis?**\n   - You can create a time series in Redis using the `TS.CREATE` command followed by the key name and optional subcommands for specifying behaviors like retention time, chunk size, duplicate policy, and labels for secondary indexing.\n\n3. **What command is used to add data samples to a Redis Time Series?**\n   - The `TS.ADD` command is used to insert data samples into a time series, where you specify the key, timestamp, and sample value.\n\n4. **Can you update settings of an existing Redis Time Series?**\n   - Yes, settings of an existing time series can be updated using the `TS.ALTER` command, allowing changes to options like retention time, duplicate policy, and labels.\n\n5. **How do you retrieve data over a certain period from a Redis Time Series?**\n   - Data from a specific period can be retrieved using the `TS.RANGE` command, where you define the start and end timestamps to get samples within that range. There's also a `TS.REVRANGE` for retrieving data in reverse order.\n\n6. **What is the purpose of the `TS.CREATERULE` command?**\n   - The `TS.CREATERULE` command is used to aggregate data from one time series and record it to another, helping with data compaction and tracking custom aggregated values over specified time buckets.\n\n7. **How can Redis Time Series help in visualizing data?**\n   - Redis Time Series can aggregate large sets of data into manageable summaries that are less resource-intensive to visualize, making it ideal for integration with platforms like Grafana for graphical data representation.\n\n8. **Is it possible to filter for specific labels using Redis Time Series?**\n   - Yes, the `TS.QUERYINDEX` command enables filtering across all time series keys to find matches based on specific label values, facilitating searches through data based on metadata like location or sensor type.\n\n9. **What are some use cases for Redis Time Series?**\n   - Redis Time Series is suited for a variety of applications including environmental monitoring, financial and stock market analysis, real-time device monitoring, and historical data analysis.\n\n10. **How can one start experimenting with Redis Time Series?**\n    - Individuals can sign up for a free Redis Stack database in the cloud to begin experimenting with Redis Time Series capabilities."
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "openai.summarize.docs" "message" "Summarizing https://www.youtube.com/watch?v=Z8qcpXyMAiA" "meta" "{\"id\":\"Z8qcpXyMAiA\",\"link\":\"https://www.youtube.com/watch?v=Z8qcpXyMAiA\",\"title\":\"Redis Streams Explained\",\"description\":\"Redis Streams allow us to aggregate numerous sources of information into one easily consumable source of truth. Join Justin as we learn about the utility and power of the Redis Streams data structure.\\n\\nLinks: \\nRedis University \xe2\x86\x92 https://university.redislabs.com/\\nRedis University Streams Course \xe2\x86\x92 https://university.redislabs.com/courses/ru202/\\nRedis Labs \xe2\x86\x92 https://www.redislabs.com/\\nRedis Streams Introduction \xe2\x86\x92 https://redis.io/topics/streams-intro\\nNeed a Redis cluster now? Sign up for a free Redis Cloud Essentials account \xe2\x86\x92 https://bit.ly/2wasiCa\\n\\nJoin our discord server \xe2\x86\x92 https://discord.gg/redis\",\"thumbnail\":\"https://i.ytimg.com/vi/Z8qcpXyMAiA/maxresdefault.jpg\",\"location\":\"openai.summarize.docs\"}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "openai.summarize.docs" "message" "Summarized https://www.youtube.com/watch?v=Z8qcpXyMAiA:\n **Summary:**\n\nThe video introduces Redis as a valuable tool for capturing, managing, and making sense of streaming data, which is data generated continuously from various sources like social networks, website analytics, and IoT devices. Streaming data is represented as a series of events, and Redis provides a data structure specifically for streams, allowing for efficient handling of this data. The video explains the roles of producers and consumers in a distributed application architecture, with producers adding data to streams and consumers processing this data. Redis streams act as append-only logs where each entry has a unique ID and is immutable. The video also demonstrates basic Redis commands for manipulating streams, including `XADD` for adding data, `XRANGE` and `XREVRANGE` for reading data, and `XREAD` for consuming data in real-time. Trimming strategies for managing stream's memory usage are discussed, emphasizing the importance of controlling a stream's growth. The video concludes by encouraging further exploration of Redis streams through Redis University's courses\n\n**Example Questions and Answers:**\n\n1. **What is streaming data?**\n   - Streaming data refers to data that is generated continuously, often from a large number of concurrent sources. It's represented as a series of events or entries, capturing activities from various sources like social networks, website analytics, and IoT devices.\n\n2. **How does Redis handle streaming data?**\n   - Redis provides a data structure called a stream, specifically designed for handling streaming data. This data structure acts like an append-only log, where each entry is immutable and has a unique ID, allowing for efficient data management and retrieval.\n\n3. **What are producers and consumers in the context of Redis streams?**\n   - In a distributed application architecture utilizing Redis streams, producers are the components that write data to a stream, while consumers are processes that read and process this data from the stream. Producers and consumers operate independently, offering a decoupled system architecture.\n\n4. **How can you add an entry to a Redis stream?**\n   - To add an entry to a Redis stream, you can use the `XADD` command. This command requires specifying a stream key and a set of name-value pairs representing the entry. Redis assigns a unique ID to each entry, typically a timestamp-based ID to maintain chronological order.\n\n5. **What is the purpose of the `XTRIM` command in Redis streams?**\n   - The `XTRIM` command is used to manage the memory usage of a Redis stream by trimming its length to a specified maximum number of entries. It removes the oldest entries, ensuring that the stream does not grow indefinitely and consumes an excessive amount of memory.\n\n6. **How can you read entries from a Redis stream in real-time?**\n   - To consume a Redis stream in real-time, the `XREAD` command is used. It can be set to block and wait for new entries if you\xe2\x80\x99ve already read all existing ones, providing an efficient way to continuously receive data without polling. `XREAD` allows consuming data from one or more streams based on the last entry ID you\xe2\x80\x99ve processed.\n\n7. **Can entries in a Redis stream be modified after being added?**\n   - No, once an entry is added to a Redis stream, it is immutable, meaning it cannot be modified. This characteristic ensures the integrity of the data within the stream, as each entry represents a specific event or a point in time.\n\n8. **What happens to Redis stream entries when they are read?**\n   - Reading entries from a Redis stream does not remove them. Entries remain in the stream, available for other consumers to read and process. This allows multiple consumers to independently process the entire dataset in different ways, according to their specific roles or functions." "meta" "{\"summary\":\"**Summary:**\\n\\nThe video introduces Redis as a valuable tool for capturing, managing, and making sense of streaming data, which is data generated continuously from various sources like social networks, website analytics, and IoT devices. Streaming data is represented as a series of events, and Redis provides a data structure specifically for streams, allowing for efficient handling of this data. The video explains the roles of producers and consumers in a distributed application architecture, with producers adding data to streams and consumers processing this data. Redis streams act as append-only logs where each entry has a unique ID and is immutable. The video also demonstrates basic Redis commands for manipulating streams, including `XADD` for adding data, `XRANGE` and `XREVRANGE` for reading data, and `XREAD` for consuming data in real-time. Trimming strategies for managing stream's memory usage are discussed, emphasizing the importance of controlling a stream's growth. The video concludes by encouraging further exploration of Redis streams through Redis University's courses\\n\\n**Example Questions and Answers:**\\n\\n1. **What is streaming data?**\\n   - Streaming data refers to data that is generated continuously, often from a large number of concurrent sources. It's represented as a series of events or entries, capturing activities from various sources like social networks, website analytics, and IoT devices.\\n\\n2. **How does Redis handle streaming data?**\\n   - Redis provides a data structure called a stream, specifically designed for handling streaming data. This data structure acts like an append-only log, where each entry is immutable and has a unique ID, allowing for efficient data management and retrieval.\\n\\n3. **What are producers and consumers in the context of Redis streams?**\\n   - In a distributed application architecture utilizing Redis streams, producers are the components that write data to a stream, while consumers are processes that read and process this data from the stream. Producers and consumers operate independently, offering a decoupled system architecture.\\n\\n4. **How can you add an entry to a Redis stream?**\\n   - To add an entry to a Redis stream, you can use the `XADD` command. This command requires specifying a stream key and a set of name-value pairs representing the entry. Redis assigns a unique ID to each entry, typically a timestamp-based ID to maintain chronological order.\\n\\n5. **What is the purpose of the `XTRIM` command in Redis streams?**\\n   - The `XTRIM` command is used to manage the memory usage of a Redis stream by trimming its length to a specified maximum number of entries. It removes the oldest entries, ensuring that the stream does not grow indefinitely and consumes an excessive amount of memory.\\n\\n6. **How can you read entries from a Redis stream in real-time?**\\n   - To consume a Redis stream in real-time, the `XREAD` command is used. It can be set to block and wait for new entries if you\xe2\x80\x99ve already read all existing ones, providing an efficient way to continuously receive data without polling. `XREAD` allows consuming data from one or more streams based on the last entry ID you\xe2\x80\x99ve processed.\\n\\n7. **Can entries in a Redis stream be modified after being added?**\\n   - No, once an entry is added to a Redis stream, it is immutable, meaning it cannot be modified. This characteristic ensures the integrity of the data within the stream, as each entry represents a specific event or a point in time.\\n\\n8. **What happens to Redis stream entries when they are read?**\\n   - Reading entries from a Redis stream does not remove them. Entries remain in the stream, available for other consumers to read and process. This allows multiple consumers to independently process the entire dataset in different ways, according to their specific roles or functions.\",\"location\":\"openai.summarize.docs\"}"
"SET" "openai-video-summary:Z8qcpXyMAiA" "**Summary:**\n\nThe video introduces Redis as a valuable tool for capturing, managing, and making sense of streaming data, which is data generated continuously from various sources like social networks, website analytics, and IoT devices. Streaming data is represented as a series of events, and Redis provides a data structure specifically for streams, allowing for efficient handling of this data. The video explains the roles of producers and consumers in a distributed application architecture, with producers adding data to streams and consumers processing this data. Redis streams act as append-only logs where each entry has a unique ID and is immutable. The video also demonstrates basic Redis commands for manipulating streams, including `XADD` for adding data, `XRANGE` and `XREVRANGE` for reading data, and `XREAD` for consuming data in real-time. Trimming strategies for managing stream's memory usage are discussed, emphasizing the importance of controlling a stream's growth. The video concludes by encouraging further exploration of Redis streams through Redis University's courses\n\n**Example Questions and Answers:**\n\n1. **What is streaming data?**\n   - Streaming data refers to data that is generated continuously, often from a large number of concurrent sources. It's represented as a series of events or entries, capturing activities from various sources like social networks, website analytics, and IoT devices.\n\n2. **How does Redis handle streaming data?**\n   - Redis provides a data structure called a stream, specifically designed for handling streaming data. This data structure acts like an append-only log, where each entry is immutable and has a unique ID, allowing for efficient data management and retrieval.\n\n3. **What are producers and consumers in the context of Redis streams?**\n   - In a distributed application architecture utilizing Redis streams, producers are the components that write data to a stream, while consumers are processes that read and process this data from the stream. Producers and consumers operate independently, offering a decoupled system architecture.\n\n4. **How can you add an entry to a Redis stream?**\n   - To add an entry to a Redis stream, you can use the `XADD` command. This command requires specifying a stream key and a set of name-value pairs representing the entry. Redis assigns a unique ID to each entry, typically a timestamp-based ID to maintain chronological order.\n\n5. **What is the purpose of the `XTRIM` command in Redis streams?**\n   - The `XTRIM` command is used to manage the memory usage of a Redis stream by trimming its length to a specified maximum number of entries. It removes the oldest entries, ensuring that the stream does not grow indefinitely and consumes an excessive amount of memory.\n\n6. **How can you read entries from a Redis stream in real-time?**\n   - To consume a Redis stream in real-time, the `XREAD` command is used. It can be set to block and wait for new entries if you\xe2\x80\x99ve already read all existing ones, providing an efficient way to continuously receive data without polling. `XREAD` allows consuming data from one or more streams based on the last entry ID you\xe2\x80\x99ve processed.\n\n7. **Can entries in a Redis stream be modified after being added?**\n   - No, once an entry is added to a Redis stream, it is immutable, meaning it cannot be modified. This characteristic ensures the integrity of the data within the stream, as each entry represents a specific event or a point in time.\n\n8. **What happens to Redis stream entries when they are read?**\n   - Reading entries from a Redis stream does not remove them. Entries remain in the stream, available for other consumers to read and process. This allows multiple consumers to independently process the entire dataset in different ways, according to their specific roles or functions."
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "openai.store.store" "message" "Storing documents..." "meta" "{\"location\":\"openai.store.store\"}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "openai.store.store" "message" "Found 6 new documents" "meta" "{\"location\":\"openai.store.store\"}"
"FT.CREATE" "openai-idx-videos" "ON" "HASH" "PREFIX" "1" "openai-video:" "SCHEMA" "content_vector" "VECTOR" "HNSW" "6" "TYPE" "FLOAT32" "DIM" "1536" "DISTANCE_METRIC" "IP" "content" "TEXT" "metadata" "TEXT"
"MULTI"
"HSET" "openai-video:0" "content_vector" "\xf59k\xbb\xf6\x99\n=(\x80\x9e=Y\xdez\xbb\xa9\x97\xee<RB\xca<=/\x96;9\xe6\x00=\xc4\xc7\x82\xbc\xf2x\x8d<\xbf\x1e\xce\xbb\xdc_p;\x88{\xf9\xbc\xb2u,<k:W<s\xa4\xe9\xbc\x84\xe23\xbc\xf2\x82\x13\xbc\xaeh;\xbb\x84\x00\xc6<\x9aK\x81=\xbeZr<\xdd\xbf\x0f=R.\xbe<\x91\xff\x00\xbdR\xd4\a\xbd9\xf0\x86\xbc\x80\xe9\xce<\xcbw?=\xc2\x85u\xbd\x95>\x90<\x0e\x14\xe6\xbc\xfe\x17)\xbdoy\xe6\xba\xbf\x1e\xce\xb8_i\x9d\xbb\x90\x95\xdb<\xd4\xb9\xb9\xbc\x1c\xeb\x88<\x0b{\xa0<\xf5\xf3\xc0<Z\xca\xee\xbc\xb39\x88\xbc\xaa\x01\x14<5\x0b\xae<\xba/\xef;=\x11\x04\xbcoeZ\xbd4[\xde<|P\x89<\xdc\x0f\xc0\xbc\x12?\xe9<<\xd9|;\xc7\x9cl;\xc7B6=,\xf1\xcb\xbcE\x99(<\x13\xd1\xa6\xbb[>\x1a\xbc\xbb\xf3\xca\xbcc\xa8,=\xd0H\x0c\xbd\x80\xcb<<\x84(\xde<\x0bI\x82\xbc+A|<N\xbd\x10<\x03\x11\x8e\xbc\x89\xef$\xbd\xaf\x0e\x85<=\x89\xcc<IF\xfa\xbb\x06\xbe\xdf<\x88S\xe1\xb9\xd8\xbc$=\xfe\r\xa3;\xc8\x10\x98\xbb\x13\xbd\x1a=\x90\x95[\xbaZf2=\xdd\xab\x03\xbdg\xb5\x1d\xbbc\xb22\xbc\xb7\x8c#==M\xa8<\xab\xed\a<\x02kD\xbct@\xad\xbc\xb7x\x17=\xcb\xdb\xfb;\x90\xbds\xbd\n\xad>;,\xf1K\xbc'\x16y<\xa1\x19P<\x9d\xee\xcc<Q\x88t=$A\x0f=\x16~\xf8\xbb\x02W\xb8<@\xdc\xe7\xbb=\x1b\n\xbdg\x8d\x859(l\x92\xbc\x0e\x14\xe6;\xae6\x1d\xbd\x12?\xe9<,\xa1\x1b\xbc\xc7\x9cl;\xbf\xb0\x8b<\xd8\xa8\x98\xbd\x89\xdb\x18\xbd\xc4\xdb\x0e:\x84(\xde\xbc\x1b\x95\xef\xbb\xf6\x99\n\xbd\xd0\\\x18\xbd,\xdd\xbf\xbc\xa1-\xdc\xbc-y\x83: H\xaa\xbc\x0f\xb0\xa9:\x80\xd5B\xbd\aP\x9d\xbc\xd4\xe1Q\xbb_U\x11\xbdg\xc9)=\xa5X\xdf<\xccY-\xbc\xcc\x1d\t\xbc\xa2\xbf\x19=\xdc\x19F=\n\x11\xfb<oy\xe6\xbcR\xde\x8d\xbcA\x821=\xa1\x19P\xbd_s\xa3\xbbZz\xbe<\xd0\\\x18\xbd1\xcc\x9e\xbc\x7f%s\xbdkN\xe3\xbb\x99\x91+=#\xaf\xd1\xbc\x1bOE\xbd\xfe\xef\x90<\x8c\x92\xf0;U\x9f\xeb\xb9\xc7\x9cl\xbc\xf5\x11\xd3<\xa2\x97\x01=\xba\x1bc\xbdU\xb3\xf7\xbcjb\xef\xbc\x99\xeb\xe1\xbc@\xf0s=\x17.H<\xc3\xf9 =\x17\x106\xbd(v\x18\xbco\x8dr<(\xdaT\xbc\x1f\xc0\xf2<VYA\xbd\xa9\x83\xe2;g\xd3\xaf\xbc\xaa=\xb8\xbc\x8c\x92p\xbd=u\xc0\xbc\x9ai\x13\xbc\xb2\xc5\xdc\xbc\aF\x17=g\xe7;=,\x19d=k\xcc\x14=(\x94\xaa\xbc\x8d$.\xbd\x0ft\x85<=\x11\x04\xbc\xe5Q:\xbdg\xf1A<\xfe\xef\x10\xbd\xe8\xe0\xf9<b\x0ci\xbc\xcbw?<\xa2\xbf\x99\xbd\xf5M\xf7\xbb\x1b\x95\xef\xbcAx+<t6'\xbd\xcc\x1d\x89=\x0e(r\xba\x95f(=(N\x80<\x84\xce'<\xcb\x8b\xcb<\x8c\x92\xf0\xbaoQN\xbd\x91m\xc3\xbbR\x10\xac\xbas^\xbf\xb9\x89\xdb\x98=\xdd\xd3\x9b;\xb2u,=<\xb1d\xbbW\xff\n=R\xde\r<A\x96=\xbdg\xab\x97<,\x97\x95;\xccm9\xbd\xe0\x8a\xf3<k:W;w\xe3\xf8;Fq\x90;\x91mC\xbd\x1ff\xbc;E\x8f\xa2\xbb\xd4\xc3?\xbcJ\xa6\x19\xbd\xec\x0b}=\x90\xd1\x7f<\xe0N\xcf\xbcfK\xf8\xbb\xed\xcfX\xbc\xe0vg=|\x963\xbc\xb6\xf0\xdf\xb9\x02M\xb2<<\xc5p<\xfd{\xe5\xbcV'#\xbc\xfe\xf9\x96\xbcg\xe7\xbb<o\x8d\xf2\xbc-\x8d\x0f\xbcJ\xa6\x99\xbc\xd0f\x9e:A\x82\xb1;\xe9\"\a=\x99\xa5\xb7<$s\xad\xbc\n\xfd\xee\xbcA\x96\xbd<\x91wI\xbc\xdc#L\xbd\xaf\x0e\x85\xbd\xbf\xec/=^\xb9M=\xcf\x06\x7f<F\x85\x9c\xba_K\x0b<=u@\xbb\xe5\x01\n\xbc^\xaf\xc7\xbd\x91\x13\x8d\xbbF\x85\x9c;\xe0b[\xbb\xaa\x1f&<\x99\xc3I\xbdc\xbc8\xbd\xd4\xa5-\xbc9\xfa\x0c\xbcVY\xc1\xbc\x0f\xa6#<\x80\xfd\xda;\x7f9\xff\xbc\xf6\xb7\x1c\xbb961;b u=k\xcc\x94\xbcg\xe7\xbb;\xcb\xb3\xe3\xbcw\xe3\xf8\xbc\n\xc1\xca;R\x06\xa6<\x8c~\xe4<An%<\x02\x7f\xd0;t\xfa\x82;\xdcs|\xbd\x0bI\x02\xbd\x02k\xc4<\xae\x9a\xd9;\xbf\xba\x91<\xbb\x85\x88;\x80\x85\x12=\x99\xffm=p\xf7\x17\xbd\xea\x18\x81\xbdA\xa0C\xbd\xae|G\xbd5\xd9\x0f=0\xea0\xbc\xd0\\\x18<\xa2\xb5\x93\xba\xd0\x8e6=V\t\x91<$s-<g\x8d\x85< \x02\x00=\x0bq\x9a\xbc\x80\xb70<xW\xa4\xbc8^\xc9<\x02C,\xbd9@\xb7\xba\xaaQ\xc4\xbc+A\xfc;\xe8\xb8a\xbd\xe1\xf4\x98<\xbb\x8f\x8e\xba\x95p\xae<\xf6\x8f\x84\xbc\x89\xef\xa4\xbc\x9d\xd0:=5\xd9\x0f\xbd9TC\xbb\xcf\xcaZ\xbd\x1c\xe1\x02<\xf6\xcb(\xbd\xb39\x88<\x9e\xa8\xa2\xbc^\xf5\xf1<\xa1\x0fJ\xbcE\x99\xa8<I2n\xbc\xc7t\xd4<\xc3!9\xbd\xae6\x1d\xbc9J\xbd\xbc\x85\xb0\x95<\x13\xdb\xac\xbc\x9aK\x81\xba\x02\x7f\xd0\xbc\xd8\xeeB\xbcZ\x8eJ:\x0b{ \xbdc\x80\x94<\xe5[\xc0<\xc7\xb0x\xbb\x96*\x04\xbd|F\x83\xbc\x80\xdf\xc8;|\x96\xb3\xba\x99\xb9C\xbc\xd3\t\xea<\x1c\xeb\b\xbdQ`\\\xbc\xf6\xad\x96\xbd\x12Su\xbd\x9as\x19\xbd\x1b13\xbd\x1bYK=b u:\xbf2\xda\xbb(\xdaT\xbd\x1c\xe1\x82\xbd\xa5l\xeb\xbccl\x88\xbc\xe1\xe0\x8c<\xe9\xa4\xd5<^\xcd\xd9:o3\xbc<\xc4\xd1\b\xba\xd4\xe1\xd1\xbb(l\x92\xbb(v\x18\xbb\xe9\xa4\xd5;\x9d\xbc\xae;\xdc7X<{\xfa\xef\xbcIFz<\xa2\xb5\x93\xbd\xd4\xe1\xd1<'\x02\xed;8rU==\x7f\xc6\xbb\xcb\xc7\xef;\x1f\\6={\x0e\xfc;\xdd\xc9\x15;\xd0\x8e6\xbd\xe9,\x8d<\x1f\x84\xce<^\x915\xbb\xd0\x8e6<\xf2d\x01\xbd\xfe?\xc1<\xc3\x03';\xaa[\xca;oeZ\xbcE\xa3.\xbc\xa6\x125=\x13\xc7 =\xd5_\x83\xbb<\xb1d\xbc\x17\xf2\xa3=\xa1\x05D<\xc4\xc7\x82<\x9aK\x01\xbd\x1bmW\xbd\x95>\x90\xbc\x1f\x84N\xbd\xb2\xc5\xdc\xbc\xae|\xc7\xbc\xf1\xd2\xc3\xbc,\xe7\xc5\xbc\x95\xc0^\xbc\xa2\xa1\a;\xb2\x93\xbe\xbc\x9d*\xf1\xbaJ\xb0\x9f\xbb\xfe\xe5\x8a<(N\x00\xbds^?\xbd\xed\xb1F=|d\x95\xba\x94\xd4\xea<'\xee`;\xfeS\xcd\xbc\xd4i\x89\xbd\xe8\xe0y<\xe0N\xcf\xbcp\xf7\x17=\x99\xaf\xbd\xbc\x9a_\x8d\xbcx9\x12\xbd\xc8\x10\x18\xbdoGH\xbd\x0e(\xf2;\xc7\x88\xe0;\x91\x81\xcf:\xd8\xe4\xbc\xbc\x95\xacR==\x11\x84<\x80\x8f\x98;\xb6\xbe\xc1<\x89\xbd\x86\xbdk\xd6\x9a\xbc\xe5G4\xbc\x02M2\xbd\xf5\xe9\xba<\xab\xe3\x01\xbd\x99\xb9\xc3;\x88\r7\xbd  \x92<  \x12=N\xc7\x16=\xe0v\xe7\xba\x91mC\xbc\n\xfd\xee\xbb\xe0N\xcf<\x1bY\xcb:\x06\xaaS\xbd\x95\xacR<\xd0H\x0c:\xe9\x90I=\x91c=\xbd\x98\x13z\xbd\xd9\x80\x80<n\xa1\xfe:w\x89B=\x94\xd4\xea<\x1bm\xd7\xbbFq\x90<\xbeZ\xf2<N\x03;=\x80\x85\x12\xbd\xa6\xea\x1c<\xc3IQ=\x06\x8c\xc1<\xaa\x01\x94<\xa1Ah\xbd\xed\xcf\xd8\xbbk\xfe\xb2<\xb6\xbeA<\x8d\xf2\x8f<\xfa\xb0\x81\xbc\xf1\xd2\xc3\xbc\xe4\x8d^\xbct\x0e\x8f\xbb\x1b\x81\xe3<8\x86\xe1\xba\xe8\xb8a<\x8d$.=k\xe0\xa0<\xcc\x1d\t<\x13\xef\xb8;#\xd7i\xbcf7l;\xf2\xa0%=_\x87/\xbc\x90\xd1\x7f\xbd\x13\xdb\xac\xbc\xa1\x05\xc4\xbc \x02\x80\xbd\xfe\r\xa3<E\xcb\xc6\xbb\xa1-\xdc;V\x1d\x1d\xbd\x13\xbd\x9a\xbc\xfa\xba\a=cv\x0e\xbd\x13\xb3\x94\xbcU\xb3w;\xc4\xc7\x02\xbdx\x1b\x80<\x84\x14\xd2<\xeeC\x04\xbc\x89\xef$\xbc\x84\xe23;A\xc8[=\x06\xaaS\xbb\xe9\xa4\xd5<\x17\x1a<\xbc\xf1\xd2\xc3\xbcJ\x88\x87\xbb\xa2\xd3%\xbc\x85\xa6\x8f\xbc\xe96\x93\xbc\x1bE\xbf\xbc\xe1\x1c\xb1<o\x8d\xf2<=9\x1c=Z\xca\xee\xbcR8\xc4\xbbVwS\xbc\x80\x99\x1e\xbd\xc3qi\xbc\xccm\xb9</l\xff\xbb\xc780=\xd8\x0c\xd5;\xbf\xba\x11\xbd^\xb9M\xbc\x9ai\x13\xbc(\xc6\xc8\xbc$7\x89<\xc7tT<x/\x0c<\xf9xz\xbc\xe0\x8a\xf3<\x06d)<\x84<\xea\xbb0\x1cO<@\xf0\xf3\xbbk:W\xbc\x0f\xb0)<\xbb\x8f\x0e\xbc\xbf\x1eN\xbd\xcb\xb3c=\xaa\x1f\xa6\xbb\xa2\xa1\x87<\xb7Z\x85\xbc[>\x1a\xbc\xbf\xc4\x97\xbcJ\xce1<x/\x8c<\xb7n\x11\xbbw\xcf\xec:N\xc7\x16\xbc\x9e\x8a\x10<\x16jl\xba\x1b\x1d'\xbb\xa5DS9k&\xcb\xbc\xd4}\x95\xbc\xb2\x898=\xbf\xe2\xa9\xbc\xd4i\x89\xbb\xbf\xb0\x8b<\x99\xeb\xe1\xbc\xfe\xe5\x8a<8\xae\xf9<\xa6\xd6\x10=^\xa5\xc1\xbc\xd0\x98<;\xf9<\xd6\xbb\xaao\xd6\xbbM!\xcd\xbc1\xae\x0c\xb9\xbb\xf3\xca<\xdd\xdd\xa1\xbc\xe9\xa4U\xbco)\xb6<\xd3\tj:5\x0b.<\xb3k\xa6<Z\xa2\xd6\xbb\x91Y\xb7\xbb >\xa4\xbc\xb6\xf0\xdf;\xben\xfe<\n\xd5V\xba1\xc2\x18=\xe9h\xb1\xbb\x88gm\xbcN\xdb\"=\x06x5<k\xcc\x14\xbbF]\x04\xbb\x84\xf6?\xbd\xdd\xdd\xa1\xbc_})=\xf9P\xe2;\x8d\xfc\x95<\xbf\xc4\x17<\x9d>\xfd\xbc\xd9\x9e\x12\xbd\x1f\x84\xce\xbcs\xb8u\xbc\x1f\x84N\xbdf7l\xbc\xfa\xc4\r<\xe9J\x1f\xbcc\x9e\xa6:t@-<\x06\x96\xc7\xbc\xe9\x86\xc3;\xbaC\xfb\xbc\x1c\xf5\x8e\xbc\x88S\xe1\xbc\xbf\xba\x11=\x91;%=t@-\xbc0\xd6\xa4\xbd\x12+\xdd\xbb@\xdcg:\x9as\x99<\xcf\xb6\xce\xbb\x8cj\xd8\xbb\x12?\xe9\xbc\xed\xbbL\xbbMq}<1\xb8\x92\xbbAP\x93\xba\xd8\xa8\x98<Zp\xb8;\xec\x0b\xfd<\xf1\"\xf4<_}\xa9\xbc(\x8a\xa4\xbc\xd8\xc6\xaa;\n\xe9b\xbc\xe9\xa4\xd5<\x96*\x84\xbc\xaa[J\xbc\xa6\xd6\x10\xbcf#`\xbc\xb3a\xa0\xbcl\xb8\x88=\x95>\x90\xbb\x89\xbd\x86<\x17\xf2#\xbb\xc2\x85\xf5\xbc,\x19d\xbc\x1ff<;\xa1\x0fJ\xbb\x95\x8e@\xbd\x84\x00\xc6<\x95z4\xbd\xf1\xc8=\xbc\x1f\x98\xda\xbc+-p;\x84\xc4\xa1<$_!<\x0f\x9c\x1d\xbcoQ\xce\xbco\x8dr\xbd\xed\x93\xb4\xbc\x06x\xb5<b\x0ci<V'#;\x8c~d<x9\x92<\x02kD;\xaaoV<,\x97\x95<\x81q\x86\xbc\xe4\x8d^<4G\xd2\xbc\xe1\b%\xbdE\xf3^<b \xf5\xbc \x16\x0c\xbc=\x7f\xc6;(l\x92<-y\x83\xbb\xd8 \xe1<\xcb\x81E<9\x04\x13\xbcc\xa8\xac\xbcQ\x88t\xbcn\xa1\xfe<\xe4\xb5\xf6<\x1bOE=\x1b\x95o<\xd4\x9b\xa7\xbd\xa1A\xe8\xbc00\xdb<,\x05X\xbd\x80\x99\x9e;k:\xd7\xbc(\x9e\xb0\xbc\x9d*\xf1\xbc_}\xa9;\xc4\xd1\b<\xccm9\xbd^\x91\xb5\xbc\xe5=.\xbc(\xb2\xbc\xba\x13\xdb\xac;\xae\xae\xe5\xbc\xd0\xacH\xbb00\xdb\xbbVO;\xbc\xdcK\xe4\xb943F<\xc4\xdb\x0e\xba\x89\xb3\x00;\x0f\x88\x91\xbcp\x01\x1e\xba\xd0\xacH=Z\\\xac<\x13\xb3\x94:-\x83\t=\xbf\xec/<BF\x8d<V'\xa3;\xb3C\x8e<\xbb\x8f\x8e<\x8d$.<F{\x16;R.>\xbd\x13\xe52\xbcW\xff\n\xbb\xe0vg\xbcB<\a\xbd\xe9|=\xbc\xc780\xbc\xdd\xdd!;\xd4\x87\x1b\xbc\xfa\xec\xa5\xbcc\x8a\x1a\xbdR\xde\r=\x94\xd4j=\xae6\x1d=\xe1\xf4\x98<I\x1e\xe2\xbc\xb7x\x17<\x0f\xb0\xa9;k:\xd7<I\n\xd6<\xc3\xf9\xa0\xbc'\x16y<\xf9<V<9\xfa\x8c\xbb\xc7tT<\x01\xbb\xf4\xbc\xed\xcf\xd8<\xe9h\xb1\xbc|n\x1b=\xc7.\xaa\xba\xb7Z\x05;\x84\xe23<\xd84\xed\xbc\x9e\x94\x96<\x99\xeba<W\xf5\x84\xbb$\x91?\xbb\x8cB\xc0\xba\x90\x95\xdb<{\xe6c=g\xa1\x11\xbc\xd0p\xa4<\x88\r\xb7:Ax+=V\x1d\x1d=\xe1&\xb7\xbc\xcb\x8b\xcb\xbcxu\xb6\xbcsh\xc5\xbcE\xad4\xba\x9e\x9e\x1c\xbc\xe9h\xb1:\x90\xbd\xf3\xbcx\x1b\x80\xbdxC\x98\xbb'\x16\xf9;\xdc\x0f@\xbd\x84\x14R;/l\xff\xbc\x81g\x00\xbcs^\xbf<\x89\xf9\xaa\xbc\x1c\xff\x94\xbd\x1b\x1d\xa7;\xaa\xf7\r=\xdcs\xfc\xbc\x13\xd1\xa6<\xb2\xb1P:N\xe5(=\xc7t\xd4\xbc\x1f\xacf\xbc\xbf\xe2)\xbd\x95\xacR<\x88?U\xbd1\xae\x8c\xbc\xe9^\xab<\xb7Z\x85\xbcE\xa3\xae<\x1bYK<\x89\xbd\x06=\xa6\xf4\"\xbb\x0bq\x9a\xba\xe4\xa1j;Ad\x9f\xba\xc4\xdb\x8e\xbc#\xc3]\xbc5\xcf\x89<\xfa\xce\x13\xbd\xbb\x99\x14\xbc\xd4\x87\x1b;V\x8b\xdf;\x94\xe8v\xbdZ\x84\xc4\xbcg\xe7;=\xc4\xe5\x94\xbc\x89\xef\xa4<^\xf5q\xbc\x12+]\xbcx/\x8c\xbc,\x05\xd8\xbc\xe9\x86\xc3<\x17\x060\xbb\x84\xec9\xbc\xbf\xe2)\xbd^\xa5A=g\xfb\xc7\xbc,\xd39=\xb7\x96\xa9\xbc\x90\xd1\x7f\xb7\x1f\xac\xe6<J\x9c\x13;\x1b\x95\xef:E\xa3\xae\xbc^\xf5q=\x80{\x0c\xbd\x91wI<\xb7\xb4;\xbb\xbf\xf6\xb5<\x0f\xba/\xbd\xc3\xf9\xa0<\x1c\xf5\x0e;\xed\xa7@\xbc\x18\xca\x8b\xbb\xc3]]\xbc\xd4\xe1Q<\xb7\x8c#\xbd|d\x15\xb9+-p;\x9e\xb2\xa8\xbbp\xd9\x05<\x95\xacR<\xbb\xf3J=<\xd9\xfc<\xccO'=\xdd\xb5\x89\xbcp\xf7\x97\xbc\xa1Ah< \x16\x8c;xa\xaa<{\xe6c\xbc\xb2u,\xbc\xfe!\xaf:/l\xff<[4\x14\xbc\xe9r7\xbd\xe5)\xa2\xbcb u\xbc\xc7L<\xbc\xb2\xa7\xca\xbc\x06\xd2k=#\xc3\xdd<\x9ev\x84\xb9\x1b\x95\xef;\xa2\xe7\xb1\xbc[\x16\x02<\xa9\xabz\xbb\xf9P\xe2\xba@\xf0s\xbbp\xed\x91\xbb\x1bY\xcb<-\x8d\x8f<,\x05\xd8:\xe9,\r==W\xae\xb9N\xa9\x84<(\xa86\xbc<\x9dX<\x9d*\xf1\xbc\xc3+\xbf\xbc\x85\x92\x03=,\xd3\xb9;\xa1U\xf4;=\x11\x04;\x80\x99\x9e<\xaa[J<\x17\xe8\x1d=|\xb4\xc5;oe\xda<W\xff\n\xbc\xfe\xf9\x96;\xd8\xda6\xbc\xa1\xfb=\xbd\xe5\x15\x96<\x02/ \xbd\xa6\xc2\x04\xbc\xd4\xe1\xd1;g\xdd5<\x0e\xec\xcd<\x80\x85\x12=\n\xd5V\xbc\xf9(J<\xc7\x88`<\x95\xacR\xbc\x8d\xf2\x8f=\xdc\x05\xba:\xab\xed\a=_K\x0b\xbc\x1bY\xcb<\xed\xe3\xe4\xbb\xf6\xb7\x9c<\x84(\xde<,\x19\xe4;\xeeW\x90<9\xfa\x8c<W\xff\x8a\xbc\xa2\xe7\xb1\xbbA\x82\xb1<\x89\xbd\x06;J~\x01\xbd8^I\xbco)\xb68x%\x06<$_\xa1;A\x82\xb1\xbc\x1f\x84\xce\xbc\xbb\xc1,=$U\x1b\xba\xdc_\xf0<\x85\x92\x03\xbd\xa2\x97\x81\xbdt\xfa\x82<\xb2\xd9h:\xdd\xe7\xa7<b\xd0\xc4<N\xdb\xa2<\xe9|\xbd<AP\x13\xbc\xe1\x12\xab\xbcW\xff\n\xbd\x06\xd2k\xbb\x8d\x06\x9c\xbc\xb2\x9d\xc4\xbb\xe9@\x19=RBJ\xbc=W.<\xd9\x94\x8c=\x9e\x9e\x1c=\x99}\x1f=\xae\x9aY<\xb2u\xac<@\xf0s\xbb\xaer\xc1\xbb\x95f(\xbdE\xdf\xd2\xbao\x0b\xa4;\x1bmW=N\xc7\x16\xbcI\xf6I<\x12+]<\xe1\xd6\x86<[ \b=\x98\x13\xfa\xbc\x9d\xe4\xc6\xbb\x80\xfd\xda\xbc\xc7`H<\n\xad\xbe\xbcn\xa1\xfe\xbboGH<\xf5%_=\xd0z\xaa\xbc\x95p.\xbb\x1ff\xbc<#\xd7i\xbd\xedk\x9c:oG\xc8<\x03\x11\x0e\xbc\xe0b\xdb;J\x88\a\xbc\x80{\x0c\xbdp\xe3\x0b\xbb=u\xc0<\xe5)\"<Z\xb6b<\x88!\xc3;\xc8$\xa4\xbc\xd8\xd0\xb0\xbb\x99\xeba\xbc\xd7Hy<\x0f\xce;\xbdA\x82\xb1<\xe5[@\xbc{\x0e\xfc\xbb\x88Sa\xbd\x95p.\xbd\xf9(J<\xbaC\xfb<\xd0\xacH\xbc\xbeF\xe6\xbb\xe5\x15\x96<\xb6\xdcS\xbcF{\x16<\x17\xfc\xa9\xbcN\xc7\x16;\x91mC<=%\x10\xbcN\xbd\x90\xbcZR\xa6\xbcFg\x8a\xbcsT9\xbbQt\xe8<\xb6\xbe\xc1;4oj<\x0e(\xf2<(\x94\xaa\xbc\xb3M\x14\xbcw\x89\xc2\xbc\xed\xe3\xe4\xbb\xbf\xd8#\xbdxa*\xbbw\x89B<E\ak<\xb6\xbeA\xbb\x9d>}\xbc\x0e\x00Z;V'#\xbb\xbb{\x02\xbc\xe8\xb8\xe1\xb9\x03\x11\x0e=\x1fzH<\x84(\xde;\xd0>\x86<\xf2\x82\x93\xbc\xed\x934;\xaao\xd6<$}3<=%\x10\xbd\xa1\x19\xd0\xbbxa\xaa\xbc[\x16\x02\xbdA\xc8[\xbb{\x0e\xfc\xbb\xe4\xa1\xea;E\x99(\xbak:\xd7<\xfe\xdb\x04<\xe5\xf7\x03=\x02\xa7h\xbcg\xd3\xaf<\xf2x\x8d\xbc\x1fp\xc2;\xb2\x9dD:\xccO'\xbd\xaa\x15\xa0\xb9\x13\xef8<IFz<k\xe0 \xbc\xf2\xa0%=M\x17\xc7\xbc\xbb\x99\x14<t\x04\x89\xbc\x99\xaf==\x85\x9c\t\xbcJ\xb0\x9f<xu\xb6:\xbf\xce\x1d\xbc\xa9\xabz\xbb\xaa\x0b\x9a<\x8c\xa6|<\xbb\xd58\xbc\x17\x1a<\xbdW\xff\x8a<\xf59\xeb;Z\xb6b\xbc\x99\xd7U\xbcV\x8b\xdf;\x06\xe6\xf7<\x9as\x99\xbc\xf6\x8f\x04=cb\x82\xbc\x1c\t\x1b\xbc\x80\xe9\xce\xbbf7\xec<M\x17\xc7:k\xcc\x14<t6\xa7<p\x01\x9e<\x96*\x84\xbd\xfa\xb0\x01<\xe0\x8a\xf3<E\xcb\xc6;\xa9\x83\xe2\xba_A\x05<M\x17G\xba|d\x15=\x0f\xc4\xb5:F{\x16=(\x80\x9e<\x91\x81\xcf\xbc\xe8\xe0\xf9<\xa6\xc2\x848<\xc5p\xbc\x17\x060=\x80\xd5B\xbc\x9aK\x01=R\xca\x01\xbd\x98\x13\xfa<\x80\xe9N\xbd >\xa4<k\xc2\x8e<\x13\xa9\x8e<\xb7\x96\xa9<N\xa9\x84<\x9d>}<E\xa3\xae\xbb\xf5M\xf7\xbb\x18\xca\x8b;9\x04\x13<\xa2\xc9\x1f:\xbaC{<\xfe\xf9\x96<f#\xe0;w\xcfl\xbb\xa5\x80w=9\x18\x1f\xbc,\xab!<Z\x8e\xca\xb9\xfa\xce\x93<,\xd3\xb9<\x9ev\x84\xbc\xd8\xbc\xa4<\xe0\x8as\xbc\xfe\xe5\x8a\xbc\xbf\xec\xaf\xbc\x1f\x98Z;E\a\xeb\xbc0\bC\xbbE\ak\xbck&\xcb;Z\xca\xee\xbc\xf1\xb4\xb1=\x9d\x02\xd9\xbc\n\xc1J;\xbf\x14H<\x85\xb0\x95<\xaa\x1f\xa6\xbb'\x02\xed<\xe5G\xb4\xbb\xd0\xa2\xc2\xbc(\x94\xaa<=a4\xbd\xb6\xf0\xdf\xbc\xbb\xd5\xb8<\x06\x8c\xc1<\xccE\xa1\xbc\xe0vg<#\xd7i=\xe9@\x19\xbd\xf2\x8c\x99<\x80\xfd\xda\xbct\"\x1b;\xd8\xda\xb6\xbb$s-\xbc\xd3\t\xea\xbaV\x1d\x9d\xbc\n\xc1J\xbcN\xd1\x9c<\xba\a\xd7\xbc\x9e\x9e\x1c; \x02\x00\xba\xed\xb1\xc6\xbbg\xe7;\xbd\x91O1\xbc\x84\xf6\xbf\xbc#\xc3]\xbc\x13\xdb\xac<\xfe\xef\x90\xbb\a(\x85<<\x9d\xd8\xbc\xc4\xc7\x82<,\x19\xe4<\xcb\x8b\xcb\xbc\xdc\x19F<\xb7\xb4\xbb\xbc\xe9|\xbd<$_!\xbd\xa5\x80w<\x0b\x992\xbc\xd4i\x89\xbd\xbf\xc4\x97;\xb2\xedt\xbcx%\x06<b\xe4P\xbdjv{<\x02uJ<J\xba\xa5<Fq\x90<(X\x06\xbc\xaa\x15 <c\xc6>=|\xb4\xc5<\xaaoV<\xfd\xa3\xfd\xbbJ\xb0\x9f\xbc\x94\xe8v<@\xf0\xf3\xbc\xb3W\x1a\xbc\xbf\x00\xbc\xbc#\xaf\xd1<\n\x11{;\xb7d\x8b\xbb\xed\xbb\xcc;\xc4\xe5\x14=k\b\xb9\xbc\xc4\xdb\x8e<\x0b{ =\xb6\xf0\xdf<\x0b\x85\xa6\xbck\xfe\xb2<w\xa7\xd4\xbb\xc3]\xdd\xba=C\"\xbc9\xf0\x06\xbco3<<\x88\x031<x%\x06\xbd\xc0\xa6\x85<\x13\x17Q\xbcs^\xbf\xbc\xe5\xf7\x83\xbc \x0c\x06\xbd\xc3I\xd1\xbc\xe5=.<$i\xa7;\x85\xa6\x8f<\x9as\x19=9\"%<\xaa\x1f&<\xae^5<'\xee\xe0\xbc\xea\x18\x81\xbb\xcf\xca\xda;\x18\xd4\x11\xbd5\xe3\x15=\aZ\xa3;I\xd8\xb7\xbbI\x1eb==/\x16\xbb1\xcc\x9e;\xf6\xc1\xa2<\x85\x9c\x89\xbb\xb6\xf0\xdf\xbb\xf1\xdcI\xbb\xb2\xed\xf4;AP\x93\xbc\xc4\xdb\x8e=AP\x13;(\xc6\xc8;M!\xcd<\xd5_\x83\xbbA\xaaI<J\xa6\x19=\x17\x06\xb0\xbc\xb3/\x02\xbd\xfd\x8fq<xu\xb6:-y\x03=E\xdfR={\xd2\xd7:\xdc#\xcc\xbcA\xaa\xc9\xbb\xdcK\xe4;\x13\xef\xb8\xbb\x91\x13\x8d\xbc\xc4\xd1\b\xbcU\x9fk\xbc\x89\xd1\x12=\xe5\x01\n=\xfa\xba\a\xbd\xad\xc2q<jv\xfb:N\x03;<\x0f\xb0\xa9<\xae@\xa3;Z\xa2V<Zf2\xbc-y\x03<M5\xd9<\xbb\xc1\xac\xbc\x03\xfd\x01\xbc\xa1\x0fJ<1\xa4\x86\xbc|d\x15<\xcbw?\xbc,\xab\xa1\xb9\xe5Q\xba<__\x97\xbc\xe0DI<\xfeSM;\x8c\xa6|\xbc\xe8\xcc\xed;\x8c\x92p\xbc\xe1&\xb7<jb\xef\xbc1\xae\x8c\xbb\xaaQD\xbc@\xdc\xe7;\xba/\xef<\xe0\x9e\xff;\x8c~\xe4<\x89\xb3\x007@\xdc\xe7<\x06\x8c\xc1\xbb\xba/o<k\xd6\x1a=\xc3]\xdd\xbc\xbb\xa3\x1a<\xe4yR<VO;<t\x0e\x8f<g\xa1\x91=F]\x84<\xb2\xb1P<\xbf\x00<\xbc\x80\x8f\x18\xbd\xa5X_\xbc\x91\x81O;A\xa0\xc3<^\xcd\xd9< H*<x\x1b\x80<\x1f\xc0\xf2;\xc7t\xd4;\xa2\x97\x01\xbc\x99\xeb\xe1;w\xbb`\xbc<\x9d\xd8<Y\xde\xfa\xbcfK\xf8\xbb\x8c~d<\a2\x0b<\x8cVL<Zp8\xbc\x02C\xac;N\xef\xae\xbc00\xdb\xbb\xe1\xd6\x06\xbdV\x1d\x9d9RB\xca<\xb2\xc5\\<\xaa\x15 \xbdxu\xb6<\x80\xe9\xce\xbbAd\x9f<\xf5%_\xb9\x0bI\x02<I\x1e\xe2\xbb|P\t\xbd\x89\xef\xa4\xbb9\xfa\x8c<\xaf\x0e\x05;\x17\xfc)<\x95>\x10\xbb\xb6\xdc\xd3\xbc\x8c\x92p<\xb3k&=\xc7\x88\xe0<\xcb\x9fW<\x8d$\xae<\xad\xd6\xfd<\xaeT/\xbdk\xcc\x94\xbc\x02W8:w\xcf\xec<\x80\xb7\xb0<_i\x1d;\xf6\xb7\x9c\xbc\xb3M\x14;\xd8\xe4\xbc\xbc$U\x1b=\x964\x8a\xbc\xe5\x01\x8a;g\xfbG\xbbk\xf4,\xbc\xb7n\x91\xbc\x06\xd2\xeb\xba\xbb\xdf\xbe\xba(\xdaT\xbc\xa6\xc2\x04<\xba/\xef;\xfa\xd8\x19\xbd\xd4\xe1Q\xbc\x0bI\x02=\xe5eF\xbc\xd4\x9b\xa7<\aZ#<\x06d)\xbd\x91\x81\xcf\xbc\x88\r7\xbd\xb7d\x8b<\xb7d\x8b\xbc9\"\xa5\xbcw\xa7T\xbb\x029\xa6\xbc\x95\xc0\xde\xbb\xa1\x05D\xbd\xfd\x8f\xf1\xbc[*\x0e\xbd\x0f\xce;:\x7f%\xf3\xbc\xdd\xbf\x8f\xbb\x8cLF\xbd\x99\xd7\xd5;\xc3]]<I\xf6\xc9<xC\x98\xbc\x02M2<\xb2\xed\xf4;\xf1\x0e\xe8:\x88S\xe1\xbc\xa9\x97\xee:\xd8\xee\xc2\xbc=a\xb4\xbc\x17\x060<w\xcf\xec<RLP=E\xc1@\xbdZ\xcan\xbcN\xa9\x84\xbbR\xfc\x1f\xbbt@\xad<\n\xe9b<0\xd6\xa4<\x18\xc0\x85<@\xf0\xf3\xbcN\xa9\x04\xbd\x8d.\xb46=C\xa2;{\xd2\xd7<\xf9dn;\xcf\x06\x7f9\x95\xc0\xde\xbc\xe9J\x1f=\xa2\xb5\x93<M]\xf1\xb7\x95\\\"\xbc\xbf\x00\xbc<k:W=\x99\x91\xab<\xcc'\x0f<\x03\a\x88\xbc\xe1\x1c\xb1\xbc\x1b\x1d\xa7\xbcN\xe5(=4[\xde\xbb\xaa32=J\x92\x8d\xbcg\x97\x0b=\x1c\xe1\x02<t\x0e\x0f=n\xa1~<\xe9\xa4U<__\x17<M5Y;\xc7.\xaa<\x17$\xc2<\xf2\x8c\x99\xbcJ~\x81\xbb\xf1\xdcI=n\xa1~<\xdc\xfb3<\n\xe9b;\x99}\x9f\xbc\xae\x86M<MIe=\xa5lk\xbc=k:;,\xab\xa1\xbc\xf5\xf3\xc0:\xf5\xfd\xc6<\xed\x9d\xba\xbc\xbf\xec/\xbb4G\xd2:\xb7\x96)=^\xe1\xe5;\xc3\r\xad\xbb\xd0\xacH\xbd\x0ft\x05;\xaa32=J\xce\xb1:\x0e\x14\xe6\xbc\xd0\\\x98\xbc\x02%\x9a<\x95z\xb4<c\xbc8<\xdd\xbf\x8f;\xfd{\xe5\xbb\xd5_\x03\xbdsJ3\xbdp\x01\x9e\xbc\xa2\xd3%=\xf2\x96\x1f;\xd8 a<\x9e\xb2\xa8;\x06\xe6w\xbb\x9e\x94\x96<\xeeC\x84<\x18\xca\x0b<_}\xa9\xbc\x1bY\xcb<kN\xe3;\x16j\xec<" "content" "### Summary:\nThe video discusses the limitations encountered with scaling MySQL databases for high-performance applications, highlighting that MySQL, although popular for being free and open-source, tends to slow down significantly with increased data volume, especially when running secondary indexes. To address these challenges, the video introduces Redis Enterprise as a viable performance solution that works in tandem with MySQL. Redis Enterprise is described as the world\xe2\x80\x99s leading real-time data platform, capable of storing critical and commonly accessed data in memory to provide sub-millisecond speed. It also offers an effective way to offload secondary indexed queries, thereby enhancing response times and mitigating scaling difficulties associated with MySQL. Viewers are encouraged to attend a webinar to learn more about integrating MySQL and Redis Enterprise.\n\n### Example Questions and Answers:\n\n**Q1: Why does MySQL become slow when scaling?**  \nA1: MySQL tends to slow down with increased data volume and complexity, particularly when running secondary indexes, due to its architecture as a relational database.\n\n**Q2: What is Redis Enterprise?**  \nA2: Redis Enterprise is described as the world\xe2\x80\x99s leading real-time data platform, which enables the storage of application's critical and commonly accessed data in memory, delivering it with sub-millisecond speed.\n\n**Q3: How can Redis Enterprise improve MySQL performance?**  \nA3: Redis Enterprise can be used in conjunction with MySQL to offload critical and commonly accessed data as well as secondary indexed queries. This approach enhances response speeds and alleviates the scaling challenges inherent in MySQL.\n\n**Q4: Are secondary indexed queries a reason for MySQL\xe2\x80\x99s slow performance at scale?**  \nA4: Yes, secondary indexed queries are particularly problematic as they significantly slow down response times when MySQL is scaled.\n\n**Q5: Where can I learn more about using MySQL with Redis Enterprise?**  \nA5: The video recommends attending a webinar, which is detailed in the information provided below the video, for those interested in learning more about integrating MySQL with Redis Enterprise.\n\n**Q6: Can Redis Enterprise be considered a substitute for MySQL?**  \nA6: No, Redis Enterprise is suggested as a supplementary solution to be used alongside MySQL, enhancing its performance rather than replacing it." "metadata" "{\"id\":\"FQzlq91g7mg\",\"link\":\"https://www.youtube.com/watch?v=FQzlq91g7mg\",\"title\":\"Redis + MySQL in 60 Seconds\",\"description\":\"What are the possibilities for MySQL when integrating with the real\\-time power of Redis? Try Redis Cloud for free: https://redis.com/try\\-free/\\n\\nMySQL is open source, free, and can be fast when working on a relational database, but to handle modern use cases, your MySQL will need a boost of real\\-time performance \\- the type Redis Enterprise can provide. MySQL can be difficult to scale and lacks the modern features necessary to quickly operate complex queries. Enable your MySQL applications with the real\\-time performance power of Redis.\\n\\nFrom the blog: https://redis.com/blog/3\\-reasons\\-your\\-mysql\\-db\\-needs\\-redis/\\n\\nDownload our MySQL Solution Brief: https://redis.com/docs/modernize\\-your\\-mysql\\-database\\-with\\-redis\\-enterprise/\\n\\nExplore Redis + MySQL: https://redis.com/comparisons/redis\\-enterprise\\-and\\-mysql/\\n\\nTry Redis Enterprise Cloud for free: https://redis.com/try\\-free/\\n\\n#MySQL #SQL #Redis\",\"thumbnail\":\"https://i.ytimg.com/vi/FQzlq91g7mg/maxresdefault.jpg\"}"
"EXEC"
"MULTI"
"HSET" "openai-video:0" "content_vector" "\xf59k\xbb\xf6\x99\n=(\x80\x9e=Y\xdez\xbb\xa9\x97\xee<RB\xca<=/\x96;9\xe6\x00=\xc4\xc7\x82\xbc\xf2x\x8d<\xbf\x1e\xce\xbb\xdc_p;\x88{\xf9\xbc\xb2u,<k:W<s\xa4\xe9\xbc\x84\xe23\xbc\xf2\x82\x13\xbc\xaeh;\xbb\x84\x00\xc6<\x9aK\x81=\xbeZr<\xdd\xbf\x0f=R.\xbe<\x91\xff\x00\xbdR\xd4\a\xbd9\xf0\x86\xbc\x80\xe9\xce<\xcbw?=\xc2\x85u\xbd\x95>\x90<\x0e\x14\xe6\xbc\xfe\x17)\xbdoy\xe6\xba\xbf\x1e\xce\xb8_i\x9d\xbb\x90\x95\xdb<\xd4\xb9\xb9\xbc\x1c\xeb\x88<\x0b{\xa0<\xf5\xf3\xc0<Z\xca\xee\xbc\xb39\x88\xbc\xaa\x01\x14<5\x0b\xae<\xba/\xef;=\x11\x04\xbcoeZ\xbd4[\xde<|P\x89<\xdc\x0f\xc0\xbc\x12?\xe9<<\xd9|;\xc7\x9cl;\xc7B6=,\xf1\xcb\xbcE\x99(<\x13\xd1\xa6\xbb[>\x1a\xbc\xbb\xf3\xca\xbcc\xa8,=\xd0H\x0c\xbd\x80\xcb<<\x84(\xde<\x0bI\x82\xbc+A|<N\xbd\x10<\x03\x11\x8e\xbc\x89\xef$\xbd\xaf\x0e\x85<=\x89\xcc<IF\xfa\xbb\x06\xbe\xdf<\x88S\xe1\xb9\xd8\xbc$=\xfe\r\xa3;\xc8\x10\x98\xbb\x13\xbd\x1a=\x90\x95[\xbaZf2=\xdd\xab\x03\xbdg\xb5\x1d\xbbc\xb22\xbc\xb7\x8c#==M\xa8<\xab\xed\a<\x02kD\xbct@\xad\xbc\xb7x\x17=\xcb\xdb\xfb;\x90\xbds\xbd\n\xad>;,\xf1K\xbc'\x16y<\xa1\x19P<\x9d\xee\xcc<Q\x88t=$A\x0f=\x16~\xf8\xbb\x02W\xb8<@\xdc\xe7\xbb=\x1b\n\xbdg\x8d\x859(l\x92\xbc\x0e\x14\xe6;\xae6\x1d\xbd\x12?\xe9<,\xa1\x1b\xbc\xc7\x9cl;\xbf\xb0\x8b<\xd8\xa8\x98\xbd\x89\xdb\x18\xbd\xc4\xdb\x0e:\x84(\xde\xbc\x1b\x95\xef\xbb\xf6\x99\n\xbd\xd0\\\x18\xbd,\xdd\xbf\xbc\xa1-\xdc\xbc-y\x83: H\xaa\xbc\x0f\xb0\xa9:\x80\xd5B\xbd\aP\x9d\xbc\xd4\xe1Q\xbb_U\x11\xbdg\xc9)=\xa5X\xdf<\xccY-\xbc\xcc\x1d\t\xbc\xa2\xbf\x19=\xdc\x19F=\n\x11\xfb<oy\xe6\xbcR\xde\x8d\xbcA\x821=\xa1\x19P\xbd_s\xa3\xbbZz\xbe<\xd0\\\x18\xbd1\xcc\x9e\xbc\x7f%s\xbdkN\xe3\xbb\x99\x91+=#\xaf\xd1\xbc\x1bOE\xbd\xfe\xef\x90<\x8c\x92\xf0;U\x9f\xeb\xb9\xc7\x9cl\xbc\xf5\x11\xd3<\xa2\x97\x01=\xba\x1bc\xbdU\xb3\xf7\xbcjb\xef\xbc\x99\xeb\xe1\xbc@\xf0s=\x17.H<\xc3\xf9 =\x17\x106\xbd(v\x18\xbco\x8dr<(\xdaT\xbc\x1f\xc0\xf2<VYA\xbd\xa9\x83\xe2;g\xd3\xaf\xbc\xaa=\xb8\xbc\x8c\x92p\xbd=u\xc0\xbc\x9ai\x13\xbc\xb2\xc5\xdc\xbc\aF\x17=g\xe7;=,\x19d=k\xcc\x14=(\x94\xaa\xbc\x8d$.\xbd\x0ft\x85<=\x11\x04\xbc\xe5Q:\xbdg\xf1A<\xfe\xef\x10\xbd\xe8\xe0\xf9<b\x0ci\xbc\xcbw?<\xa2\xbf\x99\xbd\xf5M\xf7\xbb\x1b\x95\xef\xbcAx+<t6'\xbd\xcc\x1d\x89=\x0e(r\xba\x95f(=(N\x80<\x84\xce'<\xcb\x8b\xcb<\x8c\x92\xf0\xbaoQN\xbd\x91m\xc3\xbbR\x10\xac\xbas^\xbf\xb9\x89\xdb\x98=\xdd\xd3\x9b;\xb2u,=<\xb1d\xbbW\xff\n=R\xde\r<A\x96=\xbdg\xab\x97<,\x97\x95;\xccm9\xbd\xe0\x8a\xf3<k:W;w\xe3\xf8;Fq\x90;\x91mC\xbd\x1ff\xbc;E\x8f\xa2\xbb\xd4\xc3?\xbcJ\xa6\x19\xbd\xec\x0b}=\x90\xd1\x7f<\xe0N\xcf\xbcfK\xf8\xbb\xed\xcfX\xbc\xe0vg=|\x963\xbc\xb6\xf0\xdf\xb9\x02M\xb2<<\xc5p<\xfd{\xe5\xbcV'#\xbc\xfe\xf9\x96\xbcg\xe7\xbb<o\x8d\xf2\xbc-\x8d\x0f\xbcJ\xa6\x99\xbc\xd0f\x9e:A\x82\xb1;\xe9\"\a=\x99\xa5\xb7<$s\xad\xbc\n\xfd\xee\xbcA\x96\xbd<\x91wI\xbc\xdc#L\xbd\xaf\x0e\x85\xbd\xbf\xec/=^\xb9M=\xcf\x06\x7f<F\x85\x9c\xba_K\x0b<=u@\xbb\xe5\x01\n\xbc^\xaf\xc7\xbd\x91\x13\x8d\xbbF\x85\x9c;\xe0b[\xbb\xaa\x1f&<\x99\xc3I\xbdc\xbc8\xbd\xd4\xa5-\xbc9\xfa\x0c\xbcVY\xc1\xbc\x0f\xa6#<\x80\xfd\xda;\x7f9\xff\xbc\xf6\xb7\x1c\xbb961;b u=k\xcc\x94\xbcg\xe7\xbb;\xcb\xb3\xe3\xbcw\xe3\xf8\xbc\n\xc1\xca;R\x06\xa6<\x8c~\xe4<An%<\x02\x7f\xd0;t\xfa\x82;\xdcs|\xbd\x0bI\x02\xbd\x02k\xc4<\xae\x9a\xd9;\xbf\xba\x91<\xbb\x85\x88;\x80\x85\x12=\x99\xffm=p\xf7\x17\xbd\xea\x18\x81\xbdA\xa0C\xbd\xae|G\xbd5\xd9\x0f=0\xea0\xbc\xd0\\\x18<\xa2\xb5\x93\xba\xd0\x8e6=V\t\x91<$s-<g\x8d\x85< \x02\x00=\x0bq\x9a\xbc\x80\xb70<xW\xa4\xbc8^\xc9<\x02C,\xbd9@\xb7\xba\xaaQ\xc4\xbc+A\xfc;\xe8\xb8a\xbd\xe1\xf4\x98<\xbb\x8f\x8e\xba\x95p\xae<\xf6\x8f\x84\xbc\x89\xef\xa4\xbc\x9d\xd0:=5\xd9\x0f\xbd9TC\xbb\xcf\xcaZ\xbd\x1c\xe1\x02<\xf6\xcb(\xbd\xb39\x88<\x9e\xa8\xa2\xbc^\xf5\xf1<\xa1\x0fJ\xbcE\x99\xa8<I2n\xbc\xc7t\xd4<\xc3!9\xbd\xae6\x1d\xbc9J\xbd\xbc\x85\xb0\x95<\x13\xdb\xac\xbc\x9aK\x81\xba\x02\x7f\xd0\xbc\xd8\xeeB\xbcZ\x8eJ:\x0b{ \xbdc\x80\x94<\xe5[\xc0<\xc7\xb0x\xbb\x96*\x04\xbd|F\x83\xbc\x80\xdf\xc8;|\x96\xb3\xba\x99\xb9C\xbc\xd3\t\xea<\x1c\xeb\b\xbdQ`\\\xbc\xf6\xad\x96\xbd\x12Su\xbd\x9as\x19\xbd\x1b13\xbd\x1bYK=b u:\xbf2\xda\xbb(\xdaT\xbd\x1c\xe1\x82\xbd\xa5l\xeb\xbccl\x88\xbc\xe1\xe0\x8c<\xe9\xa4\xd5<^\xcd\xd9:o3\xbc<\xc4\xd1\b\xba\xd4\xe1\xd1\xbb(l\x92\xbb(v\x18\xbb\xe9\xa4\xd5;\x9d\xbc\xae;\xdc7X<{\xfa\xef\xbcIFz<\xa2\xb5\x93\xbd\xd4\xe1\xd1<'\x02\xed;8rU==\x7f\xc6\xbb\xcb\xc7\xef;\x1f\\6={\x0e\xfc;\xdd\xc9\x15;\xd0\x8e6\xbd\xe9,\x8d<\x1f\x84\xce<^\x915\xbb\xd0\x8e6<\xf2d\x01\xbd\xfe?\xc1<\xc3\x03';\xaa[\xca;oeZ\xbcE\xa3.\xbc\xa6\x125=\x13\xc7 =\xd5_\x83\xbb<\xb1d\xbc\x17\xf2\xa3=\xa1\x05D<\xc4\xc7\x82<\x9aK\x01\xbd\x1bmW\xbd\x95>\x90\xbc\x1f\x84N\xbd\xb2\xc5\xdc\xbc\xae|\xc7\xbc\xf1\xd2\xc3\xbc,\xe7\xc5\xbc\x95\xc0^\xbc\xa2\xa1\a;\xb2\x93\xbe\xbc\x9d*\xf1\xbaJ\xb0\x9f\xbb\xfe\xe5\x8a<(N\x00\xbds^?\xbd\xed\xb1F=|d\x95\xba\x94\xd4\xea<'\xee`;\xfeS\xcd\xbc\xd4i\x89\xbd\xe8\xe0y<\xe0N\xcf\xbcp\xf7\x17=\x99\xaf\xbd\xbc\x9a_\x8d\xbcx9\x12\xbd\xc8\x10\x18\xbdoGH\xbd\x0e(\xf2;\xc7\x88\xe0;\x91\x81\xcf:\xd8\xe4\xbc\xbc\x95\xacR==\x11\x84<\x80\x8f\x98;\xb6\xbe\xc1<\x89\xbd\x86\xbdk\xd6\x9a\xbc\xe5G4\xbc\x02M2\xbd\xf5\xe9\xba<\xab\xe3\x01\xbd\x99\xb9\xc3;\x88\r7\xbd  \x92<  \x12=N\xc7\x16=\xe0v\xe7\xba\x91mC\xbc\n\xfd\xee\xbb\xe0N\xcf<\x1bY\xcb:\x06\xaaS\xbd\x95\xacR<\xd0H\x0c:\xe9\x90I=\x91c=\xbd\x98\x13z\xbd\xd9\x80\x80<n\xa1\xfe:w\x89B=\x94\xd4\xea<\x1bm\xd7\xbbFq\x90<\xbeZ\xf2<N\x03;=\x80\x85\x12\xbd\xa6\xea\x1c<\xc3IQ=\x06\x8c\xc1<\xaa\x01\x94<\xa1Ah\xbd\xed\xcf\xd8\xbbk\xfe\xb2<\xb6\xbeA<\x8d\xf2\x8f<\xfa\xb0\x81\xbc\xf1\xd2\xc3\xbc\xe4\x8d^\xbct\x0e\x8f\xbb\x1b\x81\xe3<8\x86\xe1\xba\xe8\xb8a<\x8d$.=k\xe0\xa0<\xcc\x1d\t<\x13\xef\xb8;#\xd7i\xbcf7l;\xf2\xa0%=_\x87/\xbc\x90\xd1\x7f\xbd\x13\xdb\xac\xbc\xa1\x05\xc4\xbc \x02\x80\xbd\xfe\r\xa3<E\xcb\xc6\xbb\xa1-\xdc;V\x1d\x1d\xbd\x13\xbd\x9a\xbc\xfa\xba\a=cv\x0e\xbd\x13\xb3\x94\xbcU\xb3w;\xc4\xc7\x02\xbdx\x1b\x80<\x84\x14\xd2<\xeeC\x04\xbc\x89\xef$\xbc\x84\xe23;A\xc8[=\x06\xaaS\xbb\xe9\xa4\xd5<\x17\x1a<\xbc\xf1\xd2\xc3\xbcJ\x88\x87\xbb\xa2\xd3%\xbc\x85\xa6\x8f\xbc\xe96\x93\xbc\x1bE\xbf\xbc\xe1\x1c\xb1<o\x8d\xf2<=9\x1c=Z\xca\xee\xbcR8\xc4\xbbVwS\xbc\x80\x99\x1e\xbd\xc3qi\xbc\xccm\xb9</l\xff\xbb\xc780=\xd8\x0c\xd5;\xbf\xba\x11\xbd^\xb9M\xbc\x9ai\x13\xbc(\xc6\xc8\xbc$7\x89<\xc7tT<x/\x0c<\xf9xz\xbc\xe0\x8a\xf3<\x06d)<\x84<\xea\xbb0\x1cO<@\xf0\xf3\xbbk:W\xbc\x0f\xb0)<\xbb\x8f\x0e\xbc\xbf\x1eN\xbd\xcb\xb3c=\xaa\x1f\xa6\xbb\xa2\xa1\x87<\xb7Z\x85\xbc[>\x1a\xbc\xbf\xc4\x97\xbcJ\xce1<x/\x8c<\xb7n\x11\xbbw\xcf\xec:N\xc7\x16\xbc\x9e\x8a\x10<\x16jl\xba\x1b\x1d'\xbb\xa5DS9k&\xcb\xbc\xd4}\x95\xbc\xb2\x898=\xbf\xe2\xa9\xbc\xd4i\x89\xbb\xbf\xb0\x8b<\x99\xeb\xe1\xbc\xfe\xe5\x8a<8\xae\xf9<\xa6\xd6\x10=^\xa5\xc1\xbc\xd0\x98<;\xf9<\xd6\xbb\xaao\xd6\xbbM!\xcd\xbc1\xae\x0c\xb9\xbb\xf3\xca<\xdd\xdd\xa1\xbc\xe9\xa4U\xbco)\xb6<\xd3\tj:5\x0b.<\xb3k\xa6<Z\xa2\xd6\xbb\x91Y\xb7\xbb >\xa4\xbc\xb6\xf0\xdf;\xben\xfe<\n\xd5V\xba1\xc2\x18=\xe9h\xb1\xbb\x88gm\xbcN\xdb\"=\x06x5<k\xcc\x14\xbbF]\x04\xbb\x84\xf6?\xbd\xdd\xdd\xa1\xbc_})=\xf9P\xe2;\x8d\xfc\x95<\xbf\xc4\x17<\x9d>\xfd\xbc\xd9\x9e\x12\xbd\x1f\x84\xce\xbcs\xb8u\xbc\x1f\x84N\xbdf7l\xbc\xfa\xc4\r<\xe9J\x1f\xbcc\x9e\xa6:t@-<\x06\x96\xc7\xbc\xe9\x86\xc3;\xbaC\xfb\xbc\x1c\xf5\x8e\xbc\x88S\xe1\xbc\xbf\xba\x11=\x91;%=t@-\xbc0\xd6\xa4\xbd\x12+\xdd\xbb@\xdcg:\x9as\x99<\xcf\xb6\xce\xbb\x8cj\xd8\xbb\x12?\xe9\xbc\xed\xbbL\xbbMq}<1\xb8\x92\xbbAP\x93\xba\xd8\xa8\x98<Zp\xb8;\xec\x0b\xfd<\xf1\"\xf4<_}\xa9\xbc(\x8a\xa4\xbc\xd8\xc6\xaa;\n\xe9b\xbc\xe9\xa4\xd5<\x96*\x84\xbc\xaa[J\xbc\xa6\xd6\x10\xbcf#`\xbc\xb3a\xa0\xbcl\xb8\x88=\x95>\x90\xbb\x89\xbd\x86<\x17\xf2#\xbb\xc2\x85\xf5\xbc,\x19d\xbc\x1ff<;\xa1\x0fJ\xbb\x95\x8e@\xbd\x84\x00\xc6<\x95z4\xbd\xf1\xc8=\xbc\x1f\x98\xda\xbc+-p;\x84\xc4\xa1<$_!<\x0f\x9c\x1d\xbcoQ\xce\xbco\x8dr\xbd\xed\x93\xb4\xbc\x06x\xb5<b\x0ci<V'#;\x8c~d<x9\x92<\x02kD;\xaaoV<,\x97\x95<\x81q\x86\xbc\xe4\x8d^<4G\xd2\xbc\xe1\b%\xbdE\xf3^<b \xf5\xbc \x16\x0c\xbc=\x7f\xc6;(l\x92<-y\x83\xbb\xd8 \xe1<\xcb\x81E<9\x04\x13\xbcc\xa8\xac\xbcQ\x88t\xbcn\xa1\xfe<\xe4\xb5\xf6<\x1bOE=\x1b\x95o<\xd4\x9b\xa7\xbd\xa1A\xe8\xbc00\xdb<,\x05X\xbd\x80\x99\x9e;k:\xd7\xbc(\x9e\xb0\xbc\x9d*\xf1\xbc_}\xa9;\xc4\xd1\b<\xccm9\xbd^\x91\xb5\xbc\xe5=.\xbc(\xb2\xbc\xba\x13\xdb\xac;\xae\xae\xe5\xbc\xd0\xacH\xbb00\xdb\xbbVO;\xbc\xdcK\xe4\xb943F<\xc4\xdb\x0e\xba\x89\xb3\x00;\x0f\x88\x91\xbcp\x01\x1e\xba\xd0\xacH=Z\\\xac<\x13\xb3\x94:-\x83\t=\xbf\xec/<BF\x8d<V'\xa3;\xb3C\x8e<\xbb\x8f\x8e<\x8d$.<F{\x16;R.>\xbd\x13\xe52\xbcW\xff\n\xbb\xe0vg\xbcB<\a\xbd\xe9|=\xbc\xc780\xbc\xdd\xdd!;\xd4\x87\x1b\xbc\xfa\xec\xa5\xbcc\x8a\x1a\xbdR\xde\r=\x94\xd4j=\xae6\x1d=\xe1\xf4\x98<I\x1e\xe2\xbc\xb7x\x17<\x0f\xb0\xa9;k:\xd7<I\n\xd6<\xc3\xf9\xa0\xbc'\x16y<\xf9<V<9\xfa\x8c\xbb\xc7tT<\x01\xbb\xf4\xbc\xed\xcf\xd8<\xe9h\xb1\xbc|n\x1b=\xc7.\xaa\xba\xb7Z\x05;\x84\xe23<\xd84\xed\xbc\x9e\x94\x96<\x99\xeba<W\xf5\x84\xbb$\x91?\xbb\x8cB\xc0\xba\x90\x95\xdb<{\xe6c=g\xa1\x11\xbc\xd0p\xa4<\x88\r\xb7:Ax+=V\x1d\x1d=\xe1&\xb7\xbc\xcb\x8b\xcb\xbcxu\xb6\xbcsh\xc5\xbcE\xad4\xba\x9e\x9e\x1c\xbc\xe9h\xb1:\x90\xbd\xf3\xbcx\x1b\x80\xbdxC\x98\xbb'\x16\xf9;\xdc\x0f@\xbd\x84\x14R;/l\xff\xbc\x81g\x00\xbcs^\xbf<\x89\xf9\xaa\xbc\x1c\xff\x94\xbd\x1b\x1d\xa7;\xaa\xf7\r=\xdcs\xfc\xbc\x13\xd1\xa6<\xb2\xb1P:N\xe5(=\xc7t\xd4\xbc\x1f\xacf\xbc\xbf\xe2)\xbd\x95\xacR<\x88?U\xbd1\xae\x8c\xbc\xe9^\xab<\xb7Z\x85\xbcE\xa3\xae<\x1bYK<\x89\xbd\x06=\xa6\xf4\"\xbb\x0bq\x9a\xba\xe4\xa1j;Ad\x9f\xba\xc4\xdb\x8e\xbc#\xc3]\xbc5\xcf\x89<\xfa\xce\x13\xbd\xbb\x99\x14\xbc\xd4\x87\x1b;V\x8b\xdf;\x94\xe8v\xbdZ\x84\xc4\xbcg\xe7;=\xc4\xe5\x94\xbc\x89\xef\xa4<^\xf5q\xbc\x12+]\xbcx/\x8c\xbc,\x05\xd8\xbc\xe9\x86\xc3<\x17\x060\xbb\x84\xec9\xbc\xbf\xe2)\xbd^\xa5A=g\xfb\xc7\xbc,\xd39=\xb7\x96\xa9\xbc\x90\xd1\x7f\xb7\x1f\xac\xe6<J\x9c\x13;\x1b\x95\xef:E\xa3\xae\xbc^\xf5q=\x80{\x0c\xbd\x91wI<\xb7\xb4;\xbb\xbf\xf6\xb5<\x0f\xba/\xbd\xc3\xf9\xa0<\x1c\xf5\x0e;\xed\xa7@\xbc\x18\xca\x8b\xbb\xc3]]\xbc\xd4\xe1Q<\xb7\x8c#\xbd|d\x15\xb9+-p;\x9e\xb2\xa8\xbbp\xd9\x05<\x95\xacR<\xbb\xf3J=<\xd9\xfc<\xccO'=\xdd\xb5\x89\xbcp\xf7\x97\xbc\xa1Ah< \x16\x8c;xa\xaa<{\xe6c\xbc\xb2u,\xbc\xfe!\xaf:/l\xff<[4\x14\xbc\xe9r7\xbd\xe5)\xa2\xbcb u\xbc\xc7L<\xbc\xb2\xa7\xca\xbc\x06\xd2k=#\xc3\xdd<\x9ev\x84\xb9\x1b\x95\xef;\xa2\xe7\xb1\xbc[\x16\x02<\xa9\xabz\xbb\xf9P\xe2\xba@\xf0s\xbbp\xed\x91\xbb\x1bY\xcb<-\x8d\x8f<,\x05\xd8:\xe9,\r==W\xae\xb9N\xa9\x84<(\xa86\xbc<\x9dX<\x9d*\xf1\xbc\xc3+\xbf\xbc\x85\x92\x03=,\xd3\xb9;\xa1U\xf4;=\x11\x04;\x80\x99\x9e<\xaa[J<\x17\xe8\x1d=|\xb4\xc5;oe\xda<W\xff\n\xbc\xfe\xf9\x96;\xd8\xda6\xbc\xa1\xfb=\xbd\xe5\x15\x96<\x02/ \xbd\xa6\xc2\x04\xbc\xd4\xe1\xd1;g\xdd5<\x0e\xec\xcd<\x80\x85\x12=\n\xd5V\xbc\xf9(J<\xc7\x88`<\x95\xacR\xbc\x8d\xf2\x8f=\xdc\x05\xba:\xab\xed\a=_K\x0b\xbc\x1bY\xcb<\xed\xe3\xe4\xbb\xf6\xb7\x9c<\x84(\xde<,\x19\xe4;\xeeW\x90<9\xfa\x8c<W\xff\x8a\xbc\xa2\xe7\xb1\xbbA\x82\xb1<\x89\xbd\x06;J~\x01\xbd8^I\xbco)\xb68x%\x06<$_\xa1;A\x82\xb1\xbc\x1f\x84\xce\xbc\xbb\xc1,=$U\x1b\xba\xdc_\xf0<\x85\x92\x03\xbd\xa2\x97\x81\xbdt\xfa\x82<\xb2\xd9h:\xdd\xe7\xa7<b\xd0\xc4<N\xdb\xa2<\xe9|\xbd<AP\x13\xbc\xe1\x12\xab\xbcW\xff\n\xbd\x06\xd2k\xbb\x8d\x06\x9c\xbc\xb2\x9d\xc4\xbb\xe9@\x19=RBJ\xbc=W.<\xd9\x94\x8c=\x9e\x9e\x1c=\x99}\x1f=\xae\x9aY<\xb2u\xac<@\xf0s\xbb\xaer\xc1\xbb\x95f(\xbdE\xdf\xd2\xbao\x0b\xa4;\x1bmW=N\xc7\x16\xbcI\xf6I<\x12+]<\xe1\xd6\x86<[ \b=\x98\x13\xfa\xbc\x9d\xe4\xc6\xbb\x80\xfd\xda\xbc\xc7`H<\n\xad\xbe\xbcn\xa1\xfe\xbboGH<\xf5%_=\xd0z\xaa\xbc\x95p.\xbb\x1ff\xbc<#\xd7i\xbd\xedk\x9c:oG\xc8<\x03\x11\x0e\xbc\xe0b\xdb;J\x88\a\xbc\x80{\x0c\xbdp\xe3\x0b\xbb=u\xc0<\xe5)\"<Z\xb6b<\x88!\xc3;\xc8$\xa4\xbc\xd8\xd0\xb0\xbb\x99\xeba\xbc\xd7Hy<\x0f\xce;\xbdA\x82\xb1<\xe5[@\xbc{\x0e\xfc\xbb\x88Sa\xbd\x95p.\xbd\xf9(J<\xbaC\xfb<\xd0\xacH\xbc\xbeF\xe6\xbb\xe5\x15\x96<\xb6\xdcS\xbcF{\x16<\x17\xfc\xa9\xbcN\xc7\x16;\x91mC<=%\x10\xbcN\xbd\x90\xbcZR\xa6\xbcFg\x8a\xbcsT9\xbbQt\xe8<\xb6\xbe\xc1;4oj<\x0e(\xf2<(\x94\xaa\xbc\xb3M\x14\xbcw\x89\xc2\xbc\xed\xe3\xe4\xbb\xbf\xd8#\xbdxa*\xbbw\x89B<E\ak<\xb6\xbeA\xbb\x9d>}\xbc\x0e\x00Z;V'#\xbb\xbb{\x02\xbc\xe8\xb8\xe1\xb9\x03\x11\x0e=\x1fzH<\x84(\xde;\xd0>\x86<\xf2\x82\x93\xbc\xed\x934;\xaao\xd6<$}3<=%\x10\xbd\xa1\x19\xd0\xbbxa\xaa\xbc[\x16\x02\xbdA\xc8[\xbb{\x0e\xfc\xbb\xe4\xa1\xea;E\x99(\xbak:\xd7<\xfe\xdb\x04<\xe5\xf7\x03=\x02\xa7h\xbcg\xd3\xaf<\xf2x\x8d\xbc\x1fp\xc2;\xb2\x9dD:\xccO'\xbd\xaa\x15\xa0\xb9\x13\xef8<IFz<k\xe0 \xbc\xf2\xa0%=M\x17\xc7\xbc\xbb\x99\x14<t\x04\x89\xbc\x99\xaf==\x85\x9c\t\xbcJ\xb0\x9f<xu\xb6:\xbf\xce\x1d\xbc\xa9\xabz\xbb\xaa\x0b\x9a<\x8c\xa6|<\xbb\xd58\xbc\x17\x1a<\xbdW\xff\x8a<\xf59\xeb;Z\xb6b\xbc\x99\xd7U\xbcV\x8b\xdf;\x06\xe6\xf7<\x9as\x99\xbc\xf6\x8f\x04=cb\x82\xbc\x1c\t\x1b\xbc\x80\xe9\xce\xbbf7\xec<M\x17\xc7:k\xcc\x14<t6\xa7<p\x01\x9e<\x96*\x84\xbd\xfa\xb0\x01<\xe0\x8a\xf3<E\xcb\xc6;\xa9\x83\xe2\xba_A\x05<M\x17G\xba|d\x15=\x0f\xc4\xb5:F{\x16=(\x80\x9e<\x91\x81\xcf\xbc\xe8\xe0\xf9<\xa6\xc2\x848<\xc5p\xbc\x17\x060=\x80\xd5B\xbc\x9aK\x01=R\xca\x01\xbd\x98\x13\xfa<\x80\xe9N\xbd >\xa4<k\xc2\x8e<\x13\xa9\x8e<\xb7\x96\xa9<N\xa9\x84<\x9d>}<E\xa3\xae\xbb\xf5M\xf7\xbb\x18\xca\x8b;9\x04\x13<\xa2\xc9\x1f:\xbaC{<\xfe\xf9\x96<f#\xe0;w\xcfl\xbb\xa5\x80w=9\x18\x1f\xbc,\xab!<Z\x8e\xca\xb9\xfa\xce\x93<,\xd3\xb9<\x9ev\x84\xbc\xd8\xbc\xa4<\xe0\x8as\xbc\xfe\xe5\x8a\xbc\xbf\xec\xaf\xbc\x1f\x98Z;E\a\xeb\xbc0\bC\xbbE\ak\xbck&\xcb;Z\xca\xee\xbc\xf1\xb4\xb1=\x9d\x02\xd9\xbc\n\xc1J;\xbf\x14H<\x85\xb0\x95<\xaa\x1f\xa6\xbb'\x02\xed<\xe5G\xb4\xbb\xd0\xa2\xc2\xbc(\x94\xaa<=a4\xbd\xb6\xf0\xdf\xbc\xbb\xd5\xb8<\x06\x8c\xc1<\xccE\xa1\xbc\xe0vg<#\xd7i=\xe9@\x19\xbd\xf2\x8c\x99<\x80\xfd\xda\xbct\"\x1b;\xd8\xda\xb6\xbb$s-\xbc\xd3\t\xea\xbaV\x1d\x9d\xbc\n\xc1J\xbcN\xd1\x9c<\xba\a\xd7\xbc\x9e\x9e\x1c; \x02\x00\xba\xed\xb1\xc6\xbbg\xe7;\xbd\x91O1\xbc\x84\xf6\xbf\xbc#\xc3]\xbc\x13\xdb\xac<\xfe\xef\x90\xbb\a(\x85<<\x9d\xd8\xbc\xc4\xc7\x82<,\x19\xe4<\xcb\x8b\xcb\xbc\xdc\x19F<\xb7\xb4\xbb\xbc\xe9|\xbd<$_!\xbd\xa5\x80w<\x0b\x992\xbc\xd4i\x89\xbd\xbf\xc4\x97;\xb2\xedt\xbcx%\x06<b\xe4P\xbdjv{<\x02uJ<J\xba\xa5<Fq\x90<(X\x06\xbc\xaa\x15 <c\xc6>=|\xb4\xc5<\xaaoV<\xfd\xa3\xfd\xbbJ\xb0\x9f\xbc\x94\xe8v<@\xf0\xf3\xbc\xb3W\x1a\xbc\xbf\x00\xbc\xbc#\xaf\xd1<\n\x11{;\xb7d\x8b\xbb\xed\xbb\xcc;\xc4\xe5\x14=k\b\xb9\xbc\xc4\xdb\x8e<\x0b{ =\xb6\xf0\xdf<\x0b\x85\xa6\xbck\xfe\xb2<w\xa7\xd4\xbb\xc3]\xdd\xba=C\"\xbc9\xf0\x06\xbco3<<\x88\x031<x%\x06\xbd\xc0\xa6\x85<\x13\x17Q\xbcs^\xbf\xbc\xe5\xf7\x83\xbc \x0c\x06\xbd\xc3I\xd1\xbc\xe5=.<$i\xa7;\x85\xa6\x8f<\x9as\x19=9\"%<\xaa\x1f&<\xae^5<'\xee\xe0\xbc\xea\x18\x81\xbb\xcf\xca\xda;\x18\xd4\x11\xbd5\xe3\x15=\aZ\xa3;I\xd8\xb7\xbbI\x1eb==/\x16\xbb1\xcc\x9e;\xf6\xc1\xa2<\x85\x9c\x89\xbb\xb6\xf0\xdf\xbb\xf1\xdcI\xbb\xb2\xed\xf4;AP\x93\xbc\xc4\xdb\x8e=AP\x13;(\xc6\xc8;M!\xcd<\xd5_\x83\xbbA\xaaI<J\xa6\x19=\x17\x06\xb0\xbc\xb3/\x02\xbd\xfd\x8fq<xu\xb6:-y\x03=E\xdfR={\xd2\xd7:\xdc#\xcc\xbcA\xaa\xc9\xbb\xdcK\xe4;\x13\xef\xb8\xbb\x91\x13\x8d\xbc\xc4\xd1\b\xbcU\x9fk\xbc\x89\xd1\x12=\xe5\x01\n=\xfa\xba\a\xbd\xad\xc2q<jv\xfb:N\x03;<\x0f\xb0\xa9<\xae@\xa3;Z\xa2V<Zf2\xbc-y\x03<M5\xd9<\xbb\xc1\xac\xbc\x03\xfd\x01\xbc\xa1\x0fJ<1\xa4\x86\xbc|d\x15<\xcbw?\xbc,\xab\xa1\xb9\xe5Q\xba<__\x97\xbc\xe0DI<\xfeSM;\x8c\xa6|\xbc\xe8\xcc\xed;\x8c\x92p\xbc\xe1&\xb7<jb\xef\xbc1\xae\x8c\xbb\xaaQD\xbc@\xdc\xe7;\xba/\xef<\xe0\x9e\xff;\x8c~\xe4<\x89\xb3\x007@\xdc\xe7<\x06\x8c\xc1\xbb\xba/o<k\xd6\x1a=\xc3]\xdd\xbc\xbb\xa3\x1a<\xe4yR<VO;<t\x0e\x8f<g\xa1\x91=F]\x84<\xb2\xb1P<\xbf\x00<\xbc\x80\x8f\x18\xbd\xa5X_\xbc\x91\x81O;A\xa0\xc3<^\xcd\xd9< H*<x\x1b\x80<\x1f\xc0\xf2;\xc7t\xd4;\xa2\x97\x01\xbc\x99\xeb\xe1;w\xbb`\xbc<\x9d\xd8<Y\xde\xfa\xbcfK\xf8\xbb\x8c~d<\a2\x0b<\x8cVL<Zp8\xbc\x02C\xac;N\xef\xae\xbc00\xdb\xbb\xe1\xd6\x06\xbdV\x1d\x9d9RB\xca<\xb2\xc5\\<\xaa\x15 \xbdxu\xb6<\x80\xe9\xce\xbbAd\x9f<\xf5%_\xb9\x0bI\x02<I\x1e\xe2\xbb|P\t\xbd\x89\xef\xa4\xbb9\xfa\x8c<\xaf\x0e\x05;\x17\xfc)<\x95>\x10\xbb\xb6\xdc\xd3\xbc\x8c\x92p<\xb3k&=\xc7\x88\xe0<\xcb\x9fW<\x8d$\xae<\xad\xd6\xfd<\xaeT/\xbdk\xcc\x94\xbc\x02W8:w\xcf\xec<\x80\xb7\xb0<_i\x1d;\xf6\xb7\x9c\xbc\xb3M\x14;\xd8\xe4\xbc\xbc$U\x1b=\x964\x8a\xbc\xe5\x01\x8a;g\xfbG\xbbk\xf4,\xbc\xb7n\x91\xbc\x06\xd2\xeb\xba\xbb\xdf\xbe\xba(\xdaT\xbc\xa6\xc2\x04<\xba/\xef;\xfa\xd8\x19\xbd\xd4\xe1Q\xbc\x0bI\x02=\xe5eF\xbc\xd4\x9b\xa7<\aZ#<\x06d)\xbd\x91\x81\xcf\xbc\x88\r7\xbd\xb7d\x8b<\xb7d\x8b\xbc9\"\xa5\xbcw\xa7T\xbb\x029\xa6\xbc\x95\xc0\xde\xbb\xa1\x05D\xbd\xfd\x8f\xf1\xbc[*\x0e\xbd\x0f\xce;:\x7f%\xf3\xbc\xdd\xbf\x8f\xbb\x8cLF\xbd\x99\xd7\xd5;\xc3]]<I\xf6\xc9<xC\x98\xbc\x02M2<\xb2\xed\xf4;\xf1\x0e\xe8:\x88S\xe1\xbc\xa9\x97\xee:\xd8\xee\xc2\xbc=a\xb4\xbc\x17\x060<w\xcf\xec<RLP=E\xc1@\xbdZ\xcan\xbcN\xa9\x84\xbbR\xfc\x1f\xbbt@\xad<\n\xe9b<0\xd6\xa4<\x18\xc0\x85<@\xf0\xf3\xbcN\xa9\x04\xbd\x8d.\xb46=C\xa2;{\xd2\xd7<\xf9dn;\xcf\x06\x7f9\x95\xc0\xde\xbc\xe9J\x1f=\xa2\xb5\x93<M]\xf1\xb7\x95\\\"\xbc\xbf\x00\xbc<k:W=\x99\x91\xab<\xcc'\x0f<\x03\a\x88\xbc\xe1\x1c\xb1\xbc\x1b\x1d\xa7\xbcN\xe5(=4[\xde\xbb\xaa32=J\x92\x8d\xbcg\x97\x0b=\x1c\xe1\x02<t\x0e\x0f=n\xa1~<\xe9\xa4U<__\x17<M5Y;\xc7.\xaa<\x17$\xc2<\xf2\x8c\x99\xbcJ~\x81\xbb\xf1\xdcI=n\xa1~<\xdc\xfb3<\n\xe9b;\x99}\x9f\xbc\xae\x86M<MIe=\xa5lk\xbc=k:;,\xab\xa1\xbc\xf5\xf3\xc0:\xf5\xfd\xc6<\xed\x9d\xba\xbc\xbf\xec/\xbb4G\xd2:\xb7\x96)=^\xe1\xe5;\xc3\r\xad\xbb\xd0\xacH\xbd\x0ft\x05;\xaa32=J\xce\xb1:\x0e\x14\xe6\xbc\xd0\\\x98\xbc\x02%\x9a<\x95z\xb4<c\xbc8<\xdd\xbf\x8f;\xfd{\xe5\xbb\xd5_\x03\xbdsJ3\xbdp\x01\x9e\xbc\xa2\xd3%=\xf2\x96\x1f;\xd8 a<\x9e\xb2\xa8;\x06\xe6w\xbb\x9e\x94\x96<\xeeC\x84<\x18\xca\x0b<_}\xa9\xbc\x1bY\xcb<kN\xe3;\x16j\xec<" "content" "### Summary:\nThe video discusses the limitations encountered with scaling MySQL databases for high-performance applications, highlighting that MySQL, although popular for being free and open-source, tends to slow down significantly with increased data volume, especially when running secondary indexes. To address these challenges, the video introduces Redis Enterprise as a viable performance solution that works in tandem with MySQL. Redis Enterprise is described as the world\xe2\x80\x99s leading real-time data platform, capable of storing critical and commonly accessed data in memory to provide sub-millisecond speed. It also offers an effective way to offload secondary indexed queries, thereby enhancing response times and mitigating scaling difficulties associated with MySQL. Viewers are encouraged to attend a webinar to learn more about integrating MySQL and Redis Enterprise.\n\n### Example Questions and Answers:\n\n**Q1: Why does MySQL become slow when scaling?**  \nA1: MySQL tends to slow down with increased data volume and complexity, particularly when running secondary indexes, due to its architecture as a relational database.\n\n**Q2: What is Redis Enterprise?**  \nA2: Redis Enterprise is described as the world\xe2\x80\x99s leading real-time data platform, which enables the storage of application's critical and commonly accessed data in memory, delivering it with sub-millisecond speed.\n\n**Q3: How can Redis Enterprise improve MySQL performance?**  \nA3: Redis Enterprise can be used in conjunction with MySQL to offload critical and commonly accessed data as well as secondary indexed queries. This approach enhances response speeds and alleviates the scaling challenges inherent in MySQL.\n\n**Q4: Are secondary indexed queries a reason for MySQL\xe2\x80\x99s slow performance at scale?**  \nA4: Yes, secondary indexed queries are particularly problematic as they significantly slow down response times when MySQL is scaled.\n\n**Q5: Where can I learn more about using MySQL with Redis Enterprise?**  \nA5: The video recommends attending a webinar, which is detailed in the information provided below the video, for those interested in learning more about integrating MySQL with Redis Enterprise.\n\n**Q6: Can Redis Enterprise be considered a substitute for MySQL?**  \nA6: No, Redis Enterprise is suggested as a supplementary solution to be used alongside MySQL, enhancing its performance rather than replacing it." "metadata" "{\"id\":\"FQzlq91g7mg\",\"link\":\"https://www.youtube.com/watch?v=FQzlq91g7mg\",\"title\":\"Redis + MySQL in 60 Seconds\",\"description\":\"What are the possibilities for MySQL when integrating with the real\\-time power of Redis? Try Redis Cloud for free: https://redis.com/try\\-free/\\n\\nMySQL is open source, free, and can be fast when working on a relational database, but to handle modern use cases, your MySQL will need a boost of real\\-time performance \\- the type Redis Enterprise can provide. MySQL can be difficult to scale and lacks the modern features necessary to quickly operate complex queries. Enable your MySQL applications with the real\\-time performance power of Redis.\\n\\nFrom the blog: https://redis.com/blog/3\\-reasons\\-your\\-mysql\\-db\\-needs\\-redis/\\n\\nDownload our MySQL Solution Brief: https://redis.com/docs/modernize\\-your\\-mysql\\-database\\-with\\-redis\\-enterprise/\\n\\nExplore Redis + MySQL: https://redis.com/comparisons/redis\\-enterprise\\-and\\-mysql/\\n\\nTry Redis Enterprise Cloud for free: https://redis.com/try\\-free/\\n\\n#MySQL #SQL #Redis\",\"thumbnail\":\"https://i.ytimg.com/vi/FQzlq91g7mg/maxresdefault.jpg\"}"
"HSET" "openai-video:1" "content_vector" "\xfc\x1c\x92\xbc\n\xa5I\xbc\xf0\xbc!< \x8a\xed\xbcz\xc4+=\xd9\xfc\xc0<\xe3\xc8\x8d\xbc\xd9S%=R\xa6\x83\xba\x8c?\x9c\xbc5\x1d\xda<\x12T\xed\xbcQ2\xf6<\xc2,\x15\xbd)k\xb2<\xee\xe6\x91\xbcb\xb2\x13\xbd\x15\\\x9e<5\xc6u\xbc\x1cw\x1e=\x9d64=\xb1\xde\x18\xbd\xbc\xfc\x9c<\xdaN\xf8<\x84\xa0\xc3\xbc\x00 \x16\xbdO\\\xe6\xbc\x12\x9b\x86=\xe7\xdb\xdc<H\x98J\xbd\xd9\xfc\xc0<#\xe9\x02\xbd\rV\x16\xbc\x811\xe3;\x83\x0c \xbd\xf6\xec\x19\xbcGV^<\x1c\x87i\xbd\x10\x17\xae<\xed\xb4p<\xe9\xf8\x05=*\xbdi\xbc\xcaB\xe8\xbb\xf3;M\xbbbk\xfa<}.\xdf<Y\xc1\x03\xbd#;:\xbc\xfc\x1c\x12\xbd\xcc\b\xad<_\x9a\x17<\xf1\xfe\x8d<\xe3q\xa9\xbc\x04\x1em\xbdK\xf2\xb2<`\xdc\x83\xbcz+[\xbc\xe4\xb3\x95<\x0eA\x9e<\xba\xcf\xa8<\xd9\x95\x11=t\xeb\x17\xbd\xc8l\xd8<\xf6\xec\x19=\xa7y\xfb<\xb4]\xc4<g\xa0\x9f\xbc1q:\xbc\xa5\xa3\xeb\xbch\xe2\x8b\xbb\xc2\x93D<]\xd4\xd2<\xed\xb4p<\xd0\x1b|\xbc\xb4\x06`=\xcbt\x89<\xb4\xb4\xa8<\xb9\xe4 =[\xfe\xc2\xbb\xb0\xb1\xa4\xbc\x0f,&\xbd\xec\x10\x82\xbb\x0b\x90\xd1\xbc\xd3z\x11\xbd\x83N\x0c\xbbr%\xd3\xbcD\x95F\xbd\x01\x0b\x1e\xbd}._\xbch\x8b\xa7\xbb\x1b\x8c\x96\xbc\xc3\xc0\xb8\xbbK\x02~\xbcGF\x13<\x9d6\xb4<\xef\xe1\xe4\xbc\xca2\x9d<S_\xea<D\x95\xc6:\xde\x83\x1d<\xaa\xd8\x90<\xeb\xce\x95\xbd\x16\x05:\xbcM\x86\xd6\xbcm\xd0\x97<\x816\x10;\x10'y=\xc6?\xe4;\xbe)\x11\xbb^\xaf\x0f\xbd\xbc\xba\xb0\xbdj\xc8\xe6\xbb\x13\xed=;\x9e\xdf\xcf\xbc\xe5\xf5\x81\xbb\xe4\x1aE<\xed\x0b\xd5\xbc#;:\xbd\x8d\x91\xd3\xbc\x038\x92\xbc*\xbd\xe9\xbc\xd8h\x1d\xbc\xae\x1d\x01\xbc-\a\a\xbc=z\xc6\xbcp\x91/\xbd\n\xfc-=\xcdJ\x19\xbd\x82\xda~\xbc\x03\xf1\xf8\xbc\xb0Z\xc0<\xc8\x15\xf4<\xad\xa9\xf3<\x89~\x04\xbdd\xef\xd2\xbc\xb4\xb4(\xbc\xe9\xf8\x85\xbdL\x8b\x03\xbd\xbe)\x91\xbc\x0e\xa8M\xbc\xb9K\xd0\xbb\xf7\xd7\xa1\xbd\xc0\xff <\xb0\x03\xdc<\xf6\xec\x19\xbd\xe72\xc1\xbd,\xda\x92\xbbE)j\xbc\xb58\x81<\x82\xda\xfe<_\x01G<\xfaF\x02<\nNe\xbd\xaa\xd3\xe3\xbc\xe5\x9e\x1d\xbc\xa5<<\xbd\x95\x97[=1q\xba<\x94\x03\xb8<\xb1\xac\xf7\xbc\xbcS\x01\xbb\xc2\x93\xc4<\xa9?@\xbc\x95\x97[\xbc^hv\xbd\xd2\xe1\xc0\xbbr\x15\b\xbc\xdd\x98\x95\xbc\\@/\xbd\x0e\xa8\xcd\xbc\x98\xaf\xd7\xbc`\x85\x9f\xbdA&\xe6<j\x1f\xcb<\x19_\xa2<=\xcc}\xbabp\xa7\xbc\xdaNx<\xde\xeaL=\xbe9\xdc;\xb63T\xbd\xb1\xac\xf7\xbcja\xb7\xbc\nNe<\xef8I;\n\xfc-<\xb6#\t\xbdX\x8fb\xbc\xef\xd1\x19\xbc\xf5\xaa\xad<<(\x8f\xbc\x849\x94=\x9bpo\xbca\xd7\xd6<\xe7\xdb\\=\xcf\xc9\xc4\xbc\xed\x0bU=\xa3f\xac\xbcb\xc2\xde\xba\x80\x04o\xbc\a}\x02=\xa198=\x1aZu<\xef\xd1\x99\xbb\xc3n\x81<X=+\xbcK\x9bN<\xc7\x1a\xa1<\xa8\xab\x1c\xbdl\xf5\xda\xbcrg\xbf<\xaa\xd8\x10\xbd2\xf5\x12<a\xc7\x0b=\x854g\xbc\x0c{\xd9\xbb\xbc\xfc\x9c\xbd\xc2<\xe0<\xec M\xbd\xe5\x05\xcd<\x1a\xa1\x0e\xbc\x18\x84e=)\x04\x03=\x8ay\xd7\xbc|\x9a\xbb<\x8ay\xd7< \xd1\x06=\xcco\\\xbdk\xa3#=\x1c\xce\x82\xbb~\xc7\xaf<\x0f,\xa6<L\x8b\x03\xbd5\xc6\xf5\xbc\xbe)\x11=\xa2\xe2\xd3\xbc\xd5P\xa1\xbcx\xfef\xbc\x9e\xcf\x04='\xe7Y=\x88\xa3G\xbc\xe2\xedP\xbc\x14*}\xbb\x9ex\xa0\xbc\xdf,9=\x19\b><\x7fK\b\xbd\xb4\xaf{\xbd\xd7xh=\xc6?d<*\xffU=dF\xb7\xba\xb6\x8a\xb8<\xb4]D\xbd\a\xf4|\xbb\xc5D\x91\xbd\x0eA\x9e:?PV\xbc\xde\xda\x01<\xea\xe3\r=?PV;\\\xe9\xca\xbc\xf9\xbd|;5\xc6\xf5;\xf6\x955\xbd\x1db&<3\xf0\xe5\xba\b&\x9e\xbc\r\xbdE\xbdV\x10\xb7\xbc\x94\x038\xbc\xa6\xd5\x0c;\xb8\xb7\xac;\x8c\x96\x00=\x85{\x00\xbc\xe7\x84x<`\x95j=\x1d\xb9\n=\xbe\xe2w<p\xf8\xde;\xc4\x02\xa5\xbc\xa7\x02\x01\xbd\xf3\xe4h\xbc\xf9\x14\xe18)\x14\xce<7\xf3\xe9<\x14\x1a\xb2\xbc<\xd1*;\x13\xed\xbd<\xf6\xec\x19\xbd\xa3v\xf7\xbc\xb8\td\xbc[\x97\x93<\x04\x1e\xed\xbb\xd7x\xe8\xbbu\xd6\x9f;\xa1\x90\x9c<\xba&\r=7:\x03=\xb1\xde\x18:rg?=\xd4\x0e\xb5\xbc\xfc\x1c\x12\xba\x9f\x0c\xc4<\x86vS\xbc\x92\xd6C<\xbdNT;\x87a\xdb\xbc\x16\xae\xd5<\xe2\xdd\x05\xbcBh\xd2\xbci\xcd\x13=E\x80N\xbc\x89~\x04\xbc(\xd7\x0e\xbdr\x15\x88:\xa3\xcd[=\xc9G\x95<\xc0\x0fl\xbc^\x16?=\x9e\xcf\x84<Na\x93;\xd3\xccH=\xba&\x8d\xbc\x80\xf4\xa3\xba\x0f\x83\x8a\xbd~`\x00\xbb#\xe9\x02\xbd\xf5\x11\xdd<\xd5\xa2X\xbd\x91\xeb;<\x00 \x16\xbc\xc9\xf00=L\xdd:=z\x1b\x10\xbb\xbbxD\xbd\xef8\xc9\xbc\xd3\xccH\xbc\xae\xdb\x14\xbd\xf8\x19\x8e<u-\x04;}3\x0c\xbdX=+\xbdz\x1b\x10\xbdQy\x8f\xbcn\xcb\xea<\xdb{l;\xb6#\t=\xb9;\x85\xbd\xba6X\xbb\xaf\xc6\x9c\xbc\xd8\x11\xb9\xbb4\"\x87\xbcj\x0f\x00\xbd\x83\xb5;=0\xdd\x96;T\x8c\xde\xbc^hv\xbc\xcb\xc6@\xbd #\xbe\xbc\xf3+\x02\xbd\x89\xe53=\xea\x8c)\xbb%h\xae<\x17\x89\x12<\xc0\x0f\xec\xbc\xbe\xe2\xf7\xbc\xf9V\xcd:]+\xb7;@+\x93\xbbZ\x13\xbb<\xd1\x9f\xd4<\x93\xc1\xcb\xbc\x1aJ\xaa\xbc\x04\xcc5\xbd\xde\xda\x81=\xfaA\xd5<\xdb\x80\x19=\x0e\x98\x82<\xb4\x06\xe0<*\xad\x1e=\xf6\xec\x99<Y\xc1\x03\xbc\xdd\x98\x15\xbd\xac\xf0\x0c;\xe6\xe0\x89\xbb\x15\xc3\xcd<\xb6\xdco<\x1c\xdeM\xbc\x9b\xb7\b\xbcT\xe3\xc2\xbc\xb9\xa2\xb4\xbchI;;r\x15\x88<\xb5\xe1\x9c<\x00rM<\xa5\xa3k\xbcA}J<l\xf5Z=5\x1dZ<\x92\x18\xb0<\x8fg\xe3\xbc\x03\xf1x\xbda\xc7\x0b\xbd\xef\xd1\x99\xbcT\x8c^<BhR;l\xe5\x0f<*\xffU\xbd\xdeA1\xbd)\xc2\x96;?\xf9q\xbb\x0e\x98\x02=E)\xea\xbc\x98\xaf\xd7\xbc\xa3\xbd\x10\xbd0\xdd\x96\xbc\xbcS\x81<\x81\x88G\xbc\xf3\xe4h<B\x01\xa3<CC\x0f\xbc\x8b\xbbC\xbd\xf9\x14\xe1\xbb\x1f\x8f\x1a\xbd\xb6#\x89=\xfeDY=\xa9\x96$\xbd\xa8\xfd\xd3:1q\xba\xbb\xa19\xb8\xbc)\x14\xce<\x0ck\x0e=\xf8kE<\x8f\x15\xac\xbb\xfcn\xc9;\xf8\x19\x8e<\xc2\xd5\xb0;\xd7\xcf\xcc<\x8bd_\xbd\xe7t\xad\xbc~\xc7/=\xdeQ\xfc\xbcA\x16\x9b<7\xf3i\xbd\x0b)\xa2\xbc\xbc\x0ch\xbc;\xa46\xb9\xa1\xe7\x80=Z\xbcV=\xa3\xcd[\xbcg^3\xbb\xb1\xac\xf7\xbc|H\x84:\xa5\xe5W\xbdU\xce\xca\xbcG\xff\xf9<\xc4\x12p;\x81\x88\xc7<$\x8d\xf1\xbc|\x01k\xbdR\xb6N=\xbe\xe2w\xbdO\\f=\x8f\xbeG=f\xb5\x17:7JN;\tS\x12=$\x8dq==\xcc}\xbc\xb3\x1bX\xbc\x97] =F\x04\xa7\xbc\x95@w<T\xe3\xc2\xbc\xb1EH\xbdhI;<\x95\x87\x90<\x85\xe2\xaf<\x1c :\xbc\xca\x89\x01\xbd\x81\xdf\xab\xbc\x05\x0e\xa2<\xe5\xaeh<\x18\xdbI<\xab\x05\x05=\x1eM.<)\xc2\x16=\x91\x94\xd7\xbcE\x19\x1f\xbaVg\x1b\xbd\x93Z\x9c\xb9\x16\x9e\n=T\x8c^\xbce\xca\x0f\xbdlL\xbf\xbc\x9c\xf4\xc7\xbc\xc0fP\xbdk\xfa\x87<\xe72\xc1;\xb3\x1bX=\xa7\x12L\xbcN\n/;\xf9\xad\xb1=L\xdd\xba<+\xea\xdd<\x06K\xe1;D\xd7\xb2;x\xfe\xe6<\xba\xdf\xf3<\xc3\xc0\xb8<;\xa4\xb6;`\xec\xce\xbc\x1e\xb4]=\x9f\x0cD:\xc0\x0f\xec;\x90\x99\x04\xbd\x84\a\xf3\xba\xa6~\xa8\xbc\xad\xa9\xf3<O\\f<\xd1\x9fT\xbc>U\x83<0\x96\xfd;0\x96\xfd<\xb9\xa24=\x0c{\xd9\xbc\xa9\xa6\xef\xbc\xeb\x87\xfc\xba\x0b\xe7\xb5\xbc\xa4Q\xb4\xbc\xb0Z@\xbc\x88\xa3\xc7\xbc\xcbt\x89=\xfd\x17\xe5\xbc\xca\x89\x01\xbd\xed\xfb\t\xbd9wB;\\\x92f\xbc9 ^;3\xe0\x1a\xbc\xf3\xe4h<2\\B\xbb1\x1aV<\xd5\xa2X<\xb63T=\x12T\xed:1q\xba\xbc\xb8\xb7\xac\xbc'\x95\xa2\xbb\x8d:o<KY\xe2\xbcE\xc2\xba<`C3\xbc\x80\xf4#=\xe3\xd8X<\xba\x8d<\xbc\a}\x02\xbds\x00\x90<S_\xea\xbc\xd6;\xa9<\x17\x89\x12\xb9\xf8\xc2\xa9;\x849\x14=P\x89Z;my\xb3\xbc*\xad\x9e<8\xce\xa6\xbc\xbd\xa58\xbcfn~;\xb4\x06\xe0;\x9b\t@\xbc\xfa\xef\x9d<\x86f\x88\xbc\xc1\xea(=@\xd4\xae<I\xc5\xbe\xbc\xc4\x02%\xbd\xe5\x9e\x1d\xbc'\xe7Y8[\xfe\xc2\xbc\x13\x86\x0e\xbdWbn\xbb\bx\xd5;\x12\x9b\x06\xbd.Y>;~\xd7z<\xe5\xf5\x01\xbc9\x10\x13=\xc1A\r\xbcu=\xcf<Zj\x1f;?\xa7\xba\xbc\x14*}<\x05\x0e\"<\xd4\x0e5=\x0b)\xa2;\r\x14*\xbch\xe2\x0b\xbd\xba\x8d<=\x1aZu\xbc\x88\xa3G\xbbL\xdd\xba;\xa2$@\xbck\xa3#\xbd\x12\x9b\x06=\x03\x8a\xc9\xbb6_\xc6:\x1e]\xf9\xbby\xd9#\xbc\xddV\xa9\xbc\b!q\xbb\xee\xe6\x11\xbd\xa3f,\xbd&\xaa\x1a\xbd|\xf1\x9f<\xc2\x93D\xbc\xb3\x1b\xd8\xbc\xd7}\x95\xbb\xc2<`\xbc|\xf1\x1f;\bh\n\xbc\xab\x05\x85;x@\xd3;\x03\xf1\xf8<D\x95\xc6<n\xcb\xea:\xeeMA\xbdH1\x1b\xbd5\x1d\xda\xbc\x93\xb1\x00<+\xea\xdd\xbc\x9c\xa2\x90\xbc\x9930\xbc\x811c\xbc\xe9_5<{X\xcf<\xe9\xf8\x85<\xe5\\1<\xc8\x15\xf4:\x9dF\x7f=\xdb{\xec\xbbt\x943<\x1c\xdeM\xbc\xfe\xf2!=^\xaf\x8f<\x1c\xce\x82;\xe5\\\xb1<\xac\x00X;x\xee\x9b\xbb\x95\x97\xdb\xbck\nS\xbd\xbdNT=\xf2\x921\xbc\xea\xe3\r=.\xb0\xa2<\x06\xf9\xa9\xbc`\x95j\xbcL\xdd\xba\xbb\x9ex \xba\xdb)\xb5\xbc\xd0b\x15<q:\xcb\xbc?P\xd6;\n\xa5\xc9\xba(\x90u<A\xbf\xb6;\x9c\xa2\x10=\xe2\xedP<)\x04\x03<\x9fss\xbd\xb58\x01\xbdd\xefR=\xf9\xbd|;f\xc5b;\xe1Y\xad8\xb9K\xd0<\x0c{Y\xbc\xed\xa4\xa5;\xe2\x86!;`\xec\xce<\xa7\xc0\x14:I\x1c\xa3\xbc\xc4\x02%\xbd3\xe0\x1a<\x95\xee?\xbc\xeb\xde\xe0;I\x1c#\xbc\x17\x89\x12=#\xe9\x82;FkV;u\x7f;;i4C\xbc\xb4\xf6\x14\xbc\xac\xae \xbc\xdeQ\xfc<\x83\xb5\xbb<\xbe9\\<\xc7\xc3\xbc;\xa7\xd0\xdf\xbd\x10\x17\xae\xbb\xa7\x12\xcc<\x9c\xa2\x10\xbd \xe1Q\xbd\xd2H\xf0\xbc\xb4\xf6\x94<)\x04\x83\xbc\xd1\xf6\xb8\xbc\xc0\xff <\xe9\xf8\x05:<(\x8f\xbc\x8f\x15\xac;\xc2,\x15\xbbC\xfcu<\n\xfc-;\x0b)\xa2\xbb\a\x8dM;v\x18\x0c<<(\x8f\xbbRd\x17\xbcX\x8f\xe2\xbbP\x89\xda<\xb4\xaf{\xbc\xf9\xbd\xfc\xbcWb\xee\xbb\xa7\xd0\xdf\xbc7:\x83\xbc.\xf2\x0e=\xb0\x03\xdc;1\xc3\xf1<\x81\x88G\xbb\xfa\xef\x9d<`\xec\xce<\xbe9\\<\xa3\xcd[:\x8a' \xbb3GJ\xbd\x84\xf7'<\xb0\x03\xdc\xbc\xeb\x87|\xbc%\xbf\x92\xbcbkz<\xf7.\x06\xb9\x89\x8e\xcf;~\xc7\xaf\xba5\x1d\xda\xbc\x98H\xa8;0\x96\xfd<Mv\x8b\xbc\x04e\x86\xbc*\xff\xd5\xbc7\xa12<T\x8c\xde;\x1aJ*;\a\xf4|=5\x1dZ<f\x1cG=\x16Wq\xbc\xdf\xd5T\xba\xcco\xdc<\xdb{\xec\xbc\x95\xee?<\xef\xe1\xe4\xbc\xd1\xf6\xb8<\xc6\xe8\x7f\xbc\x85\xe2/<F\x04'8H\xda69p\xa1\xfa\xbadF\xb7<4\x896<\xcd\xf3\xb4\xbb\x8b\x12(\xbc \x8am\xbc\x84\a\xf3;I\xc5\xbe\xbc\x0b\xe7\xb5<\x0b\x80\x86\xbb\xf6\xec\x19<\xae\xdb\x94<\b&\x9e<\xae\x84\xb0\xbc\x03\xf1x<[U'\xbd\xcaB\xe8<7\xe3\x1e;\xc8\x05\xa9\xbc\x8fW\x98\xbcz\xd4\xf6\xbc\xa6'D\xbd\x1db\xa6\xbc\x00 \x16\xbd\xd0b\x15<2\xf5\x12\xbb\xe3\x81\xf4\xbc\xf7\xe7\xec<\x0e\x98\x82\xbc\xb1\x9c\xac\xbd\xdd\x98\x95\xbc\x8d*$=q*\x00\xbd\xb3\x0b\r;,\x93\xf9\xbbEp\x83<.\xc0m<\x87Q\x10\xba\x93\xb1\x00\xbd\x97\xc4\xcf\xbbmy3\xbd\x86\xcd\xb7\xbb\x8c?\x9c;3\xf0e\xbc\xb6#\t=o\xfd\x0b=\xc8\x05\xa9;ja7\xbc\xce5!;|\x9a;<3\x9e.\xba\x9e!\xbc<v(\xd7;\x19\xc6Q<\x10'\xf9\xba\xeb\xde\xe0\xbb\x97] <\x05P\x0e=\xb0\xb1\xa4\xbcP\x89\xda\xbbOL\x1b=\xe2D5\xbd\xb4\xaf\xfb;=\xcc};`\xecN\xbc\xc0\x0f\xec\xbb\xd4u\xe4:\xae\x840=f\xc5\xe2\xbc\x0b\xe7\xb5<\xe3\xc8\r\xbd\xe6\xe0\t=9w\xc2\xbc\x92o\x14=;M\xd2\xbc\xcd\x9c\xd0\xbc\xe7\xdb\\\xba\xdd\xff\xc4< z\xa2<,\x93\xf9<K\xf22=\xfb\xea\xf0\xbc+A\xc2\xbb\xbd>\x89;\x0eQ\xe9< \x8a\xed\xbc\x14\x1a\xb2<\x038\x12\xbb\xc4Y\t;\xb58\x81\xbc\xf8\xc2\xa9\xbc\x9fc\xa8;\xfaA\xd5\xbc\x86$\x1c<\xd2Hp:KY\xe2\xbc\"`}<\x8f\x10\xff<c\x9d\x1b=#\xe9\x82<42R<\x9a\xdc\xcb\xbb\xbc\xba0\xbc\xe4\x1aE\xbc\xff\xedt\xbc\xa7\xd0\xdf;$\xd4\n\xbd\x12\x026=\xf8\x19\x0e;p\xa1\xfa<J\a+\xbdh\xf2V<\x0f\x83\x8a<\xa2\xd2\x88<B\x01\xa3;\xdaN\xf8\xbc\x88<\x18<\x9f\xca\xd7<M\xc8\xc2\xbb\xa7\x12L=6_\xc6\xbb|\x01k<85\xd6\xbbg\a\xcf;\xcco\\<\xc3n\x01\xbdd\x88\xa3\xbb\xba\xdf\xf3<6\xb6*<\xf4\xbf%=\x95@\xf7<\xb8\xb2\x7f<\x9d\x9d\xe3\xbb\x9e\xdfO\xbc\xae-L;r\x15\b\xbdU|\x93<A\x16\x1b<\xa9\x96$<E\x80\xce:\xbd\xe7\xa4<\x01M\x8a\xbc\xbe)\x11\xbc\xa6~\xa8;\xfe\x9b==\xb3\xc9 <s\xa9\xab\xbc\x05P\x8e\xbcz\xc4\xab\xba\x8c\x96\x80<X\x8f\xe2\xbc9 ^\xbc\x85\x8bK<h\x9b\xf2;\x9ex <\xa3vw=^m#<\x8d*$;\xca\xdb\xb8<\x91\xeb;\xbcN\n\xaf=\xb6\x8a\xb8\xbc\xc7\xc3<=\xb2\xd9k\xbc)\xc2\x96\xbb\xe0\x17\xc1\xbb\x19\xb6\x86<A\xbf\xb6\xbc\\@/\xbc\x8bT\x94\xbb^m#\xbc5\xc6u\xbc$\xd4\n\xbcf\xc5b\xbc\xf4h\xc1<\nN\xe5\xbb`\x95j<\x99\xf1\xc3\xbco\xa6'<\x0b)\"\xbd\x04#\x9a\xbc\xc4\x02%<'>\xbe</\x9b\xaa<\x038\x12=\xbe9\\\xbc\x94E$\xbd0\xdd\x96<\xf9\xbd\xfc\xbc\xc6?\xe4<W\xfb>=\x038\x12=\x17\xf0\xc1\xbb\xf4&\xd5<\xb0\xf3\x90\xbca.;<\xf7\xe7\xec\xbc\x85{\x00\xbdes\xab<\xfc\x1c\x12=\x98\x9f\x0c<\x8d:o\xbc\x98\xafW=\x01\x0b\x9e<KI\x97<3\xe0\x1a:?\xf9q=Mv\x8b\xbb\x82c\x84<\rV\x16\xbdk\xfa\x87;\xe9\xb1\xec<A\xbf\xb6<\xa6\xd5\x0c=\x1d\xb9\x8a\xbc\xa2\xd2\x88\xbc\xf3}9\xbcq|\xb7\xbbX\x8f\xe2\xbb\xb6\x8a8<Is\a\xbd\xf9\x04\x16=\xcd\x9c\xd0;\xeeM\xc1\xbc\xaf\b\t<\x1c\xce\x82;\x14q\x16\xbd\xff4\x0e<\xee\x8f\xad\xbb\x1cw\x9e\xbc\x1e\xa4\x12=\x8b\r{<M\x86\xd6\xbc\xa5\x93 =#\x92\x9e<w\x03\x14\xbc\a\xe4\xb1\xbct\xeb\x97;BX\x87;t\xa4\xfe<?\xa7\xba\xbc\x15\\\x9e\xbc\x12D\"<R\r\xb3\xbb\xdeQ|<^hv\xbdGV^\xbc\xa0\xa5\x14\xbcg\xf7\x03\xbd\xa1\xa0\xe7\xbc\xe1Y-\xbdA}\xca\xbc\x81\xdf\xab<\xae\x1d\x01\xbd\x9fs\xf3;\xb4\xf6\x94;:\xfb\x1a\xbc\x94\x9c\b\xbdCC\x8f\xbcq\xd3\x1b<G\xef\xae<\xe5\xae\xe8\xbc\xe7\x84\xf8\xbb/DF;^\xbf\xda\xbc}3\x0c\xbc\x94\x9c\b=\xa6~\xa8<M\x1f\xa7\xba^\xbf\xda\xbb\xd2\x8f\t:\xe3/\xbd<\xd9S\xa58\xf8k\xc5\xbc\xe3/\xbd\xbct\xeb\x17=\"\xa7\x16=\xff\x86\xc5<\x0f\x83\n:r\x15\b\xbc\xc0fP\xbb\x8d:o<\xe2\xedP\xbc\x94\x9c\x88<\xf7\xe7\xec;\x97m\xeb6\xa2\xe2\xd3<\x1cw\x9e<\xd1\xf6\xb8\xbc\xc8\\\r=`\x85\x1f<\xb5\x9f0=g\xa0\x1f\xbd\xf9\xbd|\xbb\xd2\x8f\t\xbd\xb2 \x85\xbc\x16\x9e\n<\xa7i0\xbcBh\xd2;\xd1M\x9d<\bx\xd5<\xdf~\xf0<\x7f\t\x1c=x\x977\xbcGF\x13\xba;=\x87\xbcd\xdf\x87\xbbT\x8c^;\xfb\xda%\xbd\xeb\xce\x95\xbc\xbc\xba\xb0;\x8b\x12\xa8<\x16\x9e\x8a\xbbO\\\xe6;\x92\x18\xb0\xbc\xab\xc3\x98\xbbb\x19\xc3<\xe5\xaeh=.\xb0\xa2\xbc\xc8\\\r<\x82!\x18\xbd\x8d*$;\xb63T\xbc\xa3\xcd[<\x8c\xa6\xcb<\x89~\x04\xbd\xfb\xda\xa5\xbcW\xfb>=\x9e\xdf\xcf;\xdb\x80\x19=\x10~]\xbah\xf2V<U5\xfa<2\xb3&\xbc;\xf6m<\xc1\xea\xa8\xbc$\xd4\n\xbd]\xd4R<=#b<\x84\a\xf3<\xd9\xa5\\<\x91=\xf3<\x9b\xc7\xd3<Vg\x1b\xbd\xc8\x15\xf49A&f;\xda\xe7H<\x86vS\xbb\xfd\xb05\xb9\x8b\x12(<\xac\xae\xa0<\xc4\x12\xf0\xba\xf4\x16\x8a<Vg\x9b;\xa0\xa5\x14\xbd\xdd\x98\x15=\x038\x12<$\xd4\n<_X\xab;\x7f[\xd3\xbb0\x1f\x03\xbc \x8a\xed\xbc\x8fW\x18\xba\xb0\xb1\xa4\xbc\x98\xaf\xd7<\a\x8dM\xbc/\xeda<R\xa6\x83<\xbbxD<\xb4\xb4\xa8\xbc\x8d*$\xbc\xf6\xec\x19=\x0b\x80\x06\xbd\a\xf4|<\xf9\x04\x16\xbc\xd9\x95\x91<lL?<g\xa0\x9f<\xcc\x18\xf8\xbb\x9e\xcf\x84=g\xa0\x9f\xba\x993\xb0<G\xff\xf9;I,n<\xd9\xa5\\\xb9\xa8\xfd\xd3\xbc,\x83\xae<\x04\xcc\xb5;\xae\xd6\xe7\xbcX\x8fb\xbc\x82c\x04\xbd\x9au\x9c\xbcy0\x88\xbch\xe2\x0b\xbcKI\x97\xbcJ^\x0f\xbd\xab\xc3\x98=\xb9\xa24\xbc\xf7.\x86\xbb\xcf )\xbc?\xf9\xf1;\xd9S\xa5<\xd9\x95\x11=x@\xd3<-\xc5\x9a\xba\xb1\xac\xf7<*\xbd\xe9\xbc\xed\xb4\xf08\xc1A\r=\b!\xf1<]\xd4R\xbb-n\xb6<x@S=\xbc\x0c\xe8\xbb\x00b\x82<\x1d\xb9\x8a\xbc\xf3}9;\xb3\x0b\r\xba\xd28\xa5\xbc\x91\x84\x0c<X\x8f\xe2\xbb\x00 \x16<lL\xbf<;\xe6\xa2\xbbnd;=\xefz\xb5<\xac\xae \xbc\xab\x05\x05\xbd5\x1d\xda\xbb\x03\xe1\xad\xbcQ\xcbF;\x038\x92<\x90B \xbc\x81\xdf\xab<\x13/\xaa\xbc\xf7\x80\xbd<b\xb2\x13=\x82s\xcf\xbc\xd1\xa4\x01<WR#\xbc\xb0\x03\xdc<\x9f\xba\x0c\xbd\xcb\x84\xd4<\x87\x0f\xa4;o\xa6\xa7\xbcg\xa0\x1f\xbd\xb2\xd9k\xbb\x14\x1a\xb2<]\xc4\a\xbc\xf5\xaa-\xbc?\xa7\xba<\xc3n\x01\xbc\xd7\xcf\xcc<H1\x9b\xbc\x9fss=\x0ck\x0e=\x04#\x1a=\xd9\x95\x11<\x1d\xb9\n:i\xcd\x93\xbc\x99\x8a\x14=\x86$\x1c\xbd'\xe7\xd9<#\xe4\xd5\xbc\xb7\xcc$=\xbe\xe2\xf7;\x88\xa3\xc7\xbbr\x15\x88:\x9d\x9dc=\x99\x9a\xdf\xbczmG<4\"\a<\xa4Q4=\xcbt\t\xbd\xec\x10\x02=\xec\x10\x02\xbb\x93Z\x9c\xbc\xe3\x81t\xbc\xbcc\xcc\xbc\xf3+\x82\xbcg\aO\xb9\"P\xb2\xbbV\xb9\xd2;C\xfcu\xbb\xec\xb9\x9d;U5\xfa\xbc`\xdc\x03\xbd\xde\xda\x01\xbdx\xfe\xe6<l\x9e\xf6<z+[<\xb3r<<\xd4\x0e\xb5<\xd9S%\xbd\x9e\xcf\x04\xbb\xc0fP\xbd\xf6>Q;\xa9\x96\xa4\xb9\x1cw\x9e\xbd\xc9G\x95<\x950\xac<\xc9G\x95;\xb8\xf9\x98=\xa5\xa3k\xb9\xe8\x1d\xc9;\x10~\xdd:\x1b\x8c\x96\xbc\x12D\xa2<1\xc3\xf1\xbc\x7f\t\x9c<\x98H(\xbbc\x9d\x1b=\x9bp\xef;\x92\xd6C<`\xdc\x83<\xc7\xc3\xbc\xbc\xdck!<\xd4ud<\xbb\x11\x95\xbb\xcf )\xbcf\xc5b<KI\x17\xbct\xa4\xfe<\x854g=\x0e\xff\xb1\xba\xf4\x16\n\xbc6\xb6\xaa\xbc\xc2\xd50<:\xb9.;Vg\x1b<\xadB\xc4\xbc=#b\xbb\xf6\x955=\x83\xb5;=P\x8e\x87\xbcRd\x17\xbc\xed\xb4\xf0;\x05P\x8e\xbb\"`}\xbb]\x82\x9b\xbb\xf9\x04\x16\xbcx\xfef\xbcv\xd1\xf2<\x00 \x16=\xd5\xf9\xbc<\xac\xf0\x0c\xbbc\x04K\xbc\xcc\xb1H:\xc7q\x85;\x96\x1b\xb4\xbc\x87Q\x90;BX\a<\x854g\xbc\xc6\x96\xc8\xbb$\xd4\x8a<\x04e\x86\xbcFkV<\x14\x81\xe1\xbc\xfc\x1c\x92<\xfd\x17\xe5\xbcA&f:\xf7\xe7\xec\xbc\xba\xcf(;\x16\x9e\x8a<\xe1\x9b\x19:\x13\xed\xbd<\x14q\x16\xb9P\x8e\x87<K\x9bN<\xd0\x1b|<}\xdc'=\"`}<\x12\x9b\x86</\xed\xe1;b\xc2\xde<\x93\xb1\x80<\x12D\"=\xed\xfb\x89;\xca\x89\x01=r\x15\b\xbd)\x04\x03\xbc\xbf\xbd\xb4\xbb\xf4&U\xbcS_j<\x14q\x16<\x9e\xcf\x84;d\xdf\a;\x9ex\xa0<F[\x8b\xbb\x06;\x96\xbbP\xe0\xbe<n\x12\x04\xbc\xba\xcf(=\x1f\x8f\x9a\xbc\x1d\xb9\n\xbc\"`\xfd;$\xd4\n<\xc6/\x19=\xfd\a\x9a\xba\xbc\xfc\x1c\xbb\xe5\x05\xcd\xbc\xf6\xec\x19\xbc\x81\xdf+\xbdJ^\x0f<\xfe\xf2!=\xab\x05\x05=\xae\xdb\x94\xbcE)\xea<\xc1\xa8\xbc\xbb.\xb0\"=:b\xca:j\xb8\x1b<s\x00\x10\xbc\x84\a\xf3\xbc\xcdJ\x19\xbci\xcd\x13<?\xe9&\xbc\xa8\xab\x9c\xbbCS\xda\xbb\x04u\xd1\xbc\xdc\x14\xbd<\xa9?@=f\xc5\xe2<P\x89Z\xbcD\xd72<\xfa\xef\x1d;\xcc\x18x\xbaP7#\xbc#\xe9\x02\xbd\xea\x8c\xa9<\xd0b\x15=\x12T\xed\xbc\xa7\x02\x81\xbc\xe1\xabd;\x95\x97\xdb\xbc\xd5P!=8\xce\xa69\xa9?@\xbc\x9d\x9d\xe3\xbb0\x96}\xbaM\xc8B\xbc\xd3z\x11;\xa3f\xac<\x897k\xbc\xb7\x0e\x11\xbc\xee\xe6\x11<\x10\x17\xae\xbb\x91\x94\xd7\xbc\xe9\xa1!=my3;]\x82\x1b\xbb\x13/*:\xe9\xa1!\xbd\xb4\xf6\x14<g\xa0\x9f\xbbB\x01#=Mv\x0b\xbdja7;\xa9\xa6\xef\xbb\xbe)\x11\xbd\xe2\xed\xd0\xbcBX\a\xbd\xe1\xab\xe4\xbb8\xce&<#\x92\x1e=\x87\xb8\xbf\xbc\xc6\xe8\xff;\xe9\xf8\x05\xbcwUK<'>\xbe<\x1d\xc9\xd5<f\x1cG\xbc\xaa\xd3\xe3\xbb\xe0n%<\xc4\x12\xf0<\x94\x9c\x88\xbc,\xda\x12\xbc\xd0\x1b|\xbc\xaa\x81\xac\xbbg\a\xcf:*\xbd\xe9\xbbA&\xe6<I\x83\xd2\xbc\xb0\xb1\xa4;\xe2\x86!=W\xfb>\xbc\xfc\x1c\x92\xba;=\x87\xbc\\@\xaf<\x00 \x16:\xba&\r\xbd\x1c\xce\x02\xbcf\xc5\xe2\xbb\xa3f,\xbcW\xfb><I\x1c#\xbc\x80\x04o<.\xc0\xed\xbb\x1eM.=e\xca\x8f<]\xc4\x87\xbc\x9fss;\xdd\xffD\xbb\x897k;\xae\x1d\x01<A}J\xbc\xd6\x92\r\xbdlL\xbf<v\x18\x8c;F\xad\xc2<V\x107\xbc\xf7\xd7!=\x95\x87\x90;bkz<^\xaf\x8f\xbafn\xfe<\xf3}9=\xf1\xfe\x8d\xbc\xb5\xe1\x1c\xbc\x8d:o;\xb3\xc9 <\xe8\x1d\xc9<\x95\x87\x10\xbc\x00 \x16\xbc\b&\x9e<\xa9\xa6\xef\xbb\xba&\r</\xeda<\xa0N\xb0\xba\xd3#-<\x99\x9a_<\n\xfc-:\x82sO<\x83\x0c\xa0\xbb\xcd\x9cP;\xed\xfb\t<t\xfb\xe2\xb9\x0b)\"\xbc\xc4\x02%\xbd]\x82\x9b\xbbx@S:\xc2\xe5\xfb\xbcE)\xea\xbcr%S<\xdaN\xf8;d\x98n\xbc1\xc8\x1e\xbcSO\x1f\xbd;\xe6\"=\x8f\x10\xff:[U\xa7<^hv<?\xf9q\xbbZe\xf2\xbc\xc2<\xe0\xbc\x16W\xf1\xbc\xdc\xad\r<&\xfcQ\xbc\xf2\xe9\x95\xbc\xd8\xaa\t=\xa3f\xac\xbc\xa7\xd0\xdf<.\xc0\xed;\x84\xf7\xa7<[\xfe\xc2\xbc\xa2\xd2\x88<\x8a' \xbc\xcaBh;" "content" "### Summary:\nThe video introduces significant updates to Redis JSON that enhance the efficiency of querying and indexing JSON documents in Redis. It employs a practical example involving organizing food trucks in Oakland to demonstrate these enhancements. The Redis Stack instance, equipped with JSON, indexing, and query capabilities, and the RedisInsight GUI are used throughout the demo. The presenter shows how to create and manipulate JSON documents for food trucks, events, and locations, focusing on the use of JSON path syntax for querying.\n\nThe video further explores the integration of RediSearch with Redis JSON for indexing and querying JSON documents. This feature allows for sophisticated searching capabilities through JSON data, such as searching by vendor name, cuisine, event location, and the number of attending food trucks. The process involves creating indexes on specific fields within the JSON documents and demonstrates how to perform searches using these indexes. The video concludes with an invitation to learn more through a Redis University course and to try Redis Stack either by downloading it or provisioning an instance in the cloud.\n\n### Example Questions and Answers:\n\n**Q1: What functionality does Redis JSON now offer for JSON documents?**  \nA1: Redis JSON now offers the ability to efficiently query and index JSON documents.\n\n**Q2: Can you name the tools used in the video demonstrations?**  \nA2: The tools used are Redis Stack and RedisInsight, the Redis GUI.\n\n**Q3: How is a new vendor JSON object inserted into a Redis instance?**  \nA3: A new vendor JSON object is inserted using the command `JSON.SET` followed by a key name, the root path ($), and the JSON document.\n\n**Q4: How can one search for a specific vendor by name using RediSearch in Redis JSON?**  \nA4: To search for a specific vendor by name, use the command `FT.SEARCH` with the index name, and specify `@name` to search within the name field, followed by the search term.\n\n**Q5: What is the purpose of creating indexes on JSON documents in Redis?**  \nA5: Creating indexes on JSON documents allows for efficient searching and querying over a collection of documents based on specific fields.\n\n**Q6: How is an index created for searching food trucks by their cuisine in Redis JSON?**  \nA6: An index for searching food trucks by their cuisine is created using `FT.CREATE`, specifying the key prefix and schema to index the cuisines array within the vendor object as a tag search type.\n\n**Q7: What is the command used to find events with a specific number of assigned vendors?**  \nA7: To find events with a specific number of assigned vendors, use the command `FT.SEARCH` with the index name, specifying `@assigned_vendors` and the desired range of vendors in square brackets.\n\n**Q8: How are JSON documents representing locations and events manipulated in Redis JSON?**  \nA8: JSON documents for locations and events are manipulated using `JSON.SET` for insertion and `JSON.ARRAPPEND` for appending data to arrays within the JSON objects.\n\n**Q9: Why might someone want to use Redis Stack and RediSearch for organizing food trucks in a city?**  \nA9: Redis Stack and RediSearch provide powerful tools for organizing food trucks by allowing efficient storage, querying, and indexing of JSON documents related to vendors, locations, and events, enhancing the ability to manage and retrieve data efficiently.\n\n**Q10: Where can one learn more about storing, querying, and indexing JSON in Redis at speed?**  \nA10: More information can be found by enrolling in the Redis University course RU204, which focuses on storing, querying, and indexing JSON at speed." "metadata" "{\"id\":\"I\\-ohlZXXaxs\",\"link\":\"https://www.youtube.com/watch?v=I\\-ohlZXXaxs\",\"title\":\"Redis and JSON  Explained (Revisited)\",\"description\":\"Hungry for more Redis and JSON tips and tricks? Check out this video from Redis on how to create and update JSON documents in a Redis Stack instance! Then create secondary search indexes with Redis and Search to query Redis for some delicious results!\\n\\n00:00 Introduction\\n00:32 Why we use Redis Stack\\n00:44 Intro to the use case\\n01:22 JSON.SET truck:42 \\- create and store a vendor JSON object\\n02:00 JSON.SET location:23 \\- create and store a location JSON object\\n02:21 JSON.SET event:11 \\- create and store an event JSON object\\n02:47 JSON.ARRAPPEND \\- ad an element to an existing JSON array\\n03:11 JSON.SET \\- adding to an existing JSON document\\n03:52 Redis Search & JSON\\n04:46 FT.CREATE \\- creating a search index for \\\"truck:\\\" JSON documents\\n05:55 FT.SEARCH \\- query for text within a search index\\n06:40 FT.SEARCH \\- query for TAG words within a search index\\n07:10 FT.CREATE \\- creating a search index for \\\"event:\\\" JSON. documents\\n07:51 FT.SEARCH \\- query for numeric range within a search index\\n08:26 Conclusion\\n\\nLinks: \\nRU204: Storing, Querying, and Indexing JSON at Speed: https://university.redis.com/courses/ru204/\\nRedis University \xe2\x86\x92 https://university.redis.com/\\nRedis \xe2\x86\x92 https://www.redis.com/\\nRedis Stack \xe2\x86\x92 https://redis.io/docs/stack/\\nRedis and JSON \xe2\x86\x92 https://redis.io/docs/stack/json/\\nRedis and Search \xe2\x86\x92 https://redis.io/docs/stack/search/\\nNeed a Redis Cloud now? Sign up for a free Redis Cloud Essentials account \xe2\x86\x92 https://bit.ly/3xdTyMR\\n\\nJoin our discord server \xe2\x86\x92 https://discord.gg/redis\",\"thumbnail\":\"https://i.ytimg.com/vi/I\\-ohlZXXaxs/maxresdefault.jpg\"}"
"HSET" "openai-video:2" "content_vector" "K\x12\xf6\xbb\xe0\xc02=\xdc\xc1K=\x9b\xc8Z\xbc\x9c\xae\xb7<&\xa6\xbb\xb9\xde\a\xc8\xbb\xe5\x1f9=B'\xf7;\x88\x1fO\xbcs\xb6\x84<d\x00e\xbc\xe8K\x12<'\x19\xaa\xbcir\xba<\xf6\x95\x97\xbb\xc9\x18\xc0\xbc\xff\x80\x96;\xf7\xe2\xe7<\xa5\x0c%=\xc3\xd3\\=G\xac\x9b<\xc6\x12\x85<!4\xe6<\xc2\x86\x0c\xbd\as\xe9\xbc\x99\b\x9c\xbc\x946\xa7=\x7f\xba\x8d;\x9b\xc8Z\xbd\xbfZ3=\x1cb\xf1\xbc\xbauo\xbbl\x18V<bGz\xbc{\xbb\xa6\xbc\xe3S\xff\xba=\xee\x0e\xbd\xf8\xdb\x93<*E\x83\xba\xcfd\xf7;\xcc1J\xbd\r>\x8a\xbc\xe6\x92\xa7\xba\xe9\xab\xb1\xbcl\x11\x02=P\x97\x1a\xbd\xa49\x17\xbc\xbcA)\xbdG\xac\x1b=J\xb2V\xbaes\xd3<l\x18\xd6\xbc\xe3\xf3_\xbd\xde\x1a\x97<\x97O1\xbb\xf6\x95\x17\xbd\x0e\x18\xec\xbb\xdf\xda\xd5\xbb\xd3v\xad\xbb\x89x\x9a=\xa2\xe0\xcb\xbcI\xf2\x179\x81\xed\xba<C\r\xd4\xbb\xa8\xc5\x0f=+\x05B\xbc\xf6\x9c\xeb\xbb\xac+\xea\xbcL\x85\xe4;_'\x9c=&\xb9\n=\t\xb9e<\x1f\x14\x88\xbcB'w=K\xab\x02\xbd\x9d\a\x03<\x89\x7fn=\xc6\x12\x05\xbd`\x14M\xbc\xdfgg\xbc\xf9\xae\xa1\xbb\xa8%\xaf\xbc\b\xdf\x03\xbd\xe6\x92\xa7\xbb\xfb\xfbq\xbcs\xb6\x84\xbdj\xcb\x85\xbd\xc6\x12\x85\xbc\xafD\xf4<8|9\xbd\xf6\x95\x97<\xa1\xfa\xee;!G5<\"\xba\xa3<\x89x\x9a\xbc\x1e.+<.1\x1b=V\xb6\xdf<\x9bN\x98<\xb2\x83\x1c=\xc8X\x81\xbd\x0b\x12\xb1\xbb8\xef\xa7:\xa2m]=\xfa\x0eA\xbcS*\xe7<\x0e\xa5\xfd<|\xa1\x03\xbd\xf5\xaf:\xbc\xe98\xc3\xbd\x18o\x85\xbb\xe9\xbe\x00<\x8f7\xc0;S\xb0\xa4;\x97<\xe2<\xe3S\xff\xbb\xad\x84\xb5\xbc\xe6\x92'\xbc\xb1\x9d\xbf\xbb\xb9\x9b\x8d\xbcL~\x10\xbc\xf2\x96\xb0\xbbN>\xcf\xbc\xc82c\xbc\xb6\x82\x83\xbd\xf16\x91;\x1a\xb5\x81;\x8a\xeb\b\xbb\xbd'\x86\xbdjEH=27V=\n\x9fB=20\x82\xbd\x8eQ\xe3\xbc\xd9\x95\xf2;i\xe5\xa8\xbd\x88\x92=\xbc.\xab\xdd\xbc\xb2\x83\x1c\xbd\x1f\x8e\xca\xbc\xd0JT\xbd\xf0\xdd\xc5<\x96\xdc\xc2<\xe52\x88\xbc\x8f7\xc0\xbc\xbb[L\xbb3\x1d3=& ~\xbc\x1b\x88\x0f=\a\x00{<\x1f\x8e\xca\xbb\x81g}\xbd\x03\xfa?\xbd-\xd8O\xbc\xecQ\xcd\xbc\xb4\xc9\x98=\xea\x0b\xd1\xbb\x9c\x9b\xe8\xbc@z\a\xbd\x1b\x8f\xe3\xbc\xf6\x0f\xda<\xed\xaa\x18\xbc\x1f\x14\x88<*E\x03\xbd\x06\x13J;\xd3\xd6L<`\x87\xbb\xbc\xdb\xee\xbd\xbco1\xe0\xbc\xd3c\xde\xbck+\xa5\xbd@z\x87<\x1dHN=\xd9\x95\xf2<\x94#\xd8\xbcNQ\x9e;\x9c\xc1\x06<\x80\x1a-\xbbAg\xb8<C\xad4\xbd\xdb\xee\xbd\xbcE\xd9\r\xbd\xa4\xb3Y\xbc\x93\xd6\a\xbd\as\xe9\xba=\xee\x0e<9b\x96<`\x9a\n;\xa5\x0c%<G\xac\x1b\xbc\x18\\\xb6=\xe8K\x92\xb9p\x91\xff<\xfb\xfb\xf1<h\x9f,\xbcX\x0f+=\xc1\x13\x1e\xbc\xdfz\xb6\xbc\xce\xfd\x03\xbc\xea\x91\x0e=uvC=]\xe1\x9f<I\xdf\xc8;\xbet\xd6\xbb\x96b\x80<oD\xaf<8|\xb9\xbc\x93=\xfb\xbc\x83F\x06\xbd\xa9\x85N<\xb9\x9b\r\xbd>;\xdf;\x0b\xffa<\xd4I;\xba\xe1 R\xbc\x88\xa5\x0c\xbd~aB;\x97\xc9\xf3\xbci\x85\x89\xbb\x9a{\n\xbd\xc4\xb99=q\xeaJ=\x8c\x1e\xb6\xbct\x90f<\t\xcc\xb4\xbb\xc9+\x0f=\xa3@k\xbd\xd46\xec;\xf4O\x1b<\xfcT==\x11\xca\x82<5\xd6\x9d\xbc\xa5\x996\xbd@\x81[=n\xd1@<\xdcG\x89;Y\xe2\xb8\xbb,\xeb\x9e<\x91\nN=\xab\xcbJ\xbd\xd0JT\xbc\x1f{{;\n\xb2\x91\xba\xfc\xce\xff<7\t\xcb\xbc~\xd40\xbd[\xa2w\xbd\xd9\xbb\x90=\xb4<\a<\x93PJ=\xde\x8d\x05\xbb\xd85S<=N.\xbc\x8c1\x85\xbc\x18\xe9\xc7\xbc\x02'2\xbc\x7f\xba\r<_.\xf0<\x10\xd1V<\x0f\x84\x86:\xcf]#\xbd\xccD\x99<@\xf4\xc9<\xcax_\xbd\x8eQ\xe3;\x1b\x15\xa1\xbcf\xd3r<\xda\ba\xbc/\x91:\xbd4\x03\x90\xbc\xc82c\xbc_'\x9c;\xf16\x91\xbcs\xbdX\xbc\xe2\x93\xc0<2\xaaD=9O\xc7<\a\xf9\xa6\xbc6#n\xbc\xaa\xe5m<\xf1#\xc2\xbc\xac\xb1'<Y\xf5\a=\x14\xea`;\xaf\xdd\x80=-K\xbe\xbb\x0c\xf8\r=\xb3C\xdb<F\xc6\xbe\xbc\x81g}\xbc\xdc\xae|\xbc\xbd'\x06\xbd\x8d~\xd5\xbcc\xb3\x94\xbb[\xa2w<\xb5\x16i=\t\xb9\xe5<\x84\xa6\xa5<\xc8X\x01=\x7fG\x1f=]\x81\x80<W\x16\x7f\xbc\xfe\x9a\xb9;e\xf9\x90\xbb\x8bK\xa8<\xb7\xe2\xa2<\xf1#B\xbdK%E=\x9fTS\xbc\xee\x97\xc9\xbc\xbf\xe7D<\xfe\xad\b\xbd\x05@\xbc:=\xdb\xbf\xbc\xc8\xbf\xf4\xbc\x06\x13J='\x06\xdb<\xaf\xdd\x80\xbc\t?#\xbd\x11\xca\x82<\xaf\xdd\x80\xbcz\xc2\xfa<9b\x96\xbc\x1a\xb5\x81\xbc\xd4I;\xbd\x05S\x0b<F9\xad\xbdX\x0f+\xbbJ\xb2V\xbdmq\xa1;w\xcf\x0e\xbd;\xa8\x12=\x0c\xe5>=\xf0=\xe5:\xa6\xf2\x01\xbd\xfd'K\xbdi\xe5(\xbc\x02\xa1\xf4<\xfb\xf4\x1d=?!<<\x02\x14c\xbds\xbd\xd8\xbc/\x91:\xbdBM\x95<V\xb6\xdf<n\xd1\xc0<t\x16$<8\xf6{\xbd\x8a\xeb\b\xbc\xae\xf7#\xbdMk\xc1:\xf5<L\xbd\xad\x845\xbd\x17\x16:=x\x8fM\xbc\xed7\xaa;\xc9\x18\xc0\xbc\xf3i>\xbd \xeei\xbc\xa8\xc5\x8f\xbd\x06\xa0\xdb<\xb3\xd0l\xbbP\x97\x9a<\x04\xcdM\xbc\xf5\xaf\xba\xbc\x9d\x0eW\xbd\xcc\xbe\xdb<\xc5\x9f\x96\xbc\x1b\x88\x0f<\x946'<.1\x1b=p\x8a+\xbd\xcd\x17\xa7\xbc0\xf1\xd9\xbc\xd85\xd3=\x82MZ<27\xd6<\xb5\x89W<\xac\xb1'=\xa49\x17<9OG=\xa6Yu<4\xf0@\xbd4\x03\x10<\xb4)\xb8\xbc+\x18\x11=\x93\xd6\x87:\xf5\xc2\t\xbd\xd8\xc2\xe4\xbc\xdd4\xba\xbc\xb8\xb50\xbaK%\xc5;\x1b\x88\x8f<'\x06\xdb<\xd3v\xad\xbc\x1d\xbb<<\xa8%/\xbcY\xe28=O$,<1\xd7\xb6;\x1cu@\xbc\xfc\xce\xff\xbc\xdf\xdaU\xbd\xeb~?<\xc3\xd3\xdc<\x1cb\xf1\xbbF\xc6><\xd6\t\xfa\xbc\xc4F\xcb\xbc\x0e\x9e):^T\x0e\xbd\x0b\x121=\xcf\xea\xb4\xbc\xf0P4\xbb\xf9(\xe4\xbb\x9f\xb4\xf2<3\x97u7s\xb6\x04\xbd\xbb\xe1\t;D\x93\x11=\xde\x8d\x85\xbcE\xd9\x8d\xbcw/\xae;\x81g}\xbc\x7f\xc1a=\x81\x00\n=>\xc1\x1c\xbd\x03\r\x8f<\x1f\xa1\x19\xbd& \xfe\xbc\x96\xef\x11\xbc\x85\xf3\xf5<\x8b\xbe\x16<(y\xc9\xbc\xb1\x10.=\x88\x92\xbd<\xa0'a<q\xfd\x99\xbbz\xe8\x98\xbca\xfa\xa9<x\x8f\xcd;\bl\x95\xbd\x14p\x1e<\xff\xfaX\xbc7\x1c\x9a<|\xa1\x03\xbd\xa2\xf3\x1a<d\x134=T\x96\x01=\xe8\xd8\xa3\xbc\xcew\xc6<(\xd9\xe8\xbcAT\xe9<M\xcb\xe0\xbc[;\x84\xbcL~\x10=\x9e\xe1\xe4<$s\x0e=r\xd0'\xbd\x85\x06E\xbd;\x1b\x01=|\xa1\x83\xbd\x9e\xf43=\xfcAn=\xf0c\x83\xbb\x9c!\xa6;Qj\xa8<20\x02<\x81\xed\xba\xbb\x8b\xc5j<\xec\xc4\xbb<\x7f4P<\xa1\r><`\x14M\xbdU\xf6\xa0\xbc\xff\r\xa8:?\x9b~<\x0b\x85\x1f\xbc\xfa!\x10\xbd\xc7\xe5\x12\xbc\xa4&H<\x946\xa7<~\xd40<\xf9N\x82<n\xe4\x0f\xbc\xde\a\xc8\xbb\x83\xc0H=_\xb4\xad\xbc\xa4\xac\x85<\x87\xbf/;\xdc\xc1K<\x80\x94\xef<2\xbd\x93\xbc\xcf\xea\xb4\xbc\xa2m]\xbcqp\b\xbd\"\xba#\xbd\xfc\xe1\xce<\x9bN\x18;<{\xa0<\xfe\xad\b\xbdO\xb1=\xbav\\\xa0=\x9b;I\xba\xae\xf7#\xba\x19\xbc\xd5;\xcd\xa4\xb8\xbb\x8c\x1e\xb6\xbct\xa35<)\xbfE\xbc20\x82;\x01\xb4\xc3\xbc?\x0e\xed<\xfcT=:\xa3S\xba;\x0e\xa5}\xbc\xf16\x11\xba\xe7\xdf\xf7\xbb3\x1d3;\xd8\xc2\xe4;\x9f\xc7\xc1<l\x11\x82\xbcx\xa2\x9c\xb9\x16)\t<\xb8\xa2\xe1<\xb8\xa2\xe1\xbc\xbe\x01h\xbd\x111v<\xf2\x96\xb0\xba\x04\xe0\x9c<z\xe8\x18<\xf4V\xef\xbb\x8ew\x81=-^\r\xbd\xb8BB\xbd7\x1c\x1a\xbd[\xa2\xf7\xbc\xf6\");F9\xad\xbc t\xa7\xbc2\xaa\xc4;d\x134\xbcE\xd9\x8d\xbb\xca\x8b\xae\xbbK\xab\x82<b\xbah;\xc1\x13\x1e\xbd)_\xa6\xbb\xe6\x92\xa7\xbc\x81\xed\xba<~aB\xbd\x11DE=o\xa4N\xbc\x02\xa1\xf4<\xa5\x99\xb6<\xb1\x10.<jX\x97\xbc\xd9\x95r<o\xa4N\xbc\x11\xb73<g\x19o\xbb\x83F\x86<\xef\xf0\x14=(\xff\x86\xbc\x8f\xc4\xd1\xbc\x15C,<\xd9\xbb\x10\xbb\xe6\x92\xa7<\x98\x0fp\xba\xcc1\xca<h\x12\x1b\xbc\xe4L+:\xd6\x8f\xb7\xbc(\xec7<[\xa2\xf7;\xf9(\xe4\xbbT\x832\xbd\xf1#B\xbb\x93\xc38\xbc\xc9\xa5Q\xbc\x81z\xcc\xbc\xe1 R;ZU\xa7<\xe6\x92'\xbd\x1a\xa2\xb2\xbc\x96iT\xbc\xf0=e;k+%=R\xcaG=\"-\x92<\xce\x8a\x95<C\rT;\xf0c\x03;\xb2]\xfe9\x82`)=\xb2p\xcd<c-W:\xd5\xa2\x86\xbc& \xfe<\xa1\x80,\xbc\x18\xd6x\xbc\xc3\xd3\xdc\xbc@\a\x99\xb9\x1f\x01\xb9\xbc\xf7\b\x86<\xa9\x98\x1d\xbcK8\x94\xbc\xfc\xce\x7f\xbb\xc3`n\xbdG\x1f\n\xbc\xfcg\x0c<S#\x13\xbd\n\x9fB\xbds\xb6\x04\xbd$\xed\xd0<B\xc0\x03<}t\x11\xbd\x9d\x94\x94<\xc0\xcd\xa1\xbc/\xa4\t<c@&\xbde\xe6\xc1;\x97\xc2\x1f;\x89\x05,=\x15\xbd\xee<\xfa\x9bR\xbc}{e\xbdW\x9c\xbc\xbcl\x8b\xc4\xbb\xe3\xec\x8b:\xb5\x9c&\xbc\xbc\xb4\x97\xbbG\xac\x9b\xbc.1\x9b\xbaw\xa9\xf06j\xd2Y:+\xa5\xa2<Dm\xf3;Ef\x1f\xbcM\xde/=W\x16\x7f\xbc2\xaa\xc4<\xe3\xf3_\xbc\xb6\xe9\xf6<\xa0\xad\x9e\xbc\xc2s\xbd;BM\x95<\x18\\\xb6<i\xe5\xa8\xbc\xdd4:\xbc\t\xcc\xb4\xbci\xec|=\xd5\xa2\x06<\xe6\x92\xa7<(y\xc9\xbb\x1dHN<\n\x9fB<\x03\xfa\xbf\xbc\x8eQ\xe3\xbc\x0c\xf8\r\xbd\xb5\x16\xe9;\xbcA)\xbd\x0c\xf8\x8d<lxu\xbc/\x1e\xcc<\a\x00\xfb<\xb6\xfc\xc5<\x14\xe3\x8c\xbbh\x9f\xac<\xf7\xf56\xbd\xf1\xc3\"\xbck\xb86=\xb2]\xfe;RP\x05=\x95|\xa3\xbc\xfb\x81/<>\xc1\x1c\xbd\xd5\xa9Z<;\"U\xbces\xd3<\x9ah\xbb;uc\xf4\xbc\t\xcc4\xbc\r\xcb\x1b<\x00[\xf8\xbcA\xda\xa6<R\xca\xc79\xa5\x99\xb6<r\xd0';\xb1\x8a\xf0\xbb\xb0\xb0\x0e\xbc\xe6\x92'<yb[\xbcx\x15\x8b<\xe0`\x93<W)\xce\xba\xe3\xec\x0b<\xc8\xb8\xa0;\xc4F\xcb\xbd\xa4\xb3Y\xbc#z\xe2<\x98\xafP\xbd\x89\x7fn\xbd\xd4\xbc)\xbd\b\xdf\x83\xbc|\xa1\x03\xbb6I\x0c\xbd#\a\xf4<B'w\xbc9O\xc7\xbco\xa4\xce\xbbT\x10\xc4\xbc^\xce\xd0<1\xea\x85\xbc?!\xbc\xbc\x84\x19\x14=\xcc\xbe[:]\x81\x80\xbc3\x1d\xb3\xbb\xa7\xdf\xb2\xbc\x9e\xf43=\x13\x9d\x90\xbc\xe0MD\xbbp\x8a+<c@&\xbc\xac>\xb9\xbcZ\xcf\xe9<'\x93\xec\xbc\xdb\x01\x8d<\xea\x1e \xbc\xa0\x9a\xcf<\xac\xb1'=\xa3\xc6(=\x81g\xfd\xbb\x8a\xd8\xb9<v\\ \xbdx\x15\x8b<\xdb\xee\xbd\xbc@z\a\xbc\xe0\xd3\x81\xbc\xdf\xdaU\xbc\xc82\xe3\xbc\x15\xd0=\xbb%\xd3-\xbc\xaeqf\xbc\xb7\xe2\"=g\xb9O<=N\xae\xba\xf9(d;\x85\x06E\xbd\x879r<i_k<\x0e\x9e)<C\xad4=\xd2\x03?\xbc\x8c\xabG<\x04m\xae:BM\x95\xba[;\x04=\x01\xc7\x12\xbc\xbd\x147=p\x04n\xbc\xca\x8b\xae<\x8c1\x05=\xb0\xb7b;Y\xf5\a<C\xad\xb4\xbc\xe1\xa6\x8f<!Z\x84<n\xe4\x8f\xbb\xecd\x9c\xbc7\x1c\x1a\xbcJ\xc5\xa5<\xd7u\x14<\xbfZ3\xbc0w\x17\xbb\x8ae\xcb\xbb$\x00\xa0\xbc\x03\r\x0f=\xa9\x0b\x0c=\xe6\x0cj\xbc(\xff\x06<\x19I\xe7\xbc\xe4L\xab<n\xe4\x0f\xbd\x0c\xd2\xef\xbc\xd0C\x80\xbc\xad\x11\xc7\xbcC\rT\xbdu\xfc\x80\xbb\xe1\xad\xe3\xbcJ?\xe8<66\xbd\xbc\x02'\xb2\xbc\xe3S\xff<-^\r\xbd1J\xa5\xbd\xa2\xe0K\xbcy\x02\xbc<\xcb\xd8\xfe\xbc\x8eQ\xe3;\x15\xd0\xbd;\xdd\xa7\xa8<\x18\xe9\xc7\xbc\x06\x99\x87\xbb\xb0*\xd1\xbc\x85y3\xbc\xc0\xbaR\xbd\x18o\x05\xbc\xcax\xdf\xbc\xf6\x9ck\xbb\x05S\x0b=\x06\x13\xca<i\xec|<\xd8H\"\xbcn\xe4\x0f<\x9fTS\xbc\xbd\xa1\xc8<P\n\x89:\xcc\xd1\xaa;\xf0=e\xbc\xbcA\xa9:{H8\xbc+\x05\xc2\xbc\xce\x8a\x15<e\xf9\x10\xbd\xd0C\x80\xbc\x01:\x81=\xae\xf7#\xbc\xf3|\x8d\xbc\xa0\x9aO\xbcqp\x88\xbbn\xe4\x8f\xbac\xa0E\xbc/\x91:<\x91}\xbc\xbc^A\xbf<G\xac\x9b\xbc\xbau\xef<\x13\xfd\xaf\xbb\xbet\xd6<3\x90\xa1\xba\xb9\x9b\r\xbd\x91}<<\xed\xaa\x98;yu\xaa;\xee\x97I\xbb\xb9\x9b\r=\x91\x90\x0b\xbd\x9fTS<\x1d[\x1d\xbc\xb7\\e<\xc7r\xa4:\x86\xec\xa1<\xd0\xbd\xc2\xbc\x9aU\xec\xbc\xa8\x9fq\xbc\xbd\x147\xbc;\xa8\x12<\x95\xf6\xe5\xbc&\xb9\x8a\xb9\xd3v-;Y\xf5\a\xbdh\x12\x9b<\xea\x1e\xa0<\x0cX-='\x19\xaa\xbb\x8b\xbe\x16\xb9\xd4I\xbb<K\x12\xf6\xbc\xb9(\x9f\xbb%F\x9c\xbb\x150]<^T\x8e\xbb|\xa1\x83<B\xc0\x03\xbd5c/;\xa0'\xe1\xbc\x1a\xb5\x01\xbc\x92\xdd[<\xbb\xe1\x89<\xccD\x99<M\xcb\xe0\xbc\x95\t\xb5<\xb7U\x91\xbc\xdd\xa7(;s\x1dx=\x95|\xa3\xbc\x8c\xab\xc7<\x18o\x85\xbcl\x18\xd6;&\xb9\x8a\xbc\xf5\xc2\t\xbd\x01:\x01;qp\b=\x11\xca\x02<E\xd9\x8d<\xb5\x16i\xbb\xa49\x97\xbb\x80\xa7>\xba!Z\x84:j\xd2Y<\xcd\xb7\a\xbb\xb7\xcfS<\x85\x06\xc5;\xb6\xe9\xf6\xbbb\xcd7\xbc\xb2\xf6\x8a;\xdc\xae\xfc\xbcF\xb3\xef\xbbA\xda&\xbcB'w=\xd7\xe8\x02=\xb7\\e\xbb\x04\xcdM\xbct\xa35<\xb2pM<F9-\xbd\x11\xb73<0\xf1Y<\x12\xa4d<G\x1f\x8a;\r>\n=\x19I\xe7\xbb\xe0\xc0\xb2<\x9f\xb4r:\xa0\x9a\xcf<\x05@<=\x89\x7fn\xbc\x16)\t=\xee\x97I\xbc\x99\x95\xad<MX\xf2;3\x90\xa1<I\xcc\xf9\xbci\xec|<\xfe\xad\x88;\x10\xe4%=\xfe\x9a9</~\xeb<\xaa\xf8\xbc\xbc\xe7x\x04<f\xcc\x9e:Pq\xfc;'\x93\xec\xbcm\xeb\xe3<\xe5\xacJ<\t?#\xbc\x1a/\xc4:\x06\x99\a<ES\xd0;\xe1\xa6\x0f=\x7f\xc1a\xbc\x84\x19\x14\xbd\x00\xcef\xbb\x8c\x1e\xb6\xbc$s\x8e<\xfd\xc7+=\x92c\x19<\x00\xce\xe6<\x96b\x80<w/.\xbds\x1dx\xbb\x11W\x14\xbd\xdc\xae\xfc\xbc\x06&\x99<\x93=\xfb<~Ns<\xbd\x8e\xf9\xbbPq|=\a\x86\xb8<\xbe\x87\xa5<\x8f7\xc0<\x19\xcf$=\xf6\")\xbb:\xaf\xe6\xba\x83\xd3\x97\xbc\xbe\x87%\xbb-^\x8d<\xafj\x92<C #=\xa4\xac\x85\xbc\x04\xe0\x1c\xbd\x9bN\x18\xbd\xa0\x9aO\xbax\x8f\xcd<\xfcg\x0c=s\x1d\xf8:\x1f\x01\xb9<X\x82\x99<\xe13!\xbd\x06\x99\a\xbc\xfcg\x0c\xbbIR\xb7\xbc\a\xf9\xa6\xbc\xe3\xf3_\xba#\x1a\xc3\xbcR=\xb6<\xb8/s\xbb\xa6l\xc4\xbc\xfa!\x90<\x18o\x05=\xaa\xe5m\xbc\x0e\x9e)<W\x16\x7f;Y\xf5\x87<t\xa3\xb5<uvC<D\xf3\xb0\xbb8\x8f\x88<\xea\x1e\xa0;\x13\x8a\xc1;(\xec7\xbdw/.=\xd4I;\xbcQj(\xbdR=\xb6\xbc\x03\r\x0f\xbd\x85\x06E9\xfa\x0eA=\x00[\xf8\xbc\xe4\xd9<\xbal\x9e\x93\xbb\x9c\xae7;\xa7?R\xbc\xe8K\x92;\xf0\xdd\xc5;$\x00 <s\xb6\x04\xbdD\xf30\xbb\xe4\xc6\xed<\x95\t\xb5\xbcj\xcb\x05\xbd~\xd4\xb0<\x90\x1d\x1d=\"-\x12;Tpc:\xdd\x94\xd9\xbao1`\xb9;\"\xd5\xbc/~k\xbc\xecQM\xbbx\x15\x8b<>\xc1\x1c=\xd8H\xa2<\xed\xaa\x18;\xa0\x9aO\xbc,x\xb0<\x17\x89(<\x8c1\x85\xbc\xdfg\xe7;6I\x8c<\x9eg\"\xbd\xb3\xe3\xbb<\r>\x8a<\xcb^<\xbcRP\x05\xbd\x15\xd0\xbd;{\xa8\xd7<\xc5\x9f\x16\xbd\x0c\xd2o\xba\b\xdf\x03\xbc\xd8H\xa2\xbc@\xf4\xc9<\xb3V\xaa;\xfd:\x9a<\xcbK\xed;8\x8f\b=\x95\xf6\xe5<9\xdcX=\xca\x05q\xbc}t\x91:\xdc\xc1K\xbc\xbetV\xbc\xc5\x9f\x96\xbcz\xd5I\xbdp\x91\xff\xbcRP\x05\xbcl\x18\xd6<S#\x93<\xea\x1e\xa0\xbb\xf1\xc3\"\xbd\x94\x96\xc6\xbb\x8bK(=\xc4\xcc\b=\x9eg\xa2\xbb\x98\x0fp<\xaf\xdd\x00\xbdu\x89\x92\xbc\xef\xf7h\xbb`\x9a\x8a\xbb\x92\xf0\xaa:=\xdb?\xbb\x9e\xe1\xe4\xbcG&\xde<;\x1b\x81;\x86\xec\xa1<yu*<\xad$\x96<\xabX\xdc<\xec\xd7\x8a;\xe8\xd8\xa3<\x11\xb7\xb3\xbb\xe6\x0c\xea\xbc\xf5)}<\xa7\xcc\xe3\xbb\xe6\x7fX<M\xde\xaf\xb9S\xb0\xa4<W\xaf\x0b=\xc4\xb9\xb9\xbc\x8f\xd7\xa0\xbb\x9d\x81\xc5\xbbg?\x8d\xbc\xd46\xec\xbc\x985\x0e<\x9a{\x8a<\xa6\x7f\x13=l\x8b\xc4;\xb9(\x9f=\xa6\xf2\x81;\x7f\xc1\xe1\xbc\x1d[\x1d=/\x91:\xbcs\x1dx\xbc\xac+j<\xb3\xe3;\xbc\xbbn\x9b\xbc\xa1\r>\xb8J\xb2V\xbc1\xea\x05\xbd\x90$q8\"-\x92\xbb\x95|#<W\xaf\x0b=z\xe8\x18=W\x16\xff\xba\xe0\xc02\xbc\xcf\xd7\xe5<W\x16\x7f\xbcD\x80\xc2;\xe2\x06\xaf<F\xc6>\xba\xa8\xc5\x8f<\xc5\x9f\x96<\x9a{\n<R=\xb6=\xff\x80\x16=D\xf30<sC\x96<z\xd5\xc9;\xf5<L<X\x82\x19\xbd\x88\x92==\xa6\x7f\x93<\x06&\x99\xbc\xf5\xc2\x89\xbc\xab\xde\x99\xbc\x13\x8a\xc1\xba.1\x9b\xbc\x89\x7fn\xbcA\xda\xa6<\x85\x06E\xbd\x8a\xd89=[\xa2\xf7\xbc\x9bN\x98<\xb4\xb6I\xbb\x18\\6<\xc0\xcd\xa1<\xf2\x83\xe1;\x8b8Y<\xe52\b\xbb\xdc\xae|<\xc7_\xd5\xbc\x98\x0fp;\xd0\xaa\xf3<\xf9\xae\xa1\xbc\xa6lD\xbc\x10\xd1\xd6<\xb0*Q=\xf9\xae!\xbb\x85\xf3\xf5<\xd8\xc2d\xbc)\xd2\x94\xbc\x8a\xeb\b\xbc\x9f\xda\x10\xbd\x83F\x06< t\xa7;\xdc\xd4\x9a:\x9d\x81\xc5<@\a\x99\xbc\xea\x0bQ=\xa4&\xc8<\xbfm\x02\xbc\xed\xb1l\xbc\xb0\xb0\x8e\xba\x1e\xa8\xed\xbc\x96\xdcB;\xd0\xaa\xf3<&\xb9\n\xbc\xe8K\x12=q\xfd\x19\xbd\x18\\\xb6<\xeb\xde\xde<|.\x95\xbcK\x12\xf6;\xe7x\x84<I\xcc\xf9</\xa4\t\xbb\xe5\xbf\x19\xbbsC\x16\xbc=\xdb?\xbdl\x18\xd6\xbcz\xe8\x98;\xc3\xe6\xab\xba\xec\xc4\xbb\xbc\xdd!\xeb\xbc\x81\x00\x8a<\xf3|\r\xbc\x8d\x91\xa4;\xa0\xad\x1e<\xa4\xb3\xd9<\x94\xa9\x15= \xee\xe9<[\xa2w<\x16\xb6\x1a\xbc\xdb\xdb\xee\xbbF\xc6\xbe<U\xf6 \xbc\x9d\x81E<k\xb86\xbc\x96b\x00=\xf6\x95\x17;\xd2\xf0o<e\xe6A\xbb\xf7\xf5\xb6=w/.\xbc8\xf6\xfb;\xee\x84z<\xf0c\x03=\x82\xda\xeb\xbc\x92c\x99<\x9f\xda\x90\xbc\xf0c\x83\xbb*\xac\xf6\xbb\xb2]\xfe\xbbVCq;\xe4\xc6m<\xda\x8e\x9e\xbc\xdc\xae\xfc<&\xb9\x8a\xbb#\x8d1<\x19B\x93\xbbDm\xf39\x17\x03\xeb\xbb\xd6\x8f7=s\xb6\x84\xbb\xc3`n\xbb\xc2\x00O<NQ\x1e=vI\xd1\xbc8\x8f\b<\xf0c\x03\xbd\xcb\xd8\xfe;\x8c1\x05\xbam^R\xbdg?\x8d<\xcbK\xed<\xe5\xbf\x99\xbc\xe3fN=\x95|\xa3<p\x04\xee;\xeb\xf1-<\x00\xe1\xb5\xbc\xa1\r\xbe\xbbTp\xe3\xbc5c\xaf<\x02\x9a\xa0\xbcy\x02\xbc<+\x92S<\xdcG\x89<o\xb7\x9d<VCq\xbb\xcf\xea4;\xf4\xc9]\xbbv\xd6b;d\x00e\xb9\x8d\xf1\xc3<\xaak\xab\xbc-^\x8d<\x90\xaa.=\xc7\xe5\x12\xbc\xb9\x9b\r<\xd6\tz\xbco1\xe0<\x9c\x9b\xe8\xbb[(\xb5\xbb\xb3C\xdb\xbc\xf7\x82H9.\xbe\xac<\x83\xd3\x17;\x9d\a\x03\xbd.\xab\xdd\xbc\x8fJ\x8f\xbc[\xb5\xc6\xbc\xd5\x1cI<S\x9dU<\xff\r\xa8\xbci\xe5(\xbc*\xacv<6I\x0c=\xda{\xcf;\xfa!\x90<\xf6\x95\x97:NQ\x1e\xbbM\xde\xaf<:\xc25\xbc\xc6\xff5:\xc7\xd2\xc3\xbb\x9c\x9bh\xbb1Q\xf9<=\xee\x0e\xbcTp\xe3:\x97\xc2\x9f\xba\xf3|\x8d\xbc\xb9\x15P<ir:\xbc\x80\x94o\xbbuc\xf4;\x82`)\xbcbGz\xbc<{\xa0\xbc\x9c\xc1\x06;\x10^\xe89\xccD\x99<\x16\xb6\x9a\xbb\x03\r\x8f;\xb0*Q<o\xb7\x1d<\xecQ\xcd<0\x04);\xcfd\xf7<w/.\xb9\xc2\x86\x0c=W)\xce;g\xb9\xcf<\x95|#\xbcf\xcc\x9e\xbci_\xeb\xbc9b\x96<\xed\xaa\x98;O\xb1=<,\xeb\x9e\xbcam\x98<\xe3y\x9d<VC\xf1;\xc7\xd2\xc3\xbc\xa9\x12\xe0<\x1b\x8fc<\x82\xdak<am\x18\xbc6I\x0c;k+\xa5\xbcX\x82\x19\xba6I\x0c=\xa5\xf9U\xbaw/.:\xabQ\x88\xbc\xd0C\x80\xbcK8\x94\xbd\x1b\x88\x0f\xba\xb5\x16i=\\\x9b\xa3<\x01A\xd5\xbc\x9b\xdb\xa9:\xf4O\x9b<\xff\xfa\xd8<\xe3\xf3\xdf<}{\xe5;\x90\x1d\x1d\xbd\xf4\xc9]\xbb\xe1 R\xba\xe8\xd8#<\x11W\x94\xbc\xf7\xe2\xe7\xba\xbbn\x9b;_\xa1\xde<\x0c\xd2o<\xf6\")<\xa1\x80,=/\x91:\xbc\xbd'\x86\xbb\xee\x97\xc9\xba\x05@\xbc;l\x18\xd6<\xb0\xb7\xe2\xbb\xf5\xc2\t;\x18\xd6\xf8;\xde\x1a\x97\xbc\xea\x1e \xbdu\xfc\x00\xbb#\x8d\xb1\xbcW\xaf\x8b<D\x80\xc2\xbc\bl\x95\xbc\xdcN]\xbb\xf8\xdb\x93<\x97<b\xbb3\x90\xa1\xbb\xee\x97I<1\xc4\xe7;$\xed\xd0\xbb/\x91:\xbcYoJ\xbbfF\xe1\xbct\x16\xa4<\x16)\t<U\xe3\xd1\xbb\xf7\b\x86\xbc3\x1d\xb3\xbc\x7fG\x9f<\x8b\xbe\x16\xbd20\x02=\xe9%t\xbcP\x84\xcb<x\xa2\x9c\xbc\xce\x8a\x15\xbd}{e<\xa1\r\xbe\xbc?\x9b~\xbcW<\x1d\xbc\x96i\xd4;Dm\xf3\xbcc@&;)_\xa6;MX\xf2<c-\xd7<3\x1d\xb3<i\xe5(\xbcK\xab\x02=\xd7\xe8\x82<;\x95C<\x85f\xe4\xbcS\xb0\xa4\xbc\x18\xd6\xf8\xbcp\x17=\xbc@\xf4\xc9\xbb\x03\r\x0f\xbb\xe1\xad\xe3<\xad$\x16\xbd\xb6\xfc\xc5<\xb4\xb6\xc9<\x93\xb0\xe9:#zb<3\x1d3\xbd\xa49\x17=\x04\xcd\xcd;\xb3\xe3\xbb\xbc\xc5\x9f\x96\xbc\x0c\xe5><\xdba\xac;W\xaf\x0b=;\x95C<\xb0\xb7\xe2<\xbf\xd4\xf5\xbc\x91}\xbc<\xaf\xdd\x80<5\xd6\x9d\xbc\xe13!\xbcn\xd1@<\xec\xd7\x8a\xbb\xe1\xadc\xbcU\xf6 =\xff\xfa\xd8\xbc\xed\xaa\x98<\x93\xd6\x87\xbc\xfbn`<J?h;sC\x16=1J%\xbb\x1b\x15\xa1<\b\xe6W\xbbL\xf8\xd2<\xca\xfe\x1c=\xf9N\x82;oD/<\x8d\x91$<3\nd9L\xf8\xd2;\xb7\xe2\"\xbc7\tK\xbc{5\xe9<\x88\xa5\x8c\xbc\xa6lD\xb8Y\xe28;\xb5\x9c\xa6\xbc\xc4\xa6j<\x18\xe9G=z\xe8\x98\xbc8\xf6{\xbc\xafj\x12\xbc\xcd\x91i\xbb\x9b\xc8Z\xbcL\xf8\xd2\xba\x1f\x8eJ;\xfb\x81/\xbc\xbetV\xbc\x17\x89\xa8\xbbPq|;\xe4\xc6m\xbc\xa5\x996\xbd\xbc\xbbk\xbb\xf8\xdb\x13=\xa5\x0c%\xbdW)N\xbc\x9fTS=\xef}\xa6<\xb7\\e\xbb\x00\xf4\x84\xbc\x97\xc2\x9f\xbb*E\x03\xbbB'w\xbcJ\xc5\xa5\xbc\xd1\xa3\x9f;\xb8B\xc2\xbci\x85\t\xbd\xd0\xbd\xc2<\x13\x8a\xc1\xbc\x17vY<\x18\xe9\xc7<\x9f\xda\x10<s\xbd\xd8\xba1\xc4g\xbbJ\xc5%<\xdd4::" "content" "**Refined Summary:**\n\nIn this comprehensive workshop, Guy Royce from Redis demonstrates how to build a powerful Node.js API leveraging Express.js and Redis. The focus is on CRUD operations, search functionalities, and the innovative use of Redisome for object mapping. Throughout the presentation, Guy showcases the steps to create and manage person data attributes such as names, ages, and locations, stored in Redis as JSON documents. He delves into the usage of Redis Search and Redis JSON for advanced querying capabilities, like full-text searches that intelligently handle grammatical variations and ignore insignificant words. Guy introduces geo-searches, enabling searches for persons within a specified radius of a geographical point, using Redis's geo functionalities. An interesting addition is location tracking, where Guy explores updating location data and maintaining a history of location changes using Redis Streams, despite Redisome not directly supporting this feature. This is achieved by accessing the underlying Node Redis client to execute operations beyond Redisome's capabilities. This workshop serves as an educational tool for developers looking to integrate Redis into their Node.js applications, offering a blend of foundational and advanced techniques.\n\n**Example Questions:**\n\n1. **How does Guy Royce facilitate full-text searches within the API?**\n   - Guy uses Redis Search\xe2\x80\x99s full-text search capabilities by employing the `matches` verb in Redisome to search personal statements for specific words or phrases, accounting for grammatical variations and ignoring common, insignificant words.\n   \n2. **What makes the geo-search feature unique in Guy's demonstration?**\n   - The geo-search functionality allows searching for persons within a specified radius from a given geographical point, showcasing the ability to perform proximity-based queries using Redis's geo capabilities.\n   \n3. **How does Guy Royce implement location tracking and history in the API?**\n   - Guy extends the app with location tracking and history by utilizing Redis Streams to log changes in person locations over time, a feature implemented by accessing the underlying Node Redis client to circumvent Redisome's limitations.\n   \n4. **Can you describe how the Redis Stream data type is used for location history tracking in Guy's workshop?**\n   - Redis Streams are used to maintain a log of location changes by creating a stream keyed to each person\xe2\x80\x99s ID appended with \"location history.\" Each entry in the stream includes a timestamp and the new location coordinates.\n   \n5. **What adjustments did Guy make to integrate Node Redis directly with Redisome for location history tracking?**\n   - Guy modified the setup to import the `create client` function from Node Redis, used it to explicitly connect to Redis, and instructed Redisome to use this connection. This dual setup allows Guy to utilize Node Redis for operations Redisome doesn't support directly, such as Streams for location history tracking.\n\n6. **Why did Guy Royce choose to express distances in miles for geo-searching, and how could this be changed?**\n   - Guy humorously refers to miles as \"freedom units\" and acknowledges his preference due to being American but explains that the unit can be easily adjusted to kilometers, meters, or feet, according to the user's needs or regional standards." "metadata" "{\"id\":\"KUfufrwpBkM\",\"link\":\"https://www.youtube.com/watch?v=KUfufrwpBkM\",\"title\":\"Redis Stack Workshop: Redis Stack OM Library for Node.js\",\"description\":\"Join us on April 13th at 5:30pm GMT for the Redis Stack OM library for Node.js workshop with Redis Developer Advocate Guy Royse. \\n\\nTune in to follow as Guy demonstrates how to create applications using Redis Stack and Node.js. Also, see how to store your data using Redis OM and store data using RedisJSON. Follow along with the sample application built with Express, which is available on GitHub. Guy will be on chat to answer any questions. Stay tuned!\\n\\nSource code for the demo application: https://github.com/redis\\-developer/express\\-redis\\-om\\-workshop\\nRedis OM Client for Node.js: https://github.com/redis/redis\\-om\\-node\\n\\nFrom the blog: https://redis.com/blog/introducing\\-redis\\-stack/\\nDiscover Redis Stack: https://redis.io/docs/stack/\\n\\n#Redis #RedisStack #NodeJS #RedisOM\",\"thumbnail\":\"https://i.ytimg.com/vi/KUfufrwpBkM/maxresdefault.jpg\"}"
"HSET" "openai-video:3" "content_vector" "a+\xc7\xbco9\x928\xa6\xebo=\xbdf\xa5\xbb<u\x1a=\xc4\xed\x8a<\xd2\x1aC\xbc\xd0H\xdb<'\xbe\x8d<F\xdc\xa6\xba\t\xae3=a.6\xbd\x97\xd2T<:\x92\x04\xbdS \xeb<\x02\x131\xbc$\xf2\x83\xbc\xd6\xd5\x1e\xbc\x1b\x82*\xbd\xe7\xd4>=\x1a\x996=g\xc9\xb8\xbc\xab\x8f\xbf\xbb\x8fC\x8e<r\b\x0b\xbcw\xdf\xe4\xbc.gO\xbd\x95\xef>=\xa1+\"\xbc\xa4\xf7+\xbd\x8eh\xd9<C\x1e\xdc\xbc\xdeV\xa6\xbc\xf3\nD<\x93\x0c)\xbbY\xad.\xbc\xf3\r3<\xeb\x8c+\xbd\x0eO\x14=I\xab\x9f<\x8eW+=13\xd9\xbc\x028|;\x9fB.\xbc\xd14>;\xc5\xf5\xeb<M\x82y\xbdLw\xa9\xbbD\x18~\xb9\xc5\xf5k=?A\xa4\xbc\xc8\xb6%=\xf6\xeaj\xbd\xd2\t\x15\xbdG\xd6H=\xb5\xe2.<i\x9e\x0f\xbc\x1dv\xee<\xb4\n\xe9\xbbT\xf8\xb0:\x8f@\x1f=! \x9c\xbbF\xd97<\xfeL\x85<\x10Wu\xbc\xffC8<-Y\x10\xb9F\xc8\t\xbcR&I\xbd\xdfav<\x1c\x7f\xbb<\xb9\x9d\n\xbc\x03!p<-j\xbe\xbc\x90=0=\x82\n\x9a\xbcF\xc8\x89\xbcc\x00\x9e<\xada'<\x85\xd9\x12<\xa4\xf7+\xbd\xfdc\x91<d\xfa\xbf\xbc\xc05\x9e\xba\xb1\x19\x14=\x9b\x9e\xde\xbcH\xbf<\xbdZ\xb8\xfe\xbc\xa7\xc6$\xbd\x96\xdb!:\xd1#\x90\xbdg\xcc'=K\x9fc\xbcv\xd1%=\x04\xfc\xa4<t\xee\x8f\xb93\x0b\x9f<\xe2\x11\x02=\xcb\x93\xdd\xba?A$=\x028|<\\h\x8a\xbdK}\a\xbd\xd6\xf7\xfa\xbc\x9b\x9e^<M`\x9d\xbb\x1b\x82*=\x01*\xbd\xbb\"\t\x10\xbdf\xcf\x16\xbc\x10F\xc7\xbd\xf2\x10\"\xbd\x93\xf8\x0b<\x14\x0cs<\xa8\xb2\a\xbb'\xcc\xcc\xbc\xba\xa8\xda\xbc\x0c\x8b\xeb\xbc\xa2%\xc4\xbb\xfeZ\xc4;'\xcf\xbb\xbcQ\x18\n\xbc+\x849;\xd8\xbb#\xbcJ\xa2\xd2\xbc\xefU\xc6\xbc\t\xae3=\xf0*\x1d\xbdP=\xd5\xbc\xadd\x16\xbd\x9b\x8a\xc1<5\xdd\x06==\x80j;.V!\xbc\xa8\xaf\x98<\rt_\xbcT\xf80\xbd\x9fVK\xbb\x18\xd8\xfc\xbc\x8eW+<\xc1\x1e\x92;\x88\xa8\x8b\xbd`EB\xbb6\xe8\xd6;r*g\xbc,\x81J\xbd\"+\xec<\xc0Wz<\x81$\x95\xbc\xf4\aU\xbb(\xa7\x01=\xcf:\x1c=L\x88W\xbdNkm\xbb\xc7\xde_\xbcy\xb4;\xbc\x00AI=\xc9\xc1\xf5:\xfa\x94\x98;a+G\xbd\x1dW\x01\xbd\xe0<\xab<\xb1-1\xbd|o\x97;\xbc\x8bp\xbdf\xcf\x16\xbdd\xfd.\xbb\xb8\xc5\xc4\xbc)\xa1#\xbd\xecr\xb0\xbcx\xc8X<w\xce6\xbd(\xa7\x01=~R\xad;\xe1%\x1f=*\xacs\xbcpX\x7f\xbc\t\xae\xb3\xbc\x18\xb31=;\x8c&\xbdnS\x8d\xbdpGQ\xbd\xf9\x97\a\xbdP2\x05<\x80I`\xbc\t\xabD\xbaj\xa9_\xbc\xc5\xf5k\xbbA5\xe8\xbc\xf0>:<j\x87\x83<b(\xd8=\xa9\xa9:\xbd\xc2)\xe2<\xb4\xfc\xa9:\xc0F\xcc\xbb\xda\x9e\xb9<(\xc9\xdd<:\xa0\xc3\xbcG\xc5\x1a\xbd\x1cn\r=\xe9\xa37=a\x1d\x88<'\xe0\xe9\xbb\xba\x97,<i\xaf=<\xc8\xb6%\xbb\xcb\x93]\xbb\xa5\xf1M\xbd\xf2\x13\x11\xbd\xc5\xf5\xeb<\x18\xd8\xfc\xbc HV<\xdd\\\x04=p6\xa3\xbcs\x05\x9c\xbc\xc0Wz\xbd\xa5\xe3\x8e;\x89\xb3\xdb\xbc%\xe96=\xca\x9c*\xbd_K\xa0=\xb2'\xd3\xbbX\xb0\x9d\xbcL\x88\xd7<U\xe1$=mg*=\xccq\x01\xbc\xfcw.=\xe09<\xbcR7w<\x1f:\x97;w\xce6\xbc\xca\x99;\xbd\x0b\x80\x1b=Lt:\xbd[\xa1r\xbcG\xc5\x9a\xbc\xa9\x98\x0c=l\x8c\xf5<\"+\xec\xba\xb5\xd1\x00=\n\x97'<OTa<\x9b\x9e^=\xdfB\t<\xbb\xa2\xfc\xbc?D\x93\xbd1%\x9a<\xddm\xb2<\xc9\xc1u=w\xce\xb6\xbcu\xf6\xf0;<\x97\xf6\xbc\xec\x97\xfb;\x04\nd\xbd\xc5\xe7,\xbc\xbb\x91N<\xda\x9b\xca;\xe2\x1fA\xbc\x96\xdb!\xbdy\xb4;\xbdu\xf6\xf0\xbc\xcb\x96\xcc\xbb#\x17\xcf\xbc\x15\xe7'=\x97\xc4\x15=\n\xa8\xd5\xbc\xcb\x93\xdd\xbc\xe5\xff\xe7\xbc\xe3\b\xb5\xbcB\x10\x1d<\xfekr\xbci\xac\xce\xbb\xcc|Q\xbc\xe3\xf7\x06\xbc'\xccL=\xcdv\xf3\xbb+\x849<V\xde5;!#\x0b<\x96\xe9`\xbcE\x01\xf2\xb9\xc6\xd3\x0f=\x06\xce\x8c;\xd7\xccQ=\x0eO\x14<\xb1\x19\x94<\x13#\xff<J\xa5A\xbd\xbb\x94\xbd\xbc\x83\a\xab<\a\xc8\xae\xbc\xeeX5\xbb\xc3\x04\x17=^N\x0f<S k<\x914c=\xc4\xea\x9b\xbbh\xb5\x9b\xbc\xcc\x8d\x7f<\x05\xf6\xc6\xbc\xadr\xd5\xbb\xe5\xda\x1c\xba\xc6\xe4\xbd<\xd2\x1a\xc3\xbb\xa6\xcc\x02\xbc\xd7\xbe\x92\xbb)\xb5@<\xb1\x19\x14\xbdt\r}\xbc09\xb7<! \x9c\xbc\xfa\xa5\xc6\xbcX\xb3\x0c\xbdV\xcd\x87\xbc\x81$\x15=T\t\xdf\xbb\x86\xd6\xa3\xba\xd6\xf7\xfa\xbcNI\x11\xba\x96\xdb!\xbc13Y=\xe0(\x8e<7\xc3\x8b\xbc\xe7\xc0\xa1\xbd\x19\xb0\xc2<\xf8\xb1\x82\xbd\x0eR\x83<\xedlR\xbd\x1ee@<\xa1+\"\xbd\xc4\xea\x1b=?A$=\xa5\xe0\x9f\xbc\xf0-\x0c\xbd\xfeZ\xc4:\x96\xe9\xe0\xbb\xb9\xbf\xe6\xbc\xae^\xb8<7\xe2x\xbc4\x05A\xbd\xecr0\xbd\x03\xff\x13\xbdj\xa9\xdf;\x812\xd4<\xf8\xb1\x02\xbc\xbb\x83\x8f\xbb\x8a\x9cO\xbc\xbf8\x8d:*\xac\xf3\xbc\xca\x88\x8d\xbc\xcb\x85\x1e;\xb6\xdf?\xbd\xe7\xc3\x10=\xfeI\x96\xbc\xb7\xb7\x85\xbc\xe0Jj<\xa16r\xbd\xb3!\xf5\xbc\xc6\xd3\x0f\xbdd\x0b\xee<\xfa\xa5\xc6;\xd3\x14e<\x90:A=\xcdW\x86\xbc\xc6\xe1\xce\xbc\x1dv\xee\xbc\x8a\xad}\xbc\xe3\x0b$\xbd\xf6\xea\xea<r*g=\xc4\xfe\xb8\xbc\xe16M\xbc\xd2+\xf1\xbc\x812\xd4<G\xc2\xab<\x0b\x80\x1b=\xb1*B\xba\xf6\xd9\xbc<\xbb\x83\x0f=\x9a\x93\x8e;\x87\xe1s\xbbC\r.\xbd\xdf?\x1a=\x04\xfc\xa4<\xf8\xae\x13=\xa2\x14\x96<y\xb4;\xbdZ\xb8\xfe<\x0b\xa2\xf7\xbb\xc7\xcaB\xbd\xd3\x17\xd4\xbc_K <\x18\xb6\xa0<\x7f`l<\xa9\x98\x0c:\xae[I<F\xdc\xa6=\x82\n\x1a=?UA<\xd7\xc1\x01\xbd\x0b\xa2w\xbd\xe8\xa9\x95\xbc\x7f>\x90\xbc{\x94b<}X\x0b\xbcw\xbd\x88<!B\xf8\xbb\xa3\xfa\x1a\xbd3\x0b\x1f<\xcee\xc5\xbc\xe4\xf4\x17=\x8bw\x04\xbdd\xfd\xae\xbbJ\xa5A\xbca+\xc7\xbc\x98\xad\t;t\xfcN<\xfa\x91)=\x06\xedy=\x18\xb31\xbd3\b\xb0\xbc\xe9\xa3\xb7\xbb\x8d\x7fe\xbd\n\x97'=\x82\x1bH=\x04\n\xe4\xbcs\x16\xca\xbb\xbb\xa2\xfc\xbc\xc5\xe7\xac\xbb\x8b\x8b!;\xd4\xef\x19=`4\x14<\xbf]X<u\xd7\x83:s\x05\x9c<\xa2%\xc4<\xf8\xbc\xd2;\x84\x04\xbc\xbcw\xce6\xbc\xc9\xb0G=R7w\xbd\x04\xe8\x87;\x98\xbe7\xbd\xa7\xd4c<\xcb\x85\x1e\xbd\xf9\x97\a\xbd\x1a\x9c\xa5\xbcE\x01r<?R\xd2\xbc@-\x87\xba\x92\x0f\x18<\xa5\xe0\x1f=D\xf6!\xbc/PC\xbd/aq=F\xc8\t=\xc3\x04\x17=\"\x1a\xbe\xbc\xd8\xc9b\xbdC\xf9\x90=\x90)\x13\xbd\x82\n\x9a={\x834=Nk\xed\xbcC\n\xbf:\xe4\xf4\x97\xbb\x03\x10B=\xf4\a\xd5\xbc\xf1'\xae\xbb\x19\x9f\x14=^\\\xce\xbc\xba\x97,\xbcZ\xa7P\xbd\x03\r\xd3\xbcb(\xd8<]v\xc9;\xd2\x0c\x04=\x96\xc7\x84;NL\x80\xbc\xe13\xde\xbcNZ?\xbdc\x00\x9e<y\xb4;=r\b\x0b=\xf2$\xbf\xba\xacx\xb3<\x80I\xe0<\xc6\xd3\x0f=\xe1\"\xb0\xbcY\xad\xae<\x815C=\xedlR\xbc\x84\x01\xcd\xbcu\xeb \xbd\x7f`\xec\xbc\xddY\x15\xbdy\xb1L<j\x87\x83\xbb\xeeic=\xcfKJ\xbc\xd7\xbe\x12\xbc`1\xa5=]sZ\xb9\x80'\x84\xbb_7\x03\xbde\xf7\xd0<\xf7\xd3^=\n\xa8U;Nkm\xbc5\xff\xe2\xbb\xa7\xc6$<\x82\n\x1a=3\x16\xef\xbb\x1f:\x17\xbb\x84\xf0\x1e\xbd\x81$\x15<\xbb\x94=;\xb3!u\xbc]s\xda\xbb\x85\xdc\x01\xbb\x0fI\xb6\xbc\xbeR\b=\x9db\x87<;\x8c\xa6<\xd6\xf7z\xbd\xcdW\x86\xbcnd\xbb\xbcnS\x8d\xbcu\xe81;\xa16\xf2\xbb 7\xa8\xbc\xba\x97,=nS\r\xbd\xa1(\xb3\xbc\xb1>\xdf\xbc\x98\xaa\x1a\xbc\xd2+q\xbcS\x0c\xce\xbc\xb00\xa0<\x8d\x7f\xe59\x9eH\x0c\xbc?R\xd29\xeda\x82<\xccn\x92<\xec\x97{<\xaeJ\x9b\xbc\x18\xb3\xb1\xbcj\x9b\xa0\xbc\xd5\xfd\xd8<\xddj\xc3\xbcK\x8e5=\xfcw.\xbc\xddY\x95<lj\x99<Mc\x0c\xbdr\x199\xbd/?\x15=\xf2\x13\x11\xbdA')<&\xe6G\xbb\xe4\xf4\x97\xbb\xeb\x89<\xba\xa7\xd7R\xbc\x9eH\x8c\xbc\xbfL\xaa<\xe2\x1c\xd2\xbc@L\xf4\xbb\\y8=\xfek\xf2\xbb\x83\x15\xea\xbc\x102\xaa\xbco9\x92\xbc\xc3\x04\x17=4\x05\xc1<\x1a\x9c\xa5\xbc\xddjC\xbd\xa1(\xb3<\xdc\x81O;\xf6\xc8\x8e\xbc\x9b\x9e^\xbc\n\xa8U\xbb\x917\xd2<I\xab\x1f\xbd\xf5\x01w<N]\xae;\x18\xc7\xce<k\x81%<\xc4\xea\x1b<pGQ<\xfb\x9fh\xbb;\x8c&\xbd\xe13\xde<z\x9a@<\xeb\x89<=\x1b\x82\xaa<\x0fI\xb6;\n\x948\xbc\xceQ\xa8;)\xc3\xff\xbbs\x13[<\xa6\xeb\xef\xbc\xf6\xdc+\xbcl~\xb6\xb9]e\x1b=\x1c|L<u\xf6p<\xe4\xf1(;[\xa1r\xbc&\xd5\x99\xbc5\xee4\xbc\xf6\xd9\xbc\xbcs\x02-\xbd&\xe6G\xbd~f\xca<(\xa7\x01\xbc\x17\xcd\xac;\xd0H\xdb;\xd0H[\xbc\xa3\x1f\xe6\xbc\xf0-\x0c\xbc\xb1\x19\x94\xbb\xdfB\t\xbc\xa8\xc0\xc6<H\xbf<=\xd11O\xbc\xd5\xec*\xbd\x06\xce\x0c\xbd\xdd\\\x04<N]\xae<F\xdc\xa6\xbb\xc8\xb36\xbc\x06\xdf\xba\xbc\x12\x18/;\x83\a+\xbbx\xc8X<U\xe1\xa4<Y\x9c\x00=?U\xc1\xbb\xe6\xe8[=s\x16J\xbc\x18\xc7\xce;h\xd7\xf7\xbbi\x9e\x0f=\\h\x8a;\x19\xc1\xf0<\xb8\xb4\x16=7\xe2x\xbc,s\x8b\xbc\xc7\xb9\x94\xba\x17\xdeZ\xbd\xefD\x98=\x93\t\xba;\xaeM\n=\xa16\xf2:\xa6\xcc\x02\xbdA'\xa9\xb8&\xe6\xc7;\\|'=\xdcp!\xbd*\xacs;\xcdv\xf3\xbc\xf3\xfc\x84;\xf8\xb1\x02\xbd&\xd5\x99<\x05\xf6\xc6;D\xf3\xb2<u\xe8\xb1<\x7f`l\xbb\x86\xf8\x7f\xbd\x17\xdeZ\xbc(\xc9]=}X\x8b<\xd7\xe0n<5\xda\x17\xbc\xe3\xf7\x86<\x8dZ\x1a\xbd\x8fb{<\xdb\x95\xec<u\xeb\xa0\xbc\\|\xa7<\xb8\xb1'\xbd0(\x89\xbc\x105\x99\xbc\xa9\xac)\xbd\xa9\x98\x0c<\x8dkH\xbcu\xd7\x03<!B\xf8\xbb\xc1,Q;\xaa\xa6K;\x7f`l\xba\xea\x92\x89\xbb\xc9\xc1u<\t\xbf\xe1<W\xc7)<\xed^\x13=\x0ci\x8f\xbc\x1dk\x9e\xbd\x0c\x8b\xeb\xba{\x834;\x85\xea@\xbd3\xf7\x81\xbd_H1\xbd\xe13^;\x04\nd<\xb4\xf9\xba\xbba.\xb6<F\xeae<\x17\xcd,\xbc\xa2\x14\x16;x\xc8\xd8\xbcNL\x80<<r+\xbd\x9f1\x80;\x97\xd5C\xbbX\xc1\xcb\xbc\xfd\x82~;\xdeV&\xbc\x0eR\x03\xbdK}\a=>G\x02\xbd\x8a\xad\xfd\xbc\xa1+\xa2<)\xb2\xd1\xb9z\x89\x12\xbdP@D=\t\xae\xb3:\x19\xa2\x03;\xb4\n\xe9;\x11\x1e\r<\xe8\xa9\x15=2\x1f\xbc;z\x9a@<#\x06\xa1\xbc\t\xabD\xbd\xb2\x16%\xbc\xd3\x06&<\xe0Jj<\xdb\x87\xad\xbc\x9a\x90\x1f\xbc\x8fb\xfb\xbc\x1ee@<i\xaf\xbd:\x8bw\x84\xbc\xa0?\xbf<\x1c\x8dz=X\xc4\xba\xbc\xe9\xa37<\x917R\xbcz\x9d/<-Y\x90<\x88\xa8\x8b<\x88\xca\xe79\xb9\x9d\x8a\xba\xd7\xcf@<\xf2\x10\"\xbcW\xd5h;\xe2\x0e\x13=\x80I`\xbc\x87\xbf\x17=\\h\x8a\xbc\xfd`\"=\xc6\xd0\xa0\xbcD\xf6\xa1<s\x13[<\b\xb1\"\xb9Y\xbe\\<Y\xad.<09\xb7\xbb\x1f_b\xbc\xe4\x05F<\xbb\x83\x8f<\xbb\x83\x8f\xba\xd2\x0c\x04\xbdZ\xb8~<?D\x93<k\x81\xa5<\xacg\x85;\x88\xcag;`1\xa5\xbc\xa5\xf4\xbc<\x18\xd8\xfc\xbb\xaa\x81\x00=\xe2\x0e\x13\xbc\t\xabD\xbc\xc2\x1b\xa3<\xe2\x1fA\xbd\x0ci\x0f\xbd\x90,\x82\xbcr\b\x8b\xbc\x8d]\t\xbc\xe6\xd7-\xbdM`\x9d\xbb\x06\xdf:<\xc9\xa2\x88<E\xdf\x95\xbd4\xf4\x12\xbc/aq<\x12\a\x01\xbd\x06\xcb\x9d\xbb\a\xd6m\xbc\x914\xe3<i\xc0\xeb\xbb\x14\xfb\xc4\xbb)\xb5\xc0\xbc\x92\x0f\x98\xbb\x19\xc1\xf0\xbc\x98\xbe7\xbc/B\x04\xbd\xb1>_\xbc\x12\a\x01=8\xa9\x10=9\xb4`<L\x88W<\xea\x92\x89<N].\xbc+\x84\xb9<6\xe8\xd6:\x8b\x8b!=\xfdc\x91<\x000\x9b\xbc\xd8\xbb\xa3\xbb\xe8\xcb\xf1\xbb\xe6\xe8\xdb<13\xd9\xbc\xf2\x13\x91\xbc3\x16o=\xec\x97\xfb\xbc*\x9bE\xbb\xc3\x12\xd6;Q\x18\n=\x9a\xa4<\xba_H1\xbc0Je<j\x98\xb1\xbb\x92\x0f\x18\xbc\xa9\xac\xa9;\xf2\x13\x11=\xf4\aU\xbdT\t_={\x94b\xbd\x18\xb31\xbd\xf6\xea\xea;\xcfN9<*\x9e4=Y\xaa?<\xdc\x84\xbe<\xbb\x83\x0f\xbd\xf2!\xd0<\x8b\x88\xb2;5\xda\x97<!Bx\xbd\xd8\xa7\x06=\x17\xb9\x8f\xbc}i\xb9<\x1f=\x06\xbds\x16\xca;\xc6\xd3\x0f=\xc4\xfb\xc9\xbc\xb3\xff\x98<\xadu\xc4;\xb0A\xce\xbcy\xb4\xbb<7\xd1J\xbbY\xbe\\=\xa7\xd4\xe3<E\xe2\x04=K\x9fc<*\x8a\x17\xbcC\x1e\xdc\xbcF\xd97;\xe13\xde<'\xcf\xbb\xbc\x1f=\x86< 7(;\xd3\x037<\xcf:\x9c\xbcj\x981\xbc\xca\x88\x8d\xbbX\xb0\x1d<\xeb\x89\xbc\xbc5\xda\x17\xbd\xceT\x97<\xac\x89\xe1<\xfc\x88\\\xbc\x97\xc4\x15=\xf3\r3\xbcmu\xe9;T\xf8\xb0\xb9\x7fLO=\xe7\xe2}\xbc*\x9bE\xbch\xc6\xc9<\x81!&<^N\x8f\xbb\xb4\xfc)=9\xa32\xbb(\xbb\x1e=\x1dh/<\x83\a\xab\xbcH\xbcM<\xfeL\x85;mu\xe9<I\xa8\xb0\xbb\xcdW\x06\xbb H\xd6\xbcs\x13[<\xd7\xe0\xee;.x}<\xed\x80o<b\x17\xaa;\xa7\xc6$\xbc\xadr\xd5\xbb\xd6\xf7z\xbc\xd3\x17T;-Y\x10==o\xbc\xbc\xbeO\x19\xbc\xf1\x16\x00\xbc\x01\x19\x0f<\x0b\x80\x9b<\xf5\xf0H=! \x9c<+\x95\xe7<\xe9\xa3\xb7:S\x0c\xce<\xfd\x82~=;x\x89\xbc)\xc3\xff<\xbb\xa2|<#\x14\xe0<\x84\xf3\r\xbb\xdc\x84\xbe<i\x9e\x8f\xbcj\x87\x03\xbdj\x98\xb1\xbb\x17\xb9\x0f\xbc*\x8d\x86;\xffT\xe6;]vI\xbc\xffWU;Lw)\xbbs\x13\xdb<\x7fO\xbe\xbc\xfbz\x1d;Y\x9c\x80<\x1eQ#<+\x87\xa8\xbb\n\xa8\xd5;\xb5\xe5\x1d;]sZ=F\xdc&\xbd?UA\xbd\xb0D\xbd<\x92\x1d\xd7\xbc\xa0M~<\xe2\x11\x82=\xbb\x94\xbd<\xdd~\xe0:\x0e`\xc2;\xa3\x0bI\xbc\xb9\x9d\n\xbdl\x8c\xf5\xbc\xefD\x18\xbd\xc7\xde\xdf;3\x16o<#\x03\xb2;,s\x0b\xbc\xa9\xbdW<\xdcs\x90<\xc7\xde_<7\xd1\xca<\xf7\xd3^=y\xa0\x9e<U\xf5\xc1<&\xf7\xf5\xbc\xb7\xcb\xa2<mu\xe9<\x9a\x90\x1f=\x17\xcd,=\xdd\\\x84<\xb1>_\xbch\xb2,<\x000\x9b\xbc\xe4\x05F\xbc\xb3\x10\xc7<\xe0<\xab\xbc\xe6\xd7\xad<\x96\xe9`\xbc\"+\xec\xbc\x8fQ\xcd\xba\xd7\xe0n<\xa6\xcc\x02\xbc\x84\xf3\x8d\xbc\x9b\x9e\xde;\x1f:\x97\xbc\x0b\x80\x1b=!#\x0b<\xa0M~\xbc\xa0.\x91<\xcee\xc5<\xf6\xea\xea\xbc\xe8\xa9\x95\xbcR&I\xb7F\xc8\t\xbb\xa5\x02|;#\x032<i\xaf\xbd\xba\xc7\xcaB<\xb5\xd1\x80;\xfcw\xae\xbc\xaa\x81\x00\xbdD\xf3\xb2\xba\x98\xbb\xc8\xbb7\xd1\xca\xbc\xb5\xe5\x1d\xbda?d\xbd\x9ej\xe8\xbc\xffC8</M\xd4\xbc\xe1\"\xb0\xbb\xe5\xda\x9c\xbb_Vp\xbc\x9b|\x02\xbc\xcf:\x9c;\x8fT\xbc<\xd8\xc9\xe2<\x04\xfc\xa4\xbcR\x12\xac<3\xf7\x81: H\xd6\xbc{\x86#;\xe16M=\xd5\xec*=Q,\xa7:\x917\xd2\xbb(\xb8/\xbb\x89\xb3\xdb:7\xe2x\xbc\x1b\x82*<\xa9\xbd\xd7;\xc4\x0c\xf8<\xa1(\xb3<\x05\xe2\xa9<\xeeG\a<\xd8\xb8\xb4\xbb\\y8\xbbf\xdd\xd5<\xd8\xa7\x86\xbb\x8a\xad};P2\x05\xbc\xd2\x0c\x04\xbc\xd8\xa7\x86<\xec\x86M\xbc.g\xcf\xbc\x15\xe7\xa7\xbb3\x16\xef\xbb5\xdd\x06=\xc1@\xee\xbc\x91#\xb5\xbc\x8cq\xa6\xbb\xa5\xe3\x8e\xbc\xd9\xa1\xa8\xbc\xba\x97\xac\xba\xa3\xfa\x1a=\n\xa8U<\xb1>_<\x000\x9b<\xa7\xc35=\x98\xbb\xc8\xbb\xf6\xdc\xab<U\xf5A\xbd\xfeZD\xbcx\xc8\xd8\xbc\x9fB.\xbd\x18\xb31\xbc;\x8c&;\xbe`\xc7;\xd11\xcf\xbc\x90Ko<V\xcd\a\xbdV\xec\xf4\xbc\xbc\x8b\xf0:\xe8\xac\x04=\xdfPH\xbdo<\x01=f\xcf\x96\xbbU\xe1$\xbd\xeb\x9d\xd9\xbc\xedl\xd2\xbc\xf7\xd6M;\xd4\xf2\b\xbc\xadr\xd5\xbb2-\xfb<F\xd97\xba\xf7\xd6\xcd\xbb\rc\xb1<\x1fN4<\x92\x1d\xd7<\xf15\xed;\x8fT<<\xd2\x1d2\xbc\xc9\xa2\b\xbd5\xdd\x06<\x8fT\xbc\xbb3\b0<\xc6\xd0 <naL<5\xee4=r\x1c\xa8\xbc\x85\xed\xaf<s\x05\x9c<\xd07-\xbc\xdcs\x10\xbc$\xfdS<\xf4\xf3\xb7<u\xd7\x83<\xd11O:o9\x12=D\xf3\xb2;\x0c\x8b\xeb\xbcT\t\xdf<\xb3\x10G\xbb\xacx\xb3\xbc\xaduD;H\xbf<;\xd1 \xa1:?RR\xbcNZ?\xbbW\xc7\xa9\xbc\xaa\x81\x80<\xbfL\xaa\xba\x0fL\xa5<\xb2\x13\xb6<#\x14\xe0<\xb9\x9d\x8a\xbb-~\xdb\xbc\x8dZ\x1a<\x97\xc1&\xbc\xd8\xb84<G\xc5\x9a\xbcg\xc98:\xa0?\xbf<]b\xac\xbbu\xe8\xb1\xbb\x12\a\x81=\x86\xf8\x7f<\xda\x9b\xca;\x1ee\xc0;\xd9\xb5\xc5;<\x97\xf6\xbc)\xa1#\xbcMc\x0c<Z\xb8~\xbbG\xc5\x9a\xbc\xa8\xc0\xc6\xbb\xe3\x0b\xa4\xbcNZ\xbf\xbb$\xef\x94:\x96\xc7\x84\xba\xb5\xe5\x9d\xbb\x8a\xad\xfd\xbb\xc5\xe7,=\x8a\x8e\x10\xbc\xddY\x15\xbcc\"z<7\xd1\xca<}i\xb9<(\xa7\x01=\xe16\xcd\xba\xefRW\xbc\xb5\xe2.<z\x9d\xaf\xbc\xf7\xd3^<}l(=\\\x8af=\x87\xd0E\xbc7\xc3\x8b<q0E=\x84\xf3\x8d\xbcR7w<\xdfP\xc8\xbc#\x03\xb2;*\x9bE\xbb8\xba\xbe\xbc\x85\xfe\xdd;\x85\xed\xaf\xbb\x91&\xa4\xbc\xc1@n<S\xfe\x8e\xbcV\xde\xb5<+\x84\xb9<\x812T\xbcd\xfa\xbf\xbc\xffC8\xbc7\xc0\x1c\xbd\xc8\xb6%;\x9c\x87R<'\xccL\xbc\xb7\xcb\"=\xadd\x96\xbcv\xe5\xc2<\xfek\xf2<\xca\xaa\xe9\xbc\x17\xca=\xbb\xf7\xc2\xb0\xbc\xdfav<\x97\xc4\x95\xbc$\x00\xc3<\x0c\x8bk;\x03\xff\x13\xbd5\xda\x97;\xe16M\xbb\x7fO\xbe\xbb/aq\xbc\xd8\xc9\xe2;(\xa7\x01=4\x02\xd2<\x82\x1e\xb7<K\x8bF\xbc\xca\xaai=\x17\xdeZ<\x94\xf5\x1c\xbc\x9a\x90\x9f<r*\xe7\xbcx\xc8\xd8\xbc\xbdt\xe4<\xd3\x03\xb7<@Lt<@;\xc6\xbcP@D=\xeei\xe3<\xccq\x01:\xada\xa7\xbc\xe0<+=0<&\xbda?\xe4<\x96\xc7\x84\xbb\x98\xaa\x1a=\xb8\xc5D\xbc>i\xde<U\xe1\xa4\xbc\xeda\x02\xbc&\xe6G<\xa6\xdd\xb0\xbc)\xa1\xa3\xbb\x1dv\xee;k\x84\x14\xbc\xbdf\xa5<r\x1c\xa8\xbcH\xbf<<\xb4\xe8\x0c\xbd\rf \xbcS\x0c\xce\xbcp3\xb4<\xc3\x12V<J\xa2\xd2<X\xc4\xba<\t\xabD<\t\xbf\xe1\xbc\b\xc5?<\x10W\xf5\xbclm\x88<(\xa7\x01<M`\x1d\xbd\a\xd6\xed<\t\xbfa<\x14\xed\x85\xbc\x92 \xc6<\xf5\xe2\x89;F\xd9\xb7;Lw);\xfdc\x11\xbc-j\xbe;\xb8\xc5\xc4\xbcq\x1f\x17=\xc1,\xd1\xbb\xb1-1=\xc7\xde_\xbc\xaa\xb7y\xbc\x96\xe9`<\x86\xd3\xb4\xbbA5h<\xdc\x84><t\r}\xbc\x0eO\x14\xbd\xa0.\x11\xbc\x9a\x90\x1f\xbb\x8b\x96\xf1\xba\xfb\x8bK=\xbb\xa2|\xbc\xf2$?<K\x8bF\xb9\xe6\xe8\xdb;r\x19\xb9:\xaa\x95\x9d\xbb\xbeR\b\xbd\xba\xa8Z\xbc\x18\xb31<\x88\xa8\x8b<\xfek\xf2\xbc>i\xde\xbb\xf0L\xf9\xbaV\xec\xf4<\xfdc\x11<\xca\x88\r\xbc\x92\x0f\x98\xbb\xfa\xa5F\xbc6\xe8V\xbc>[\x9f<|}V8%\xd8\x88\xbc\x92\x12\x87;7\xe2\xf8<p3\xb4<\x0fL\xa5\xbcna\xcc\xbb\xba\xa8Z<\xfb\x8e:\xbb\"+\xec<\x83\x15j\xba\x8eW+\xbc\rc1<U\xe1\xa4\xbc\xe3\x0b$\xbc\xaeM\n<~w\xf8;\x8a\x8e\x10;mui\xbb\xf2$?<A5\xe8<B\x10\x9d<\xe7\xe2}:\xa5\xf1M<\xb7\xd6r;\x1fK\xc5<V\xde\xb5<\xc1@\xee\xbb\xefR\xd7<\xc3\x04\x97<\xcf=\x0b=! \x9c\xbbB\x10\x1d=\xd5\xe9;\xbc\a\xd6\xed<\x8eh\xd9\xbc\x19\xc1p\xbc\b\xc2P\xbcpX\xff9\x1c\x7f\xbb\xbb\xa0<P<\x93\t\xba\xbc\xcf=\x8b\xbcqA\xf3<5\xff\xe2:X\xc1K\xbc-~\xdb<G\xd3\xd9\xbc\xa8\xb2\a=\xe1\"\xb0;\x97\xc1\xa6\xbc{\x97\xd1\xbb\xe6\xd7-<(\xb8/\xbb\x95\x00m;z\xab\xee<=^\x8e\xbb\xc0Wz;\xeda\x82\xbd4\xf1#;\xb5\xd1\x80<\x028\xfc<\x9ej\xe8\xbc\xb8\xb4\x96;\xa8\xb2\a\xbdU\xf5A=$\xf2\x03\xbd\xe5\xffg<\x8c\x85C<\x98\xbb\xc8\xbc\x003\x8a\xbco<\x01\xb6\xf3\x1e\xe1\xbcc\"z:\xb5\xe2\xae90<&<\x0b\x83\x8a<\x81$\x95<Z\x96\xa2<a\x1d\x88\xbbH\xae\x8e\xbb\x88\xbc\xa8<\x95\xec\xcf\xba\xdb\x95\xec\xbb\x04\xfc$;\x92\x1d\xd7<\x16\xe1I<\xe8\xa9\x15\xbc\xf2!P<\xf9\xab$<\xa2\x14\x16\xbdh\xc6\xc9<4\xf4\x92;\x15\xf5f<\x1b\x96\xc7\xbc\x06\xce\x8c\xbc\xbf8\x8d\xbc\xc9\x9f\x99<\xb00\xa0<\x90)\x93\xbb,p\x9c;\xf4\xf6\xa6\xbb 7\xa8\xbc3\b\xb0\xbc;x\t=I\xa80;'\xe0i<\x18\xd8\xfc;\xdeV\xa6\xbc\x13\x12Q\xbbg\xcc\xa7;\xf2\x13\x91<\xb4\xfc\xa9\xbc(\xc9\xdd\xba[\xa1\xf2;\x12\a\x01\xbd\x88\xb9\xb99mui\xbd\x9b\x8aA\xbc%\xe9\xb6;\xc9\xb0G<\xa2\"\xd5\xbc\t\x9d\x85\xbcc\x00\x9e\xbc\xc7\xb9\x14:p6#=\xbb\x94\xbd<\x84\x04<\xbc\x8a\x8e\x90<\x9b\x8d0<\xc1,Q\xbc\x0b\x80\x1b\xbc\xe7\xc3\x90\xbc,s\x8b\xbcT\xfb\x9f\xbc\xddm\xb2\xbb\x8d]\x89<oJ\xc0<\x90K\xef\xbc\xe0J\xea<\xb6\xce\x11;\xf0>:\xba\xc0!\x81:\xael\xf7\xbc\x03\x02\x03<_H\xb1<\x003\x8a\xbci\xaf\xbd\xbc\xc8\xb6\xa5\xbc\x1f_\xe2<Z\xb8~<\xd3\x17\xd4\xbb\x1dh\xaf<\x80I\xe0\xbb\xe5\xee\xb9<V\xca\x18=\xcb\x93\xdd\xbb&\xf7\xf5\xbb\xa1\x17\x85<\xa0.\x11;K\x8e5<\x9a\x90\x1f=\xf0-\x0c\xbc\xda\x8a\x9c;\x90:A<\x9a\xa4\xbc<\\y\xb8\xbc\x95\xef>=b\x17*\xbc\xb1>_<\x91#\xb59097=e\xf7P=Z\x933\xbc8\xcbl\xbc\xd11O\xbc\x1dh/\xbc\xe1\"0\xbb\xc4\xfb\xc9\xbc(\xc9\xdd;\x96\xd8\xb2<*\x9e4\xbb\xd3\x14e<OC3\xbc\xe3\x0b\xa4\xbbt\r\xfd;w\xce6=\xd2+q\xbc\x0eR\x83\xbco<\x01\xbbH\xbc\xcd\xb9'\xcc\xcc<\xf6\xc8\x8e\xbb\xbfL\xaa\xbc-~\xdb\xbb\xceT\x17=\xca\x9c\xaa\xbb\xc8\xb3\xb6\xbcK\x8bF\xbc\xf5\x01\xf7\xbb\x95\xef\xbe<\x1f=\x06<\x94\x17y\xbb'\xe0\xe9\xbci\xac\xce<\xf7\xd3^<\xddm28\x80'\x84<\x98\xad\x89;C\r.\xbd\xb6\xdf?\xbdY\x99\x11\xbd\xc6\xd0 \xbb\xab~\x91\xbb}l(\xbc\xa6\xcc\x02='\xcf\xbb8\x8dk\xc8<\xb9\xab\xc9<\xd1 \xa1<\x06\xce\x0c\xbd\xd2\t\x95<\xa0M\xfe\xbb2\x1f\xbc<" "content" "### Summary:\nThe video showcases the construction of a real-time application for tracking a stock watchlist, utilizing Redis Stack as a multi-model database. Redis Stack enhances Redis by supporting various data formats, including JSON documents, time series data, and probabilistic data structures, which simplifies managing multiple databases. The application features a stock watchlist, real-time trading information, trending stocks based on trade frequency, and latest news per selected stock, all updated in real-time. The back end comprises microservices for API, streaming, and UI, leveraging Redis capabilities for data storage, Pub/Sub for real-time communication, and Redis search for efficient data retrieval. The video also illustrates the use of Redis Insight for managing Redis data and highlights the code infrastructure supporting the application's functionality.\n\n### Example Questions and Answers:\n\n1. **What is the primary database and message broker used in the sample stock watchlist application?**\n   - Redis Stack is used as the primary database and message broker in the application.\n\n2. **How does Redis Stack simplify building real-time applications?**\n   - Redis Stack turns Redis into a multi-model database, supporting various data formats and capabilities in a single database, reducing the complexity and time involved in using multiple database technologies.\n\n3. **What types of data does the application store using Redis Stack?**\n   - The application stores basic data types, JSON documents, time series data, probabilistic data structures, and uses Pub/Sub for real-time communication between microservices.\n\n4. **How does the application handle real-time updates of stock information?**\n   - It uses WebSockets to receive price updates in real-time and Pub/Sub messaging for communicating information between microservices.\n\n5. **In what formats are stock-related data stored and managed in Redis Stack?**\n   - Stock-related data are stored in sets for the watchlist, JSON documents for stock details, time series for price data, and the Top K filter for tracking trending stocks.\n\n6. **Which external API is utilized for real-time trading data in the application?**\n   - The Alpaca API is used for fetching real-time trading data, including price updates and news about stocks.\n\n7. **What technologies are used for the application's front end?**\n   - The front end is developed using Tailwind CSS, Chart.js, and Next.js.\n\n8. **How does the API service facilitate communication between the front end and Redis Stack?**\n   - The API service acts as an intermediary, handling requests from the front end to add or remove stocks from the watchlist, querying data for display, and subscribing to Pub/Sub messages for real-time updates.\n\n9. **What role does the streaming service play in the application architecture?**\n   - The streaming service manages real-time data flow from the Alpaca API, updates Redis with new trades, and publishes messages regarding changes in trending stocks and trade information.\n\n10. **How are trending stocks determined and updated in the application?**\n    - Trending stocks are tracked using the Top K filter in Redis Stack, which creates a leaderboard based on trading frequency. This leaderboard is updated in real time as new trades are processed." "metadata" "{\"id\":\"LaiQFZ5bXaM\",\"link\":\"https://www.youtube.com/watch?v=LaiQFZ5bXaM\",\"title\":\"Redis Stack Crash Course: How to Build Apps with Superpowers\",\"description\":\"Redis Stack turns Redis into a multi\\-model database, enabling you to build rich real\\-time applications with Redis as a primary database. Explore Redis Stack \\- http://redis.info/3Lq9gbF\\n\\nRedis Stack consolidates the capabilities of the leading Redis modules into a single product, making it easy for developers to build modern, real\\-time applications with the speed and stability of Redis.\\n\\nRedis Stack is free and unifies the leading Redis modules in a single product. This makes it easy to start building with our Redis\\-based search, document, graph, and time series capabilities.\\n\\nRedis Stack is a suite of three components:\\n\\n\\- Redis Stack Server combines open source Redis with RediSearch, RedisJSON, RedisGraph, RedisTimeSeries and RedisBloom\\n\\n\\- RedisInsight is a powerful tool for visualizing and optimizing Redis data, making real\\-time application development easier and more fun than ever before\\n\\n\\- The Redis Stack Client SDK includes the leading official Redis clients in Java, JavaScript, and Python.  These clients also include our new suite of object mapping libraries which offer developer\\-friendly abstractions that get you productive with just a few lines of code. Known as Redis OM for .NET, Node.js, Java, and Python, these libraries also make it easier than ever to integrate with major application frameworks such as Spring, ASP.NET Core, FastAPI, and Express.\\n\\nSign up for Redis Cloud for free using code TIGER200: https://redis.info/3pyzVea\\n\\nGet the Source Code for This Video: https://redis.info/36PTesO\\n\\nFrom the Blog: https://redis.com/blog/introducing\\-redis\\-stack/\\n\\nLearn more about Redis Stack: http://redis.info/3Lq9gbF\\n\\n#RedisStack #Redis #RedisEnterprise #RealTimeData\",\"thumbnail\":\"https://i.ytimg.com/vi/LaiQFZ5bXaM/maxresdefault.jpg\"}"
"HSET" "openai-video:4" "content_vector" "'\xab\x92\xbc\x8cq\x0e:\x03\x1d+=\xbd? \xbdWx\xd6<4\xae\x14<+\xa1O\xbc\xed\x92\x13=0Zd\xbb\xaam\xcf<rB\x80<\x97\x87\xe0\xbcX\xb5~<`\xc2C\xbd\x1dL9=\x7f\xd3p\xbc\xcd\xa9\"\xbd1o\xd0<4\xeb<<6\x15\x95=\xa5\x9f\xce<Z\xdfV\xbc\xea+\x93\xbb\x83\x13\x03=}D4\xbc?s \xbd\x13\xed_\xbc\xa3uv=\"B\xf6;\x85y5\xbdf\xe2\xd8<.\xcb'\xbd\xd9\xe8~\xbdI#@<\xa7\xb5\x88<\xad\xc01<\xb2\xdf\xf8;.\bP\xbd\xfe\x9f\xf0\xbbi5;<G\x94\x03<Wd\xb8\xbc\x91\xa4\xf3:\xb5\x1e\xbd;\x9e\xa7u\xbcRY\x0f<\xbf\xe2\xfa\xbc\x13\xb0\xb7\xbc^\x98\xeb\xbc\x8c\x85,=\xc0\xe3H<K\xb2|<3\x85\x8a\xbd\x99\xd9\xf4\xbcB\xc6\x02=\x80\xab\xb4<\x93\x91#\xbd\x96!.=\x10 \xad;<]\xe6\xbc\xc3\xf9\x82=/\x1d\xbc\xbc&\xd3\xce\xba\b<\xf2<\x7f\xd3\xf0\xba\xf4\x9e\x8a<b\xec\x9b\xbc\x1a\ru\xbc\x04[\xa1\xbd\x99t\x90\xbb\xab\x82\xbb<][C\xba\xfe\x9fp<\xc0\xe3\xc8\xbb\xfb\xd3\x0b=\xa2\x0f\xc4;`\xae%\xbc):\xcf<\xaam\xcf\xbbEV\r\xbd1G\x14\xbc\xb6GG\xbb\xb9\x86\x8b\xbc\xad\x11\xf8<\x82\x12\xb5\xbb`\xff\xeb\xbc#Wb\xbd\x10 -\xbd\x95\xe4\x85<\x13\xed_;pi\xee\xbc\xed\x92\x13=\x0e\x0b\xc1\xbc[\xe0$<\xdb\x12W<8\xa4\xd1\xbc\xeci\x89;j!\x9d<\xfew\xb4<\x81\xfdH<\x8e\xec\xac<UN~\xbd\x93}\x85\xbc5\xc3\x00< \xdc\xc3;\xda\xfdj\xbc\xa1\xe6\xb9<\xd2c\x85;:\xe2\xc7\xbcf\xe2X<\xfe:\x8c\xbd\n\x15\x84\xbc\x1f\xdb\xf5\xbc%\x81:\xbb\xcb\xa8T\xbc\xef\r\xb2<iI\xd9\xbcs\xa82\xbd\x8bp@</\t\x9e\xbc\xfd%\xa0\xbc\x16@\xc2\xbcD-\x03\xbb0Z\xe4\xbci5\xbb\xbc\xebT\x9d\xbd{\x1a\\=^\x84M\xbdN.i\xbc\xcf\xe7\x98\xbc0Z\xe4<8\xa4\xd1<c\x15&<\a\xae\x03\xbc#W\xe2<\xb3\xb7<<\xcd\x95\x04\xbdL\xb3\xca\xbbD-\x03\xbd\xb6\xf6\x00\xbc\xebh;<\xf1\x9cn\xbd\xf3\xc6F<\x0c|\x04=\xdfz%\xbcn\x17Z\xbd[\x1d\xcd\xbc\xd9\x97\xb8<`\xae\xa5\xbb:\xce\xa9<\x96r\xf4<\x05G\x03=\x12J\x05\xbd\x84P\xab\xbc\xb5Fy\xbb\xd2w#\xbd\x99\xd9t=G\x94\x83:\x15\xda\x8f\xbc.Ex\xbd\xdc\xff\x06;\xda\xe9\xcc<\xf4\xc7\x94\xbc\xa0\xd1\xcd\xba\xc2!?\xbdJ8\xac\xbc\xf1\x9c\xee;G\xd1\xab\xbcH\x0e\xd4\xbc\xee5\xee\xbcf\xe2X\xbc\xd1vU\xbd\xd3\x8c\x8f<?\xc4f<\xa8C\xf7<i\x0c1<\x15?\xf4\xbc\x9c\x189\xbcw\x9eo=\xf9\x95\x95\xbc\"Bv\xbd\xbd\x16\x16\xbd\xa6w\x92\xbd\xe5q\xb0<r\x7f\xa8;\xbf\xe2z9\xddy\xd7\xbck6\t:\x98K\x06\xbd\xf1\x9c\xee88S\x0b\xbd\xbc*\xb4=\x14\xb1\x05\xbdB\x17I=9|\x15<\x8fR\xdf;\xbf\xa5R=\x13\x9c\x99<\xf9l\x0b\xbd\xcd\xe6J\xbch4\xed<\x85y5=a\xeb\xcd\xbbwM\xa9:\x13\xed\xdf<\xd8n\xae<\x83'\xa1;g\xba\x9c<\x1f\xdbu\xbd\x9fk\x1b\xbd\xb7pQ\xbc\xd4\x1a\xfe\xbc<]f<A+g\xbc\xc0\xe3H\xbd\xd3\xdd\xd5<\xac\xabE\xbd\x9f\xbc\xe1\xbc\x90\x16\x85\xbc\xa9X\xe3<\x83;?\xbd\x9d\x19\x87=>J\x16\xbb\xee\xd0\x89\xbc\x1c#/<,y\x13\xbaR\x82\x99<[\xf4B\xbc\x15?\xf4<Xy\xa4<\x8d\xeb\xde;h4\xed;\xc7\xb2\x97\xbc\xd1b7\xbd\x86z\x03=\xac\x97'\xbd\xae\xd5\x9d\xbc\xbc>R\xbc\xe3\x1f\x9c<Z\xb7\x1a=>\xaf\xfa\xbbxb\x95<\x9f\xa8\xc3\xbc\xba\xd7\xd1<\x1b\x0eC=\xad\xd4O\xbcVO\xcc\xbc\x00\xa2\x8c\xbd\xf8\x94G=\x9b\xb2\x06=1G\x94=Z\x1c\xff\xbc\x03F5<z\xa0\x0b\xbdD\x92g;&\xd3N\xbd\x81\xc0\xa0<\x0e\xce\x18\xbc\xe7\x00m;9\x90\xb3<\x95\xf8#;\x9d\x19\x87\xbd\xee\xf8\xc5\xbaQm\xad\xbc\xb6\n\x9f\xbcc\x15\xa6\xbbX\x8dB\xbc\xcaB\"\xbd\xce\x0fU;\xc4sS\xbd>\xaf\xfa;\x91gK<\xe4\x99\xec<\xc2!\xbf\xbcwM\xa9\xbc|/\xc8;\xaamO=:\x91\x81:\xad\x11x;]G%<Z\xdf\xd6;\x04\x83]\xbdV&B\xbc\x0b\xa3r<:\xf6\xe5\xbb\xdfz%=iIY<\x85\xb6\xdd\xba\x89or=\xb2Q\x8a\xbd\xc8\x18\xca\xbb\nf\xca\xbc\xeb\x91\xc5\xbc\xb8q\x9f\xbcrB\x80\xbcM\xdc\xd4;9\xe1\xf9;\xf2\xb1Z=Vc\xea;\xf2\xb1Z;Wd8<Ju\xd4\xbc):\xcf<\xfc\xfc\x95<\xcfL}<xv3;\x17A\x90<\x81\xac\x02\xbd\x0f4\xcb<Z\x1c\x7f;]\x83\x7f\xba\x1a\xa8\x10\xbbi\x0c1\xbc\xc1\xcf*\xbd\x82:q<\x97\x87\xe0\xbb\xd2w#=\x965\xcc<\xe8\x01\xbb<E\x93\xb5\xbc\xa8\xf2\xb0:VOL\xbd\xcd\xfah=\xa0\xbd/;\x88\xcc\x97<\xbe+\x82\xbd\x0f4K\xbc\xd6\x1c\x9a\xbc&\xd3\xce;4\x13y\xbde|\xa6:\xd9\x978\xbdyw\x01=\x91S-=\xb6GG\xbc\xce\xfb6\xbd1\xac\xf8\xba\xe1\xe1%;7>\x1f\xbd\xac\xabE=\xd3\xc97<\xae&\xe4\xbc\xdc\xff\x86\xbd\x00\aq:\xaf\xea\t\xbd\x92h\x99=!\x05\xce:\xd6\xf3\x0f\xbb\x8e=s\xbc\xf8W\x1f=,\xde\xf7\xbc\xac\x97'\xbcpin\xbc\x1b\"a\xbd\xbd{\xfa<DA\xa1\xbbC,\xb5\xbc\b<\xf2\xbc\x86\xcbI\xbd\x04\x83\xdd\xbc@\xc54\xbd\xbc>R<\x19\xd0L\xbc\xa0\xbd/\xbcM\xb4\x18=F\xbc?\xbc\x90\x16\x05\xbd\xd8\xab\xd6\xbb\x0b>\x0e\xbd \xf0a<\xfeN\xaa<\xd8\xab\xd6;\xc5t!\xbc\x1a\r\xf5\xbcl\xb0Y\xbdUN\xfe<\x9b\xb2\x06=qV\x1e<\x93}\x85<\xbf\x914=\xc7\xb2\x17<\xf7\x7f\xdb<\xd2c\x85<\xa2\xfb%\xbd\xe8\xc4\x92=m\x02n<\x9cUa\xbb,\xb6;<\b\xffI\xbc\xad\x11\xf8<\x1c\xfa$\xbb\xec\xce\xed\xbc\x87\xe05<`\x9a\a=\x1dt\xf5<6=\xd1<8g)\xbdn\xc6\x13<\x06\x99\x97=$\x1b\x88;\xb1e\xa8;$l\xce\xbc\xc0\x92\x82\xbd\x92|\xb7\xbb\x90>A\xbc\xb8\xc2\xe5<L\x9f\xac<=5\xaa;\xb9\xae\xc7\xbcT\x11V\xbdY\xca\xea;H\xe6\x17\xbd\x8d\xeb\xde<\xbb)f\xbcQ0\x85\xbc\xb4\xb8\x8a\xbc\xd3\xddU\xbc\r\n\xf3<p-\x14<\xcd\xe6\xca\xbb\x97\x87`<\xb4\tQ\xbd]\x1e\x1b\xbdH\xfa\xb5\xbc\x8aG6\xbd\x04[\xa1=\x9d-%=r\xd0\xee\xbc\xb5\xe1\x94\xbc\x85y\xb5\xbc#W\xe2:\xbeT\x0c:\xf5\x18\xdb<\xc2I\xfb;\xfcM\\:9\xe1\xf9<d{\xd8<6z\xf9;-\xf3\xe3<\xad\xd4\xcf\xbc\xe44\b=<\x0c =\x9d\x19\a\xbd\x91g\xcb<j!\x1d\xbd.\bP\xbcKM\x18\xbd\xd8Z\x10\xbd5\xc3\x00=\xd2\xc8\xe9<A\xee><\xc3\xf9\x82<Vc\xea\xbc< \xbe<\\F\xd7\xbc%\x81:\xbdO\xf2\x8e;\xfb\xe7);e\xcd\xec<\x01\xdf4\xbd\x1ea\xa5\xbd#CD=\x9a\xc6\xa4\xbc`\xffk=\xe0\x8f\x11=\xef\xf9\x93\xbc\xd3\xdd\xd5<y\x8b\x9f<F\x7f\x17=u\x0f\xb3\xbb\x87\xa3\x8d\xbcB\xef\x8c=L\xc7\xe8<\x1f\xdbu\xbb&\x82\b\xbd\x02\xf4\xa0\xbcLb\x04=\xc9~\xfc<\xd2w#=\x11r\xc1\xbc\xc4\"\x8d\xbc\x97s\xc2\xbc\xfd%\xa0\xbc\x03F5<|\xf2\x1f<yw\x81:\xee5n\xbaJa6:\xd09-\xbc)\x12\x13<\xe8\x15Y\xbd\"B\xf6:k6\t;\xab\x82;\xbc\xbc>\xd2\xbb\xd09-;\x1a\r\xf5\xbc\xa7\xb5\x88\xbb#CD<\xa8C\xf7<c\x01\x88=7*\x81\xbc\xef\r\xb2;\x9cU\xe1=\x99\xb18;3\x85\x8a<\xde\xb6\xff<\x14\xc5\xa3;\x97\x87`;\x13\xb07<\xec\xa61\xbce\xcdl<\"\x1a\xba\xbc\xf6\x05\x0b=\xf8C\x01<.\xf4\xb1<`\xff\xeb\xbc\x91S\xad;[\xcc\x86\xbb\x9d\x19\a\xbd^\x98k;\xda\xd5\xae;\xd60\xb8\xbbw\x10\x01=W'\x90<\xd6\x1c\x9a<\xb9]\x01\xbd\xf3\x89\x1e\xbd\x8d\xeb^\xbc\xb5Fy\xbc\x8e=\xf3\xba\xf7.\x95\xbc!\xf1\xaf\xbc\x8d\xd7@=;\x0b\xd2\xbc\xd2w\xa3\xbc\x01\xdf4\xbc\xd1\xb3\xfd\xbb\xfa\xbe\x1f\xbd\xffc\x16\xba\x9d\x19\x87<\xc9\xf0\x8d<V&B\xbc\xea?1\xbb\xd8\xabV\xbb\xe8\xed\x9c<\x1eu\xc3\xbb\xbc>\xd2\xbb\x18j\x9a\xbc\xf4\xc7\x94\xbcu\xe6(=2p\x1e\xbdLb\x84=\x83\x13\x83\xbc\x93}\x05=\x87\xa3\r<\x9cU\xe1;\x0e\x0b\xc1\xbc\x0f\xf7\"=\xc4s\xd3\xbc\x81\xe9*\xbb\xbb)f\xbc\x86z\x83\xbc\xd9\xe8~<n\xc6\x93<\xaam\xcf\xbc\xeb\x91\xc5<\x87\b\xf2\xbc\x8e\x00K\xbc\xf4\x9e\n\xbc\xe7\x9b\b\xbc\x93\x91#;\x1b\x0eC\xbc\x95\x0c\xc2:][\xc3<\xf4\xc7\x14<\x0b\xa3\xf2\xbcA+\xe7\xbc\x03F5<\xb63\xa9<U\xfd\xb7\xbc\xba\x14\xfa\xbcL\xc7h<#/&<)&1\xbdG\xf9\xe7;0Z\xe4;F\xa8\xa18=!\x0c=\xb3\xa3\x1e\xbc\xbb\xc4\x01=c\x01\b<\x9b\x03\xcd\xbc\x05G\x83;9|\x15<:\xa5\x1f=RY\x0f<\x8f\x15\xb7\xbbd*\x92\xbc\xba\xd7Q=\xc4_\xb5\xbc\xb7\xad\xf997>\x9f\xbca\xd7/\xbd\x1d\x0f\x11\xbc\x16T\xe0<\xa3uv\xbc\xaf;P\xbb\xde\x8eC:-\xa2\x1d\xbdT\xc0\x0f\xbd\xd4\xb5\x99\xbc\xad\xc01<)\xe9\b\xbd\xb0\x13\x94\xbc\x9a\x9d\x1a=\x06p\x8d\xbcQD#\xbc\xde\xb6\x7f;\xe4H\xa6\xbc\xeb\x91\xc5<\xf17\x8a\xbc\x9b\xdb\x10\xbc\x9eV/\xbd\xc0\x92\x02=/\x1d<=8\xa4Q\xbd\xb0xx\xbd`\xc2C\xbd~\x81\xdc\xbb\xb7\x1f\x8b<[\xcc\x06\xbd\x90*#\xbc\x15?\xf4\xbcyw\x01;\xf17\n=\xb9]\x81<Z\xdfV=\xc1\x0c\xd3<3\xd6P<\xf2\xb1Z=s\xa82\xbb5\xc3\x80;\x88\t\xc0\xbb02(=2\xc1d<\xf5\xf0\x1e<\xe22\xec<\xe3GX\xbb\xae&d\xbcW'\x90\xbcM\xdc\xd4\xbc:\xce\xa9=Xy\xa4\xbb\b<\xf2<\xe6\xaf&\xbc\"\x1a\xba;\xa0\xa9\x11\xbc{\x06><\x0f\xf7\"\xbb\x01\xdf\xb4\xbc\x97J8\xbc\x15?t\xbc\xe8\xed\x9c\xbb\x8e=s\xbc\xbb\xec=<2\xc1d<\x87\b\xf2;v8\xbd<1[\xb2;\x9b\xdb\x90\xbd\x82\x12\xb5\xbcF\xa8!=\xc0\x92\x82<\x8a\x84\xde;):\xcf\xbc\xc6\xda\xd3<\xad\x11\xf8\xbceh\x88<\xfd9>=:\xe2\xc7;;\x0bR<t\xd1\xbc\xbc\xc9-6\xbc\xea|Y;F\xe4{\xbce|&<s\xe5\xda\xbc-\xf3c<\xdd(\x11\xbc5\x14G\xbc\xab\x82;<\xc0\xf7\xe6\xbbg\xce:<h\xcf\b\xbc\xb63\xa9<\xa28\xce<[\xe0\xa4<R\xe7\xfd\xbb\r\xcd\xca\xbd%\xbeb\xbcK\xb2\xfc;\xe5\xae\xd8\xbcwM)\xbd\xf4\x9e\x8a\xbcO\xf2\x8e<;Hz\xbc8S\x8b<#CD<\x88\x1d\xde\xbcx\xb3[\xbc]G%\xbc\b\xffI\xbcr\x93\xc6<<]f\xbd\xe8\x15Y\xbco\xef\x1d<\x83'!\xbcO\x1a\xcb\xbc\x1b\xe5\xb8\xbb\xbeh*\xbd`\xae%=\xef\r\xb2\xbc\x1ea\xa5\xbbI`h<x\xb3\xdb9Z\xcb\xb8\xbc\x10 \xad\xbb\xb3\xf4d<\xd1b7;r\xd0\xee:\xc8\x04,<u\xd2\n=(\xd4\x1c<;\xba\x8b<\xaf\xea\t<\xf3\xc6F\xbd\x96\r\x10;\xa0\x80\x87<\xf6\x19\xa9\xbc\x0c\x90\xa2\xbcj^E<Y\xa2\xae\xbc\xd7\x96j<\xbc\x01\xaa<\x88\t\xc0\xbc\xbf\x91\xb4<$D\x12=\xd3\xc9\xb7\xba\x17\xa6\xf4\xbc\xeb\x91E<b\xec\x1b<VOL\xbb\xdb\xc1\x90\xbb\x1fv\x11<\r\xcdJ\xbc\x89\x1e,<\x8f\xd8\x8e\xbb\xf3\xb2\xa8;UN\xfe</\t\x9e\xbc\xb6[e<\x19\x7f\x06\xbd|\xde\x81<\xe4\\D<\x1b\"a<\x8d\xd7@\xba.\xf4\xb1\xba\x1b\xd1\x9a\xbbpin\xbaO\x06\xad\xbc\xba\xd7\xd1\xbc\x95\x0cB\xbb\xfa\xbe\x1f\xbbEV\r:\xe8\x15\xd9;\x85y\xb5<3\x85\x8a;\xaa\x1c\t\xbbl\xb0\xd99\xd5\xca\x05=\xa4\x8a\xe2\xbc9\xb9=:\t\x14\xb6\xbcV&\xc2<jJ'\xbc=rR\xbc\x9b\xb2\x86\xbb\xb5\xf52\xbd\xf3\x03\xef\xbc\xdb\xc1\x10\xbd\x92|7\xbc\x9e\xa7u<\x042\x97\xbc\x0f4K;\xb5\xe1\x94<\xee5\xee\xbb\xa0\x0ev\xbd\xaa\x1c\t:\xe4\x99\xec<\x1d\x0f\x91\xbb&\x82\b;\xd9\xc0\xc2\xbb\xee\xf8\xc5;\x83\x13\x03\xbb\x89\x1e,;\xaa0'\xbd_\\\x91\xbc\x19\x7f\x06\xbd\xcbk\xac\xbcI`\xe8\xbc7*\x01:\xcc\x80\x18=pi\xee<\\FW<\xcf$A<3\xd6\xd0<`\xae\xa5\xbbXP\x9a<\xa7\xdd\xc4;n\x17\xda<\xf17\n<z\x05p\xbcIL\xca;\xc4_\xb5<5\xec\n<\xb5\x1e=\xbc'\xab\x12\xbd\xa9\a\x1d=V\xfe\x05\xbd\x18~8;\x19\xd0\xcc;\xa2\xfb%=R\x96\xb7\xbb}0\x16;\xd9\x83\x9a<\xfcM\xdc\xbcVc\xea\xbb\x0f\xf7\xa2\xbcB\x17I=\x18~8\xbd\xaf\xea\x89=\xc3J\xc9\xbc\x8aG\xb6\xbc\xd8Z\x90<Y\x8e\x90\xba\xcfL}<\x8b\\\"<\x1a\ru=\x0f\xf7\xa2:\x84d\xc9;R\xaaU<\x0f4\xcb<b\xec\x1b\xbd\xa49\x1c<\xef\xf9\x13\xbc\xddP\xcd<\xac\x97\xa7\xbc\x86\xcb\xc9:\x9a\x9d\x1a=\xfa\xd2\xbd\xbc\x86\x8e!\xbc\xabn\x1d<\xc0\xe3H\xbb\x1fv\x11=$\x1b\x88<\x8a3\x98<\xe33:<'\xab\x12<\xaf\xea\t<[1\xeb\xbc\xe7\xd8\xb0\xbam\x9d\x89<(\xfd&=G\xbd\r\xbd1\xac\xf8<\xf1\x9cn\xbb\x83'!\xbc\x82\xfe\x96\xbc^p\xaf\xbc[1k;\x96!.=\xda\xd5.\xbc\x892J\xbd\x83O]<\x8d\xeb\xde<\x92\xb9\xdf<L\xc7\xe8<K\x8a@<|\xde\x01<\xdb\x12\xd7\xbc6=\xd1<\x9b\xdb\x10<\xe5]\x12\xbd>^\xb4\xbb\xf4\xc7\x14;\x1ea\xa5<I#\xc0<\xe3G\xd8\xba%\x81:<\x04\x83\xdd;\x8bp\xc0\xbc\x06\xad\xb5;K\xb2\xfc\xbbi\x0c1=\xc0\xba\xbe<h4\xed;\x8c\xd6r\xbc\xd5/j<$\x1b\b<\x9c\x04\x1b\xbc\xebh\xbb:rk\n=\xfdb\xc8<\xcb\xa8T\xbc\xd6\x1c\x9a\xbc\x98\x9cL\xbb\xc36\xab<\x19\x93$\xbdU\xe9\x19\xbc\x1c\xe6\x86:\xdd(\x91\xbbm\xc5\xc5;.\bP=\xaf\x12F\xbc\x0bg\x189\x06\x99\x17<\xfd\x11\x02<\xcf$A=\xc5t!\xbc\xc7\xef?=\x89\n\x0e\xbb_\\\x11<\x01\xcb\x96\xbb\xb2z\x14<\xdd<\xaf\xbc\xcbW\x8e\xbb\xcc\xe5\xfc\xbcM\xdc\xd4<\x91g\xcb\xbc\xc9\xf0\x8d;$D\x12\xbd\x02\xf4\xa0\xbaz\x05p<\x92h\x99;\xd5\xca\x85\xbb\xe7\x00\xed<\x11rA\xbc`\xc2C\xbcY\xa2\xae<\x0c|\x84=\x98K\x86\xbb\x89\n\x8e=\x9a\x9d\x1a\xbdm\x02\xee\xbc\x16,\xa4<\xfb\xaa\x81\xbc\x83O]<\x12\x9b\xcb<\xf9\x95\x15=\xc5\xc5g<\xbe\x90\xe6<[\x1d\xcd\xbc#\x06\x9c\xbc\x05\xd5\xf19\xe8\x15\xd9\xbc\xcd\xbd@\xbc\xcd\xfa\xe8<\xbdS\xbe;5\x00\xa9\xbc\xf3\x03o=\xad\x83\t=\xe1\xf5\xc3<\xf5\xf0\x9e\xba;Hz=\x0c|\x04<\xb3\x8f\x80\xbc\xa0\xbd/\xbd\xb2Q\n=(\xfd&<a\xc3\x11=\x00y\x02=6=\xd1\xbc\xfcM\xdc\xbc\xfe:\x8c\xbc\xde\xb6\xff\xbcJu\xd4\xbb\xc2\xf8\xb4;\xe6\x86\x1c\xbd2\x84\xbc<\xb6\xf6\x80<\xe8\xed\x9c\xbc\xb6[e;\\2\xb9<?s\xa0\xbc\xa4\x8a\xe2\xbb\x9a\xee`\xbc\x0c\xb8\xde\xbct\xbd\x1e=\xde\xb6\xff:\xb3\x8f\x00\xbd+d\xa7<\xc1\x0c\xd3<\xe8\xc4\x92\xbc\x1dt\xf5\xbb_\xea\x7f<\xbe|H<\xd6\x1c\x9a<:\xf6\xe5:K\xb2|<\xd7E$<D\x92\xe7\xbb\xcf\xe7\x18\xbcKM\x18\xbd\xe9g\xed\xbc\xf3\x03\xef\xbc\xd0%\x8f\xbc\x11\x86_\xbd\xc8,h\xbd\xd0\xfc\x04\xbd\xda\xac\xa4<*O;\xbc\x19\xa7B<\\\t/\xbb\xbb\xd8\x1f\xbc\xa8\xde\x92\xbc\x90\x16\x05\xbb\xd7E$<&\xd3\xce\xbc?\x9c\xaa\xbc2\xc1d\xbce|\xa6<]\x83\xff;D~I:E\xa7S=\x92\xb9_==!\x0c\xbc\xb2\x8e\xb2\xb9\xa2\x0f\xc4;8S\x0b;f\xa50\xbc.Ex\xbcf\xe2X;\x97\x87`=\x8d\xd7\xc0<,\xde\xf7<{\x1a\xdc\xbc\xc2!\xbf\xbbN\xdd\xa2<J$\x0e<\xc6\xb1\xc9\xbb\x88\x1d^<?\xc4\xe6:Y\xb6L\xbb\xc7\xb2\x17<\xd2w\xa3\xba\x94\xa6\x8f\xbc\xac\xbf\xe3\xbb\xcc\x80\x98<\x8d\xd7\xc0<\x8bH\x84\xbc\x9f\x94\xa5\xbc\xfd% \xbc02(\xbc\xbb\xd8\x9f\xba\x03\t\x8d\xbc\xcb.\x84<xb\x15\xbcz\x05\xf0<\xdbO\x7f<\xe0\x8f\x11=\xddy\xd7\xbcO\x1aK<\xa6w\x12\xbd\xaf;\xd0\xbc\xa1#b\xbbD\x92g\xbd\x8e\x00K\xbc\xb2\xa2P;\xb7\\\xb3\xbb\x10I7\xbd\xf3\x89\x1e=9\x90\xb3\xbc\xf2`\x14<JuT<\xaf\xfe'=\xff\xa0\xbe\xbcE\x93\xb5<\xdcdk\xbc\xcbW\x8e\xbc!\x05\xce\xbc\xebh\xbb;\xb4\xe0\xc6\xbaa\x14X\xbc\xb0\x13\x94\xbc\x8e=s<\x96rt<\x82\xfe\x96<3\x99(\xbc'\xab\x12;9|\x15=\x1d8\x1b\xbb\xd2\xc8i<\x89\n\x0e\xbc\x84d\xc9\xbc\x06p\x8d\xbb\x9f\x94\xa5<@\xd9\xd2;2\xc1d;\xb2\xa2\xd0<\xc36+=\x8a3\x18\xbd\xf6-\xc78\x7fn\x8c;\xa6\xb4\xba;\xbf}\x96:?s <\x9e\x7f9<\xc8\xc7\x83<\x89or<\x02\b?=[1k\xba\xb3\xa3\x1e\xbd\x02\xf4\xa0<M\xc8\xb6\xbcKM\x18\xbcU\xfd7=\xf8\x94\xc7\xbc\xe8\xed\x9c\xbc\xce\xd2\xac\xbc\xa0\x0ev;{\x1a\xdc\xbc\x91g\xcb<\xc6\x89\r<\x1d\x0f\x91<\\29=\x83O\xdd<\xf6\x19\xa9\xbc\xe7\x9b\x88\xbc\xf8C\x81<R\x967<T\xc0\x8f<4\xae\x14\xbc,y\x13\xbc\xcd\xa9\"<s\xe5Z\xbc\xbc>\xd2:[\xcc\x86=\xc5t\xa1<\a\xd6?<\x0f\xf7\xa2;\xdb\xfe\xb8<\xd9\xe8\xfe\xbb8S\x0b\xbd4\x13\xf9<RY\x8f\xbbLb\x04\xbd-\xa2\x9d\xbcJ8,\xba%\xbe\xe2\xbc\x8f\x157\xbc\xdfz\xa5\xbc\x9c\x04\x1b\xbb\xb8\x85=\xbc\x19\x93$=\xe2\n0;\xc4\"\r\xbc\x88\xcc\x97<\x12\xd8s<\x0c\x90\xa2\xbb\xa28N<\xa7\xf1b\xbb$\xa9\xf6\xbc\xad\x83\t<h\xcf\b\xbdwM)<\xb8H\x95;!\xb4\x87<\x98\x88\xae\xbc\xe9g\xed<,y\x93<\x19\xa7\xc2\xbcK\xb2|<4\xeb<\xbc\xe2\n\xb0<\xec\xcem;\xb1\x8dd\xbb)ww;V\x12\xa4\xba.\xb7\x89\xbc\xf06\xbc<w\x10\x01\xbcyw\x81=\xf9\x95\x95<\xc9~\xfc\xbcy\x8b\x9f\xbb\x9eB\x91\xbb\xe0\xe0\xd7\xbc;\xf7\xb3<\xd5\xde\xa3<}\a\x8c\xb9r\x93F<'\xbf\xb0\xbc\xae\xd5\x1d=}0\x96<\xef\r\xb2:|/H<\xc1\x0c\xd3\xbc\xcbk\xac<\x8fR\xdf\xbcXy$<T\x11\xd6\xbb\x84<\r\xbdE\xa7S\xbc\xd5\xde#<\xd3\xddU;Z\xcb8\xbd\x0b\xa3r\xbc\x95\xe4\x85<j!\x9d\xba\x9a\xda\xc2<\x00\aq\xbcwaG=UN\xfe<\xaa\x1c\t<\x15\xee-=z\x05p<\xfc\xfc\x15\xbc\x06\xea\xdd<e\xcd\xec\xbc\xdfz\xa5<\x13\xed\xdf\xbc\x83;\xbf<?\xc4\xe6;\xa9\x1b\xbb;\x98_$\xbc\x9eV/=\xae&d\xbc\xd0M\xcb<>J\x96\xbb\xab\xaa\xf7<\xc3\r!\xbdi5\xbb<\xb3\xa3\x9e\xbc\x00\xcaH\xbc\xcc\x946\xbc^3\x87\xbcG\xd1\xab;a\xc3\x11\xbb&\x96&\xbc\xc5t!=\x93\x91\xa3\xbc\x04o?<jJ'<\xc0\x92\x82\xbc\xb2z\x14\xbd\xab\xaa\xf7<b\xec\x1b<\x1dtu<\x81\xe9*<s\xa8\xb2:\x12\x87-\xbd\xdb\xc1\x10<\x12\x9b\xcb\xbc\x12\x9b\xcb\xb97>\x1f<\x9e\xa7u\xbdH\xfa5=\\\t/\xbc\xe0\xe0\xd7\xbbJa6=\xbe+\x02<\xf4\x9e\n\xbc\xa1#b9\xbf\xe2\xfa\xbc\xc9~\xfc;rk\n\xbd\xea|\xd9<\xfa\xe6[\xbcwM)=5\x00)\xbb\xf7B\xb3<2\\\x80<\x8d\xc3\"\xbc\xd6\x81\xfe\xbb]\x1e\x1b\xbb\xe0\xcc\xb9;\x92h\x19\xbc\xd6D\xd6<\x03nq:\xd1N\x99\xbb!\xf1/=\x042\x97;\xd9\xc0B<jJ'<\xbf}\x96<\x9b\xef\xae\xbb\x91\xa4\xf3\xbc\x97J8\xbcI#@<P\x80}=c>0\xbc\xfc\xfc\x15\xbd\xd1N\x99;\xcc\x80\x98\xbb\xcbk\xac<\xfa\xe6\xdb;\x19\xd0L\xbc\x9b\xb2\x86\xbc<\xf8\x81\xbc\xeb\x91\xc5<\x18\xbb\xe0<-\xf3c<Lv\"<\x1c#/\xbc\xf8W\x9f:\x9c\x18\xb9<\xa3u\xf6\xbb\x9d\x19\a\xbcN.\xe9<\x82:\xf1\xbbrk\n=\xa4\x8ab<\x8d\xeb^\xbb\xaf\xea\t<H\xfa\xb5\xbc\x1e\x89\xe1;\x01\xcb\x16\xbc\xdbO\xff;\x1eM\a\xbcC@S\xbc\x8f\xd8\x0e:!\x05N\xb9\xd8n.<\xd7YB<\xd0\xfc\x04=\x98\x88.;\b<r<\xe4\x99\xec<\x1f\xdb\xf5\xba\x86\x8e!=R\xaaU<\xf06<<\x10I\xb7\xbb\xa7\xddD=\xcd\xe6\xca\xbce\x90\xc4<\xdd(\x91\xbc\b\xeb\xab\xbc\xce\xd2,\xbd\xc7\xef\xbf;\x17\x18\x86\xbb\xdeQ\x1b<\x9f\xa8\xc3\xbc\x0f\xe3\x84\xbb\xb2\x8e2\xbc2\xc1\xe4;\xf6-\xc7\xbc\xfdb\xc8<\x05\x84+\xbd\xe6\xc3D<\xe44\b:\xa8\xf2\xb0\xbc\xca\x93h<&\x82\b\xbb\xee\xe4\xa7<]\x1e\x1b\xbc5\x00)\xbc\xc4K\x97\xbb\xad\x83\t<-\xf3c\xbd\xcb.\x04=6=\xd1<\xd3\xddU<\x00\xa2\x0c\xbd\xb7\x1f\x8b<\xf9\xd1\xef\xbc\x80\x97\x16=\xf3\x89\x9e<3\xc2\xb2<\xdeQ\x1b<\xdbO\x7f\xbbD-\x83\xbc\xd4\xf2\xc1<\\2\xb9<\x17\x18\x06\xba\x95 \xe0\xba\x8e=\xf3\xbb#\x06\x9c;\xe0\x8f\x11=\x8e\x00K<\x90\x16\x85\xbb\xe2\xcd\a;\x9f\x94\xa5\xbaH\xfa5<xv\xb3;\xea|Y\xbc\x05G\x83\xbc\\\t/\xbb\x01\xdf4\xbb6zy\xbc\xeci\t\xbc^\x84\xcd\xbc\x1f\x8a\xaf<\xa3uv\xbaG\xe5I<&\x96&;\xb5\xf5\xb2\xbce\x90\xc4\xbc\x00\a\xf1;\xf4\xdb2\xbc\xc0\xba\xbe\xba+\xa1\xcf\xbc\x8c\xd6\xf2\xbb)\x12\x13\xbd\xb2\xa2\xd0\xbc\xac\xbfc=\x94\xa6\x0f<\xae\xd5\x1d<\xf3\x03o\xbc\xf5\x04=\xbd\xaf;\xd0;\xe9\x02\t:F\xbc?=\x9eB\x91\xbc\xebh\xbb;\xf17\x8a;\xb3\xa3\x1e\xbd~Y\xa0\xba\xe3\x1f\x1c\xbdOC\xd5\xbc\xd2c\x85\xbc6z\xf9<z\xa0\x0b\xbc~\x81\\<\xb8H\x95\xbb9|\x95<`\x9a\x87<Vc\xea<\xe7\x00m\xbc\xe9\x02\x89<_\x99\xb9<#W\xe2\xbbdg:\xbc\xcd\x95\x04<\xba\xd7\xd1\xbb\xbd\x16\x16;\x9c\x04\x9b<Y\xb6L\xbb\xe8\xc4\x12<\xfcM\xdc\xbc?\xc4f<\xbc>R<\xdcdk\xbc\xfa\xd2=\xb9u\xe6(\xbdS\xbf\xc1\xb9j!\x9d<\xb9\x86\x8b\xbc\x95\xe4\x85\xbc\xd0\xfc\x04\xbd\xd71\x86;2\xc1d<\x05\x98I\xbc\xe3\x1f\x9c<\x88\xcc\x97\xbc\xce\xbe\x0e=\x02\xf4\xa0<1oP\xbc\xbc>R<5\xec\x8a\xbc\x1dt\xf5;t\xa9\x009cfl<\x0f\xe3\x04\xbdr\xd0\xee<4\x13y\xbb+\xa1\xcf<@\x88\x8c\xbcn\xda\xb1<\xa4M:\xbc\x10qs<\xefJZ\xbc\x01\x1c\xdd<\xd9\xe8\xfe<\xd2\xc8\xe9\xbb]\x83\xff;R\xaaU<\xf8W\x9f;\x9f\xbc\xe1<;\xf7\xb3\xbc\xe5]\x92\xbc\x15\xee\xad<\xa4v\xc4<\xba\x14z\xbb \xf0a<U\xfd7\xb9\xc4sS<\x1dtu=\xc6\xdaS\xbcK\x8a\xc0\xbc\x8d\xd7@;\x92|\xb7;'\xe8:<T\x11V;\xb1\x8dd\xbb\xcb\xa8\xd4\xba[\xf4\xc2<D-\x83<iI\xd9\xbb\x95 `\xbc/\t\x9e\xbc\xfc\xfc\x95<a\xc3\x11<\xa2\x0f\xc4\xbbV\xfe\x05\xbd_\xea\x7f<9|\x95<\x85\xb6\xdd;Wx\xd6;m\xb1\xa7;\x91?\x0f\xbd#C\xc4\xbc\xaam\xcf\xbc\x89\n\x0e<)w\xf7\xbc\xf5\x18\xdb;N\xf1\xc0<wM)\xbd\x80\xe8\\<!\xc8%<N\xc9\x04=k6\x89\xbc\r\ns<\xb9]\x01<\xa3uv<" "content" "### Summary:\n\nThis video introduces and explains the Redis Time Series, a Redis Stack component, used for efficiently handling time series data with quick data ingestion and low latency reads. The tutorial covers a practical application by using Redis Time Series to monitor air quality using sensor readings from around a house. It demonstrates setting up WiFi-enabled Raspberry Pi sensors to track air quality, sending data to Redis Time Series on Redis Cloud, and then using various Redis Time Series commands to manipulate and monitor the data.\n\nKey functionalities of Redis Time Series covered include creating time series with specific options like retention time and chunk size, adding samples to the series, adjusting series settings with the `alter` command, and querying the series with commands like `range` and `revrange`. It also details advanced functionalities like data aggregation with `create rule` for simplified data analysis and visualization, and the `query index` command for filtering through time series keys based on labels.\n\nThe video suggests Redis Time Series is an invaluable tool for real-time data tracking in various use cases, including environmental monitoring, finance, device management, and more. It encourages learners to explore further into Redis Time Series through official documentation and to experiment using a free Redis Cloud database.\n\n### Example Questions and Answers:\n\n1. **What is Redis Time Series?**\n   - Redis Time Series is a component of Redis Stack that introduces a time series data structure to Redis, enabling efficient data ingestion and low latency reads for time-stamped data.\n\n2. **How do you create a time series in Redis?**\n   - You can create a time series in Redis using the `TS.CREATE` command followed by the key name and optional subcommands for specifying behaviors like retention time, chunk size, duplicate policy, and labels for secondary indexing.\n\n3. **What command is used to add data samples to a Redis Time Series?**\n   - The `TS.ADD` command is used to insert data samples into a time series, where you specify the key, timestamp, and sample value.\n\n4. **Can you update settings of an existing Redis Time Series?**\n   - Yes, settings of an existing time series can be updated using the `TS.ALTER` command, allowing changes to options like retention time, duplicate policy, and labels.\n\n5. **How do you retrieve data over a certain period from a Redis Time Series?**\n   - Data from a specific period can be retrieved using the `TS.RANGE` command, where you define the start and end timestamps to get samples within that range. There's also a `TS.REVRANGE` for retrieving data in reverse order.\n\n6. **What is the purpose of the `TS.CREATERULE` command?**\n   - The `TS.CREATERULE` command is used to aggregate data from one time series and record it to another, helping with data compaction and tracking custom aggregated values over specified time buckets.\n\n7. **How can Redis Time Series help in visualizing data?**\n   - Redis Time Series can aggregate large sets of data into manageable summaries that are less resource-intensive to visualize, making it ideal for integration with platforms like Grafana for graphical data representation.\n\n8. **Is it possible to filter for specific labels using Redis Time Series?**\n   - Yes, the `TS.QUERYINDEX` command enables filtering across all time series keys to find matches based on specific label values, facilitating searches through data based on metadata like location or sensor type.\n\n9. **What are some use cases for Redis Time Series?**\n   - Redis Time Series is suited for a variety of applications including environmental monitoring, financial and stock market analysis, real-time device monitoring, and historical data analysis.\n\n10. **How can one start experimenting with Redis Time Series?**\n    - Individuals can sign up for a free Redis Stack database in the cloud to begin experimenting with Redis Time Series capabilities." "metadata" "{\"id\":\"SzcpwtLRgyk\",\"link\":\"https://www.youtube.com/watch?v=SzcpwtLRgyk\",\"title\":\"RedisTimeSeries Explained\",\"description\":\"Have you ever tried to wrangle data via timestamps but never had the time to do so? Join Justin as we take a stroll down 'in\\-memory' lane with the RedisTimeSeries module.  The RedisTimeSeries module, part of Redis Stack, lets the developer create time series data structures within Redis with the speed you've come to love from Redis. Redis Stack is an extension of Redis that adds modern data models and processing engines to provide a complete developer experience.\\n\\nIn addition to all of the features of OSS Redis, Redis stack supports:\\n\\- Queryable JSON documents\\n\\- Full\\-text search\\n\\- Time series data (ingestion & querying)\\n\\- Graph data models with the Cypher query language\\n\\- Probabilistic data structures\\n\\n00:00 Introduction\\n00:25 What is RedisTimeSeries?\\n00:50 Example explanation\\n01:27 TS.CREATE \\- create a time series object\\n03:01 TS.ADD \\- add to a time series object\\n03:31 TS.ALTER \\- update a time series object's options\\n04:00 TS.RANGE \\- retrieve a range of a time series' values\\n06:06 TS.CREATERULE \\- create rule for a time series object\\n07:48 TS.QUERYINDEX \\- query labels across time series objects\\n08:29 Conclusion\\n\\nLinks: \\nRedis University \xe2\x86\x92 https://university.redis.com/\\nRedis \xe2\x86\x92 https://www.redis.com/\\nRedisTimeSeries \xe2\x86\x92 https://redis.io/docs/stack/timeseries/\\nNeed a Redis Cloud  now? Sign up for a free Redis Cloud Essentials account \xe2\x86\x92 https://bit.ly/3xdTyMR\\n\\nJoin our discord server \xe2\x86\x92 https://discord.gg/redis\",\"thumbnail\":\"https://i.ytimg.com/vi/SzcpwtLRgyk/maxresdefault.jpg\"}"
"HSET" "openai-video:5" "content_vector" "K\x11\xde<\xc2\xc4\xef;\x0c\x18\x0b=\x9a\xf7\xba\xbc\x817x=\x85\x16\xad<.\x04\x8f;\xff\x0c\x95<'0\xf3\xbb{S\xe8:\xb3\x10\x06=V\"\x12\xbc3\x97\xd0;\xcb\xe0<;\xe5O1=K\x0c\x03\xbd\xb9B\x05\xbd\xad\xde\x86<{Sh\xbc\x15\x92\xbb=\x97^;=\\\x03C<\xae1Q<\x8e\xe9\xe5<\xde \x91\xbc\xc0\xca-\xbd\xa3\xcas\xbdB>\xa5=\x8a\xfd\x9b\xbc\x00c>\xbd\xe4\xf9\x87<\n\xd2\xd5\xbc\xbe\x7f\x1d\xbd@L\x9d:\x8d=\x93<h\xc0\xc9<\xa4\x13\x88;\xbc\x92\xf0\xbc\x1ay\xaa;Z_*<\n\xd2\xd5<\xd8\x95\t\xbd7(\x16\xbd\x14\x9d\xd4\xbcE\xdc\x7f<\xba\x98\xae<#\x9aR\xbd\xdd\xcfB\xbd\x05\x9dw\xbc;e\xae=\xb9\x9b\r\xbdd\xd9\xda<|K.\xbc-]\x17\xbc\xdb.\t=\xa5\x10)<\x176T\xbc\xed\xcc@<\\Y\xec\xbcE\xdc\x7f\xbd\xfemW=V\xd1\xc3\xbc\x8e\xe4\x8a\xbc\xfb%\xa6<zV\xc7\xbbT\xd7\x81<\x1a\xcf\xd3\xbc\x8e\xe9e;[\x0b\xfd\xbc\xa4\x13\x88<\x87d\x1c<\x87\xbaE\xbc\xb5`\xf1;Wu\\\xbc\xd4Z\xed\xba:\xc6p\xbbk\x03\xa0;\x8b\xfa<\xbbx\x0b\xb7\xbb?\xfbN\xbcwg\x1e<\xfe\x17.<\xb9\x9b\x8d\xba\xabB\xa8\xbcOI\x9b<\xeb+\x87<e\xceA\xbd\xb5\nH\xbd\x01X\xa5:\xeep\xd9;\xc7\xa8\x7f\xbd\xd7\xee\x91<,\x0f(\xbc\xf7>\xb7<`;\x80;s'\xa7\xb7\xcb\x8a\x13<\xd1k\xc4:^\xa4|<\xc3\x12_<\xd2\n\x82<\x0b\xca\x9b\xbd\xf9\xda\x15\xbd\xd3\x0c\xfe\xbcO\xa7\xfe<\x1e\xb6\xc2\xbc\x11\x04U=\t.\xbd\xbc:\xc1\x15\xbdzY&\xbd\x1a \xa2\xbdK\x11\xde\xbcZ_\xaa<\x17\x87\xa2\xbc\xfcs\x95<\xa8\xffQ<\x11\xab\xcc\xbc<\x0c&\xbd\x92\xd0T\xbc\xc7\xf9\xcd:n\xa1z\xbb\x0f\n\x13\xbb\xaa\xf4\xb8\xbcZb\x89;\xa9\xf7\x17\xbd#\x9aR\xbdT\xd7\x81=\x9f\x85!\xbd\xcc.,:^\xf5J\xbdt\xce\x9e=\xa8\xa9(=i\x0e\xb9\xbbY\xbb\x11\xbd\x04\xf4\x03<\x95\x13\xab<\x97\xaf\t\xbd\x19#\x81<\x02\xff\x9c\xbcc\xdc9\xbdG{=\xbbU*L\xbdur\xb7\xba~\x96><\xec\xd4z<\x0c\x18\x8b\xbdU{\x9a\xbc\xad\x8d8=\x8c\x9eU\xbc\x13\xa0\xb3;8\xcc.=\x04\xf1$=e\x1f\x10\xbdq5\x9f\xbc\x1c\x15\x89\xbc.\x04\x0f\xbdfu9=\x1f\xb3\xe3;L\x0e\x7f<\xf98\xf9\xbc\x9c\x9b\xd3\xbcF%\x14=\xf7\xed\xe8\xbb3>H<\xd6\xa8\\\xbd\\T\x91\xbc|K\xae<c\xdc\xb9\xbc\x82'\x04\xbdY\xbb\x91\xbc\xf3\xfe?<\t.\xbd\xbc\xb3\x15a<\\\xad\x19=m\xa4Y=\xe2\x0c[\xbc`;\x80\xbdOI\x9b\xbc0\xfeP=\xc2\xbf\x14\xbdG\"5\xbdk\xaa\x17\xbd<\x0c&\xbd\xa6\xb4A\xbck\xaa\x97<=_\xf0;d\xd1\xa0\xbc\x13G+\xbd\xd2\n\x02\xbd\xb3\x10\x06<\xca\x92\xcd\xbc\xa0\x82\xc2=\xc1\xc7\xce\xbctu\x16=\x8e\xe9\xe5;'+\x98\xbax\xb5\r=\x1b\xcct<\xbb\x95O\xbc\x8d\x96\x1b\xbd\x99S\"=\x83\xd3V=\x03\xa3\xb5;\xb3i\x8e\xbc~\xe7\x8c<\x03\xa35<\"\xa0\x90<\x1f\xb3\xe3;\x84r\x94\xbd)v\xa8\xbc]Q\xb2<\xf5\xf3&\xbd_F\x99<\x97\b\x12<G\xcc\x8b\xbcy\b\xd8:Xr\xfd;\\\xaa:<1\x9d\x8e\xbc~\x96\xbe<\x0cq\x13\xbd\x1ay*=\xf0\xbeH=]\xa2\x80\xbc`;\x00<\x82'\x04=\xe1\xb9\x10=\x904\xf6\xbc\xc7\xa3$<\xa5f\xd2:\xc4\n\xa5<\xf0\xbb\xe9;\xba?\xa6:\\Yl\xbd\xcd\xd5#=1\xfbq\xbd\x06?\x14\xbdF*\xef\xbb\xcfq\x82<\xfd\x1f\xe8<\xe4R\x90\xbb`@\xdb;\x88\xb7\xe6\xbb\x8bP\xe6<\xb9B\x05=O\xa7\xfe:\x8b\xf2\x02\xbd\xd4\xae\x1a\xbd\"\x9d\xb1<:\xc1\x15=\xbaG`=gj \xbd\x1e\x0fK<\xa3\xc5\x18\xbd\a\xe3\xac\xbc\x0c\xc7\xbc\xbd\x85\x1eg<\xdb\x8cl\xbc\xfd\x1a\r;\xbb<G<\xc2\xbf\x94\xb9\xe2\a\x80\xbd`\x94\x88\xbc?\xa5\xa5\xbc`;\x80<\x0cq\x13=\x9a\xf7\xba;r\x83\x8e\xbc\xa0):<\x12\xf9;\xbdY\xc0l;:h\x8d\xbc'\x84\xa0<\xef\xc1'\xbb\x17\x87\"\xbd\x01X\xa5<*\xc4\x17=\xf7>\xb7;\xa5\xb7\xa0<\x8d\x9b\xf6;\x11\x04U<8{`\xbd\xaf.\xf2<\xb8\xf9p<\x8f\xe1+\xbc\xa9\xfc\xf2<\xd7\xf6K<\xb4f\xaf<\xac\x90\x97=\xa1!\x00\xbds\x80/\xbdx\xba\xe8\xbcr2@:\x84\xd0\xf7\xbb\xfe\x17\xae<$\xeb\xa0;\xf90\xbf;e'J=\x04\xf1\xa4\xbc\x9c\x9b\xd3;,h0=C\x8c\x94:\xa9\xfcr\xbcvoX=\xbb\x8d\x95\xbc\xcc\xd8\x82\xbcN\xaa]\xbcGs\x83\xbc\xb2\x1b\x1f=\xdev\xba\xbc\xc7J\x1c;\xb3\xbf\xb7<\x03Rg\xbc:pG\xbb;e\xae\xbc\xf7\x8f\x05<]\xa7[=\x11\xfc\x1a<i\xbdj\xb9\x1eet\xbc!\xfe\xf3<;\x14\xe0\xba\x98\x02T=\xe0k!\xbc7~?<\xec((\xbd\xb9\xf1\xb6\xbb\xb2\xc2\x16\xbd3\x97\xd09\x17\xddK\xbd\xaaE\a<\xab\x98\xd1\xbc\xc5]\xef<~\xec\xe7<\xbc4\r\xbdHx^\xbd\xe3ZJ9\x00\xb4\x0c:\xb0\xcd\xaf;\x86\xbd\xa4<\xdd\xd7|\xbc;\x14\xe0\xbc60P\xbd\x94\xc5\xbb\xbcZ_*\xbdx\x0b\xb7<~\xef\xc6<a\x91\xa9;\x9e\xde)\xbd\xab\x98Q;\xb2\xc7\xf1\xbc\xe4\xf9\x87\xbc\x80:W\xbd\x8dEM\xbd\x9f\xdb\xca<\x0e\xbc\xa3;\x1d\x12\xaa<:pG\xbb\x11\xab\xcc\xbcZ\x0e\xdc\xbc\x0c\x18\x0b\xbd\xd9A\xdc<\xe6\xa2{\xbc\xa9\x9e\x0f\xbc\x15<\x92<\xd0\xc7\xab\xbc:\xc6\xf0\xbc\xd4]\xcc\xbbd\xd1\xa0\xbcR\xe2\x9a\xbc\x9d\xe9B=0\xfeP=\xf8\x8c&\xbc\x1c\x15\x89\xbc)v(\xbdF-N=\xbc\x92\xf0;J\xc3\xee<\xedv\x97;\xc3\x12\xdf<\xa01\xf4\xbb\xc7\xf9M=\xe5\xf6\xa8;\xea\x84\x8f\xbcb\x86\x10=\xd7\xee\x11=\x19|\x89\xbc<\xb3\x1d=\xc5\a\xc6\xbc\xa8\xffQ<\x90/\x9b\xbc\xc8G\xbd\xbc \x01S;\xe8\x8f(< R\xa1<\xc9?\x83;fu\xb9\xbcd\xd9\xda\xbbd\xd9Z=\x98\x02\xd4<\xc6\xab\xde<\xe2])\xba\x9e\xe6c\xbd\xad\xde\x06\xbcho{\xbc\xbd\xd8\xa5<m\xf5\xa7;\xc9?\x83\xba\xce#\x93\xbc\xc5\a\xc6\xbc\xd3\a\xa3;\xc8\xa0\xc5;\x99\xa9K=\x11\xfc\x9a:\x8a\xa4\x13\xbb\xe4R\x90\xbb\xaf\xd8H;\xc2\xbf\x94<\x9aP\xc39\xd1k\xc4<\xb3\x15\xe1<\xb8\xa3G\xbdb\x8eJ\xbd\xa1\x7f\xe3;\xd5\xab;\xbdd\xd1\xa0=\xa01\xf4<\xcb9E\xbd\xf6\x9f\xf9\xbc\xf0\x0f\x17\xbd\xf0\x0f\x97\xbc\xe2])\xbc\xd2\x12<=\x15\x9a\xf5;\xf98\xf9;3\x97\xd0<\x94o\x92<\x1c\xc4:\xbc\xd7G\x9a;(~b\xbd\x12\xf9;\xbb-]\x17=\xe4\xf9\a\xbdj\\(<\"Lc\xbd\xaf.\xf2<\x01\a\xd7\xbcZb\x89<f$\xeb<r\x88\xe9<\xffe\x9d\xbb\xdb\xdd::\n&\x83\xbc\xe1\xb9\x10=\xab\x98\xd1\xbc]\xa7[\xbd\t\x84\xe6<\xf6A\x16=2I\xe1\xbbS0\n\xbd\xe9\x8c\xc9\xbd\xe8\xe80=\xaf\x7f\xc0\xbc\xaa\x9b0=\xddy\x19=\xec\xd4z\xbc\xcb\x8f\xee;\xa8P ;\xae\x82\x1f<Y\x11;\xbc\\Yl;\x9f\xdbJ=\xd2\x12<\xbcE\xdc\xff;\x87i\xf7\xbc\x8d=\x13\xbd\x90\xde\xcc:=\t\xc7<\x13\xa03=u\x1c\x8e;\xf8;\xd8\xbc_F\x99\xbc\x19\xd2\xb2\xbc\xc7\xa3\xa4<_F\x19;r*\x06=\x8e\xe4\n=\xf4L/;\x9f,\x19<\x94\x1be<\x14\x9dT\xbd\xf6A\x16<\n|,<\xed\xcc@\xbc\xae\x82\x9f\xbc\x91}\n\xbd\x8bP\xe6\xbc\x1e\a\x91\xbc\xc1\x18\x1d=\xba\x98.<r\x88i=]Q\xb2:j\\\xa8:\x88Y\x83=\xda6\xc3<ur\xb7\xbc.br<\xf2\x01\x9f\xbc46\x8e;\x8f7\xd5<\xbc\x92\xf0<\x06\xe6\x8b\xbc\x8d=\x93<\x0ekU=\xa6\xb4A\xba\x03M\x0c\xbc5\xe2\xe0\xbcB>\xa5\xbc\xb8\xfc\xcf\xbcT\xd7\x81\xbbX\x14\x1a<i_\a\xbcB\x97-< U\x00=\xb2q\xc8;\\Y\xec<D\xdf^\xbd(y\a\xbdW\xc6\xaa\xbbz\x00\x1e\xbcY\x11\xbb:\xe2\x0c[\xbc\x12\xa3\x12\xbc&3R=\x87d\x9c\xbci\xb8\x8f\xbd@\xf3\x94;2I\xe1\xbbi_\x87\xbcwg\x9e\xbc\xe1\x0f\xba\xbb\xe5\xf6\xa8\xbc\xcfq\x82\xbc\xf0\xbb\xe9;L\x06\xc5;}\xf2\xa5<\xb5\xb4\x9e<\xac?\xc9\xbc\xc3\x12_\xbc\xd7\xf6K\xbc\t.\xbd;\xc2\xbf\x94\xbc\xb0\xd0\x0e=K\x0c\x03\xbd\x9e\x88\x00=\xdb\x842<G{\xbd\xbc\x0c\xc7<;\x98\x053<\xac7\x0f\xbd\xb4f/\xbak\x03 \xbc\xb5\xb4\x1e<(~\xe2<e\x1f\x109\xc7\xf9\xcd\xbc\n\xd2\xd5<\xcb\x8f\xee\xbc:h\r\xbb.b\xf2;@I\xbe;7~\xbf\xbc\xca\x92M\xbc\xd5\xfc\t\xbc{S\xe8<Gs\x83<{\xfd>\xbc\xb4\r\xa7\xbc\x19|\t\xbd\x9aM\xe4\xbb\x85o\xb5\xba\x87\xbaE\xbd\"\xf699\xbaG\xe0:\x14D\xcc\xbc\x16\x8a\x81\xbb\x8b\xfa\xbc<\xcc\x87\xb4<\xd5\xab;<<\xb3\x1d<\x05\x98\x1c=/\x01\xb0;\x1f\x04\xb2\xbc\xfc\xd1\xf8<i\xb8\x8f\xbc\x1ee\xf4<\xa1z\b=5\xe2\xe0\xb9@L\x1d\xbdi\xb8\x8f;\x0by\xcd;\x0b\xca\x9b<C\x8c\x94\xbc\x8a\xa4\x13\xbd}\xf2\xa5\xb91\xfb\xf1<0\xfe\xd0\xbb\xb8\xf4\x95\xbcL\xb0\x9b:_\xf2\xeb\xbc\x93\xc8\x9a\xbcD\xdf\xde\xbc\x18\xd5\x91\xbc\x176\xd4\xbc\x04J-\xbd\x9aM\xe4<\x93w\xcc\xbcp\x8e';\xf9\x89\xc7\xbb\x9d:\x91\xbaex\x98\xbbn\xf2\xc8\xba\xf4T\xe9\xbc\x89\x05V\xbcn\xa1\xfa<m\xf5'=\xa1\xd0\xb1\xbc\xf6A\x16\xbdex\x18\xbd\xff\x0c\x95\xbb7\xcf\x8d<E\xdc\xff\xbc\xd3\a#<\xdb\xdd:\xbc\x19\x81\xe4\xbb\x06\xe6\x8b\xbb8v\x85;h\xc0I<\xb4\r\xa7<\x98\x053\xbb\xd4U\x92=Je\x8b<\x89\xaf\xac;a\x91)<\x06\xe6\x0b=\x17\x87\xa2\xbc\xde \x91<Xr\xfd<\x96\xba\xa2\xbb\x9a\xa1\x91\xbcY\xc0l;\xd2\x12\xbc\xbc.Z\xb8=5\xdd\x05\xbc\xa4\x13\b<\xb1\xca\xd0\xbc*\xccQ\xbc\xffjx:o\xef\xe9\xbb\xda\xe0\x19;b\x8b\xeb\xbc|K.\xbb/\xb0\xe1\xbc<bO<\xf4T\xe9\xbc[\\K<C\x91\xef\xbb\xd8\x95\t<\x06\xebf<\xb3\x10\x86<:\x17?\xbd8{\xe0\xbc\x91\xd33=\xea\x84\x8f<\xe0k!\xbcXm\"\xbd\\T\x11=B>\xa5\xbce\x1f\x90<\xe0p\xfc<\xc1\x18\x1d<\xa7\xac\x87<]\xa2\x809\xab\xe9\x1f\xbd\x8e\xe4\n\xbd\xaa\xf48\xbd\xea\xda8<\xd0s\xfe:\x1f\xb3c<\x97\b\x12<S0\x8a\xbc\x10\a\xb4\xba\x00[\x84;\xe0p\xfc\xba\xe6D\x18\xbb\xb8\xfcO\xbc\x0b\xcfv<\x91\xd33<\xd1\xbc\x92:q\xdc\x96\xbd@L\x1d\xbcn\x9c\x1f<\x1dhS\xbd\x8b\xfa\xbc\xbc\xb2q\xc8\xbc4\xe5?\xbb\x9e\xe6c\xbc\x9aPC\xbc\xf5\x9a\x9e<\x91\x82\xe5;\xf7\x8f\x85<\xc4`\xce\xbb\x90\xde\xcc;$\xeb =\xdc\xda\xdb\xbc\n|\xac\xbc\b\xe0M<.\xb3@;\x9d\xe9\xc2<M\\n:\x86\xbd$\xbc\xc5X\x94<)v(\xbd\x1e\xb6\xc2\xbc\x0e\xbc\xa3<*s\xc9<{S\xe8;60\xd0;\xf7\xe5.;\xd3`+=\x93\xc8\x9a\xbc\xe2\a\x80\xbb\x15\x9a\xf5<\b6\xf7<\xa3\xc2\xb9\xba\xf5\xa2X<\xe1\xbe\xeb\xbc4\x8f\x96\xbc\x90\xd6\x92\xbc.\x04\x0f\xbc\x1c\x1a\xe4\xbc`@\xdb\xbc\x0c\x1d\xe6\xba\xf7\x8f\x85<\xfb~\xae<\xb1t\xa7;\x06\xebf\xb9j\x0b\xda<\x15\x95\x9a\xbc\x8f7\xd5;\xeb+\a\xbch\x11\x18<\xc7\xf9\xcd7e\x1f\x90<\x9c\x9b\xd3<\xb9\xf1\xb6\xbc\x94o\x12=\xb2\xc7\xf1\xbb\xcd\xd5\xa3:\x88\b5=\xf6A\x16\xbdA\x9a\x0c=\xb2\x1b\x1f\xbcF*\xef<\xa9\xf7\x97\xba\xd0\xc7+<\xdb.\t\xbdc\x83\xb1\xbb\xec%\xc9<\x87i\xf7<=\xb0\xbe\xbc\xe96 \xbb8v\x85:\xb0\xcd\xaf\xbb\xbaG`<\xc6\xab\xde\xbb\x1a\xcf\xd3<Z\t\x01\xbd9\x1a\x9e\xbc\xf2Z\xa7\xbb(\x81\xc1<\x84r\x94\xbc\xddy\x99;\xcc\xdd\xdd\xbc\\\x03C;\x16\x8a\x81\xbc\x93\x1e\xc4\xbc\xa5\r\xca\xbc\xa2\xcdR\xbd1L\xc0\xbc2D\x06\xbd\x98\x02T\xbcb\x8eJ<\xf0e\xc0\xbcI\x17\x9c\xbc\xbd\xdb\x04\xbcF*\xef\xba\x17\x87\xa2\xbdS\x89\x12<\x84\xd0\xf7<\xaa\xf48\xbd\xbb\x95\xcf\xba\x1c\x15\x89\xbc\xd5\xab;=\xe4\x01\xc2:A\x9a\x0c\xbc\x904v\xbdN\xaa]\xbcD\xdf\xde\xbc\xd0n\xa3\xbc\x86lV\xbd\xf2Z';\xe8>\xda<\x9e\xde)=\xe8\x8f(\xbc-eQ:\xe2\x0c\xdb;\xfdp6\xbcWu\\;\xd6\xa0\"\xbd;\x14\xe0<\xa6\xb4\xc1<\xfcs\x15\xbc\xaf.r<+\x12\a<\xcaA\x7f<f$k\xbcF%\x14\xbd\xc8G==G{\xbd\xbc\xeb\xd7\xd9\xbbP\xf5\xed<\x9e\xde\xa9\xbcI\xc6\xcd\xbc\xefh\x9f;\x18\xd5\x11=W\xc6\xaa\xbc:\x17\xbf\xba[\\\xcb\xbc\xd2\x12\xbc<1\xf37\xbd\x00c>=)v(\xbd\x9f,\x19\xbda\x91\xa9;F*\xef\xba-\x0cI\xbbv\x19/<L\xb0\x1b=6\x81\x1e\xbd\xbd\xdb\x84<9\xc9O;\x10X\x02=\xb8M\x1e\xbd\xcfq\x02<\xb5[\x967>\xa8\x84<\x02\xa6\x94\xbaD\xe2=<\xb7\xff.=\xdd\xd2\xa1\xbc!\xf9\x18<J\x14\xbd\xba\xfa\x81\x8d\xba\x88\xb2\x8b<QC]\xbc\\T\x91<\xe4R\x10<|\xf5\x04=\xd1\x15\x1b\xbb\x06\x95=<\x15\xebC<\xb1\xcaP<>\xa8\x84;\xde \x11<\x06<\xb5<\xcf\xca\n;\xa1\x7f\xe3;\xe5\xf6(\xbc!\xfe\xf3\xbc\x98\xac\xaa;\x98\xac\xaa<B\x94N\xbbxd?\xbd\x00\n\xb6;\x0cq\x13=\xda>};B\x94N=\x0by\xcd\xba\x92!\xa3<\xae\xdb'\xbdc-\b\xbb\xfd\xc1\x04\xbc\xab\x98\xd1\xbc\x1bn\x11<1\xfbq<(y\a=\xf0\xbeH<\xdc\xda[\xbc\xf9\x89\xc7<\xf8;\xd8\xbb!O\xc2\xbc\"G\b<\xcc.,;\xdev:=!\xa8\xca\xbc\xb2\x1b\x1f\xbc;\x14`\xbc<\xb3\x9d;$\x97s<i\xb8\x8f<D\x89\xb5<ur7<\x98V\x01<\xcb\x8a\x13\xbcv\xc3\x05\xbd\x02\xa6\x14\xbc\xc0t\x84\xbc\x90\xd6\x12\xbd\xc6U\xb5\xbc.\x04\x8f\xbcs\xd6\xd8;\x02\xff\x1c\xbbr*\x06=\xe6D\x98\xbc\x90/\x9b<\xcc\xd8\x82:\x13\xf1\x81\xbc\x05\x9dw=\x96a\x9a\xbc\xdc\xd5\x80=\xc4`\xce\xbc\x87\x0b\x14<\x9a\xf7\xba\xbc\xc1n\xc6<\x82'\x84<`\x94\x88\xbc\x02\xa6\x14\xbcd\xd9Z<\xfb%\xa6\xbci\xbd\xea\xbb\xa6\xb4\xc1\xbc~@\x95<\xe2\a\x80\xbc\xb0\xd0\x0e<\xa3l\x90\xbc\xf2Z\xa7<>\xa8\x04;y\bX<\x0b#\xa4\xbc\x89\x05\xd6;\x10X\x82\xbb\xe8\x92\a=\xf0\xb6\x0e\xbd\x93\xcd\xf5\xbc\x80\x8b\xa5<!\xfe\xf3\xbc\x0c\x18\x0b=\xe96\xa0<t$\xc8<\xf3W\xc8;\x1a \xa2<\xe7\x9a\xc1\xbc.br<>\x01\r\xbcK\x0c\x83\xbd\xd4]\xcc\xbb~\xec\xe7:\x95i\xd4\xba\x81\x88F\xbb\x14\x9dT=\x8bP\xe6<~@\x15<\x18.\x9a<\x1f\xb3c=\x91\xd33\xbc-eQ: \x01\xd3\xbc(~\xe2<\xb9\xf16<q\x8b\xc8<@I\xbe;\xa7\xac\a<}\x99\x1d<>\xa8\x84;`\xea1\xbc\xc5X\x14\xbd\b6w\xbb\xe1hB\xbc\xd7\xa5}<F*\xef\xbb/\xa8\xa7\xbc\xa1!\x00\xba>\xad\xdf;8{`\xbd[\\K\xbc\xa9\x9e\x0f<N\xfb+\xbd\xc4`N<\xf7\x8f\x05<\xfc\"\xc7\xbc\xc6\xfc\xac<\xdb\x87\x91<}\x9ex\xbc\xb5`\xf1<r\x83\x8e<\x16\x8a\x81<\x92z\xab<\xdb\xdd:\xbb\xbf\xcd\x0c\xbb\xe7\x9a\xc1<\x86\xbd\xa4\xbc\x0c\x1d\xe6\xba\x8e\xe9\xe5\xbc\xc5]\xef;J\xbb\xb49\x13J\n\xbd/\xb0\xe1\xbcR\x91L\xbdy\\\x05\xbd\xc8\x98\x0b=\xf3\xfe\xbf\xbc\xe4W\xeb\xbbf\xc6\a\xbc\xe8\xe8\xb0<\x8f7U\xbcQ>\x82\xbcO\xf8L<i\xb5\xb0\xbb\x1f\xae\x88\xbcD\xda\x03=8{`;`\x94\b\xbdM\xfe\x8a<.\xb3@=\xd8\x95\x89=\xbb\x8d\x95<\xd6\xf9*\xbc\xcb9\xc5<\xfa\x81\x8d\xbc\x01\aW\xbd\xefmz\xbc'0\xf3\xbb4\xe5\xbf\xb9\x8e\x93<<\x14\x9d\xd4<\xd0\xc7\xab\xbc$\xeb\xa0\xbc|\xa1\xd7<O\xa2#<\xdd\xcfB;\x1f\xb3\xe39\n\xd2\xd5\xbb\xd2\n\x02\xbd\x9aH\t\xbcU\xd9\xfd\xba\xdfs[;o\x91\x86<H\xc9,;\xd0\xc4L=\xc5]\xef\xbc\xea\x89\xea\xbb\xd5\xa3\x01\xbd\x13\xa0\xb3\xbc@\xf8o<\xbf&\x95\xbc8{`<C\x91o;\xc3\x12\xdf<\x9e\x88\x00=+\xc18=]\xfb\b\xbd\\T\x91<?\xa5\xa5\xbc\xdfs\xdb:\xff\x0c\x15\xbd\x12\x01v\xbc\xc0t\x04\xbc>W6;\xf0\xbeH\xbc\xe6\xf3I\xbdQ\xed\xb3<\xb4c\xd0\xbc\x9aP\xc3;\xb8\xfcO<\xff\xbb\xc6<Z\t\x81\xbc\x06\x95=<\x176\xd4\xbcO\x9f\xc4\xbcwl\xf9;\xd0\xc7\xab<M\xad\xbc;\x87i\xf7\xbbOI\x1b\xbd\x0c E=\xc7\xf9\xcd<\x1693\xbc\x89V\xa4\xbc\xd0\xc7+;\xb3\x15\xe1<u\xcb?\xbc~\x96>=F*\xef:9\x1a\x1e\xbd\xa9\xfcr<\x19|\t<\x06\xe6\x8b<e\xce\xc1\xbb\xdfn\x80<F~\x1c=\xb9\xf16\xbdb\x8bk;\x83\xd3V<\xb1t'\xbc\xdb\x87\x11<\xfb\xd4W\xbas\x80\xaf;\xae\xdb'=C;\xc6<\x83$%=\n|\xac<\xae1Q\xbd+\xc18=\x87d\x1c\xbb\x00\xb9\xe7\xbc\xf90?=\x87i\xf7\xbca\x91\xa9\xbcV\xd1C\xbc\x98V\x81;%\xe5b\xbc\xf0\xbeH<\xb6\x02\x8e\xbc\xc3\r\x84<\x86lV<\xca\xe3\x9b<\xe3\t|\xba\x0b\xcf\xf6\xbc\xaf.\xf2<\t\xd8\x93<\xf2\x01\x9f<C\x91\xef;\x99\xa9K<Wu\xdc<;e\xae\xbc\x9a\xf7\xba<\x9b\xef\x80=\x06<\xb5<g\xc3\xa8<B\x94N<\xb6\x02\x8e<\x92z+<\xf98\xf9\xbcQ>\x82\xbcU*L<\xc2\xc4\xef\xbc(\xd2\x0f\xbc\x83$\xa5:((9\xba\xd7G\x9a;`\x94\x88\xbcN\xfb+\xbcs\xd6X\xbc\x176T=\xa6^\x98\xbc@\xa2\xc6\xbb\xd5\xa3\x81<\xe2\a\x80<\a\x8d\x83<\xed\xcc@;\x85\x1eg\xbb*\x1d\xa0\xbc\xed\x1d\x0f:\xe2\a\x00\xbd\x1bvK=\xdf\xc4\xa9<2\x9a\xaf<\xac?I<\x11\x04U\xbb\"\xf6\xb9<o\xef\xe9\xbc\x95\x13\xab<\xf1\xb3/\xbb*\xccQ\xbc`C\xba\xbcv\xc0\xa6\xbb.br<\xda6C\xbb\x82\xd6\xb5\xbcu\xcb?<\x8e\x93<\xbcE\xdc\xff<\x9a\xa1\x11=\x0cq\x93\xbc$\xeb\xa0\xbc\xeb\xd7Y\xbc\xd4]\xcc\xbc\xda6C<\n&\x83<\x15\x9a\xf5\xbbF-\xce<q\xdc\x16\xbc\a9V<\x82\x85\xe7<$\x97s\xbc\xea\xdd\x97\xba$\xeb <\x8bK\x0b=\xa8\xff\xd1\xbcx\xb5\x8d\xbb\x9b\xef\x00:\xcd\xda~\xbd7\xcf\r;\xf5\xf3&\xbc\xb5\n\xc8<!\xf9\x98\xbc\x83\xd3\xd6;V'\xed<\x01X\xa5<&3R<\xbf&\x15\xbd\xf0\x0f\x17=\xc7\xa3$=\x8f7U<\xc9\x95,=\x94o\x12;t\xce\x9e\xbc\xb0\xd0\x8e<\x1f\xae\b\xbdC\xe5\x1c;\x8f\x88\xa3\xbcP\xf0\x12=D\xdf^<\xc4`\xce\xbb\xees8\xbc=\xb0\xbe<&3R\xbc\x817\xf8<\xfemW<\xec\xcf\x1f=\x10\a\xb4\xbc\x02\xff\x1c<wg\x9e;\x88\xb2\x8b\xbcz\x00\x1e\xbc\xbb\x8d\x15\xbalV\xea\xbbs'\xa7:\xd3`\xab\xbb\xd4Z\xed<!\xa8J\xbc\x9b\x9e\xb2\xbc\xab\x98Q\xbcWp\x01\xbc\xf6\x9fy\xbc\xdc\xda\xdb<Je\x8b<d\xd1\xa0<\xf7\xe8\x8d\xbc\x88\xb7f<D3\x0c\xbd\x05\xee\xc5\xbbex\x18\xbd\xca\xe3\x1b\xbc\xdd\xd7|<o\xefi\xbd\xa5f\xd2<?\xa5%=\xd2\n\x82<$AJ<\xd0s~<\xd8\xf3\xec\xbb\xd6\xa0\";:h\r\xbc\xeb\xd7Y\xba#\x9a\xd2\xbc\x83\xd3V<z\x05\xf9\xbb\xcey<=\xb0\xcd/\xbc\x85o\xb5\xbbG\xcc\x0b=\xc7J\x9c\xbbs\xd6X\xbb\x99\xfft\xbc\xe8>Z<\x8f7\xd5\xbb\xcd\xda\xfe:`\xea1;S0\n=\xc7\xa8\x7f=%\xe0\a<z\x00\x1e\xbc!\xf9\x18\xbd\xa4i1=\xaf.r<o\x91\x06\xbc\xfd\x1f\xe8\xbc(y\x87\xbc46\x0e=@\xf3\x94<\xc6\xa6\x03\xbd+\x12\x87\xbc+\xc18\xbcz\x05\xf9<\xfe\x17\xae\xbcy\xb2.<\xb8\xf9p\xbc\xcc\xd8\x02\xbd|\xa1W;B>\xa5<\x802\x9d<\xd4\xae\x1a<\"L\xe3\xbb[\x06\"<i\xbdj<\x05\xee\xc5\xbc]\xa7[;S\xdf\xbb;\t.\xbd<v\xc3\x85< U\x00<8%\xb7;\xe8\xe8\xb0;\xbd\xdb\x04\xbd\xa4i\xb1<\xcc.\xac\xbc\x1b\xc7\x19\xbc\xc6\xa6\x83\xbcxd?\xbc2I\xe1\xbb\xb1t\xa7<\x86\xbd\xa4<q5\x9f;\x92$\x02=\x12\xa3\x12\xbc\x97\xaf\t=Gs\x03=\x89\xaf,\xbc\xdf\x1d\xb2<\x16\xe3\t<\xd4U\x92<<b\xcf;\xb9\x9b\x8d=1\xf6\x16<\x10\xb6e<:h\r\xbd\x81\x88F\xbc\x84\xc8=\xbdD3\x8c<\xdd\xd7\xfc;\xcfv]\xbc\x91\x82e\xbcF~\x1c<\x83\xcb\x1c<ex\x18\xbb\xcb\xe0\xbc\xbc\x06<5:\x13G+\xbcG\"5<.\xb3\xc0\xbb\xaaJb\xbcJe\x0b\xbb\x92z\xab:\x9a\xa1\x91\xbcT\xdc\xdc<K\x0c\x03=!\xfe\xf3\xbc\xb0|a\xbb\x0b\xcfv\xbd\xaf\xd8H<\x1ay*=9\x1a\x9e<l\xa78\xbdK\x11\xde<Y\xbb\x11\xbcMW\x13=\x03M\x0c\xbcAF_\xbc\xdd\xd2\xa1\xbb\xad\xde\x069\x93\xcd\xf5\xbb\x82\x85\xe7<\xa1\xd01\xbc\xc7\xf9M\xbc\x1c\x15\x89\xbc\xbb\x8d\x15;\xc7J\x1c\xba@\xf8\xef<t\xd3\xf9<\x8b\xfa\xbc\xba\xa5\x10)<\xeb+\x87\xbb\x8bPf\xbc\xf3WH<\x04\xa0V<\xa3\xc2\xb9<\b\x8a\xa4\xbb\xe96 <K\x11^\xbcN\xaa]<\xf3\xa8\x16\xbd\x96\xba\xa2<d\xd1\xa0:E\xdc\x7f<l\xa7\xb8:\xbaG`\xbc\xd4\x04D\xbc\x91,\xbc\xbb-]\x97;\x00\n\xb6;\x06<5<*sI;\xb0w\x86\xbc\xb5\xb4\x1e\xbd\xf0e@=\xfc\xd1\xf8;\x11\x04U;Je\x8b;\x8aSE\xbd\xa5f\xd2\xbb\xac?\xc9\xbbB\x97-=s\xd6X\xbc7\xcf\r9P\xf0\x92\xba\xd7\xee\x91\xbc\xd0\xc4L\xba[\x06\"\xbd\xfc\xd1x\xbbvoX\xbc\x0cq\x93<\x7f\x8e\x04\xbd\x15\xeb\xc3<s''\xbc\x0fhv\xbbz\x00\x1e=\xe5\xa5\xda<\xa9\xf7\x17\xbb+\x1a\xc1;,\x17\xe2<\xa6\x05\x90\xbc\xb6X\xb7\xbc\xfa(\x05\xbdv\x19\xaf\xbc\xb7\xa6&\xbd\x87\xba\xc5\xbc\x90\xd6\x92<\xb6\x02\x0e=\xe4W\xeb\xbc\xe3\t|<!O\xc2<\xcc1\x8b\xbbY\x11;\xbc\x80:\xd7\xbc}\xf2%\xbcJe\x8b<\x97\xaf\t\xbc\\Yl\xbc\xcb9\xc5\xbb\xcb\x8a\x13=\x9f\x85\xa1;\xae\x82\x9f\xbb\xc2\xbf\x94;\xa7\xb1\xe2\xbc\xc5\xff\x0b<+k\x8f<\x00\xb9\xe7;53/;^\x9f\xa1\xbb\xb8\xfc\xcf\xb9\x9d:\x91\xbc\x1e`\x99<\x00[\x84\xbc\xe0k\xa1\xbb)v(9L\x06\xc5<\xfd\x1f\xe8\xbc\xf4L/<\a9V\xbc\xffjx<G{\xbd\xbc\"L\xe3<\xf5\xa2\xd8<U\xd9}\xbc\x85\x19\x8c\xbb\x82\x85g<n\x9c\x1f\xbc\x99S\xa2;\x86\xbd\xa4\xbc\xe6\xa2{\xbc\xa4\x18\xe3;\xbf+p<\xc5]o<K\x0c\x83\xbbo\xea\x8e\xbc`C:<\x15\x92;=U\xd4\xa2\xbc\xd2\x12\xbc\xbc\xfb\xd4\xd7:\x9a\xa1\x11\xba\x17\xe0\xaa<\xa6\x05\x90:nC\x17<\xdd\xcfB<Gs\x83<\x11\x04\xd5<\x9f\x85\xa1\xbc\x01\xb1\xad\xbbM\xfe\x8a\xbc\xc2f\x8c<{\xfd><\xb4cP\xbb\xac?\xc9\xbc\x176T=4\xe5\xbf<\x04\xa0V<\xfd\x1f\xe8;/\xb0\xe1\xbb\xbb\xe6\x9d\xbc\xd9\x92*\xbd\xb4f/\xbdt$H<~\x96\xbe\xba\x1b\x1dC\xbc\xc2f\x0c= U\x00\xbdY\xc0\xec<\x15\x95\x1a<\x02\x04\xf8<\xeb\xd7\xd9\xbb[\x06\"<\xae\x82\x9f<=\xb0\xbe<" "content" "**Summary:**\n\nThe video introduces Redis as a valuable tool for capturing, managing, and making sense of streaming data, which is data generated continuously from various sources like social networks, website analytics, and IoT devices. Streaming data is represented as a series of events, and Redis provides a data structure specifically for streams, allowing for efficient handling of this data. The video explains the roles of producers and consumers in a distributed application architecture, with producers adding data to streams and consumers processing this data. Redis streams act as append-only logs where each entry has a unique ID and is immutable. The video also demonstrates basic Redis commands for manipulating streams, including `XADD` for adding data, `XRANGE` and `XREVRANGE` for reading data, and `XREAD` for consuming data in real-time. Trimming strategies for managing stream's memory usage are discussed, emphasizing the importance of controlling a stream's growth. The video concludes by encouraging further exploration of Redis streams through Redis University's courses\n\n**Example Questions and Answers:**\n\n1. **What is streaming data?**\n   - Streaming data refers to data that is generated continuously, often from a large number of concurrent sources. It's represented as a series of events or entries, capturing activities from various sources like social networks, website analytics, and IoT devices.\n\n2. **How does Redis handle streaming data?**\n   - Redis provides a data structure called a stream, specifically designed for handling streaming data. This data structure acts like an append-only log, where each entry is immutable and has a unique ID, allowing for efficient data management and retrieval.\n\n3. **What are producers and consumers in the context of Redis streams?**\n   - In a distributed application architecture utilizing Redis streams, producers are the components that write data to a stream, while consumers are processes that read and process this data from the stream. Producers and consumers operate independently, offering a decoupled system architecture.\n\n4. **How can you add an entry to a Redis stream?**\n   - To add an entry to a Redis stream, you can use the `XADD` command. This command requires specifying a stream key and a set of name-value pairs representing the entry. Redis assigns a unique ID to each entry, typically a timestamp-based ID to maintain chronological order.\n\n5. **What is the purpose of the `XTRIM` command in Redis streams?**\n   - The `XTRIM` command is used to manage the memory usage of a Redis stream by trimming its length to a specified maximum number of entries. It removes the oldest entries, ensuring that the stream does not grow indefinitely and consumes an excessive amount of memory.\n\n6. **How can you read entries from a Redis stream in real-time?**\n   - To consume a Redis stream in real-time, the `XREAD` command is used. It can be set to block and wait for new entries if you\xe2\x80\x99ve already read all existing ones, providing an efficient way to continuously receive data without polling. `XREAD` allows consuming data from one or more streams based on the last entry ID you\xe2\x80\x99ve processed.\n\n7. **Can entries in a Redis stream be modified after being added?**\n   - No, once an entry is added to a Redis stream, it is immutable, meaning it cannot be modified. This characteristic ensures the integrity of the data within the stream, as each entry represents a specific event or a point in time.\n\n8. **What happens to Redis stream entries when they are read?**\n   - Reading entries from a Redis stream does not remove them. Entries remain in the stream, available for other consumers to read and process. This allows multiple consumers to independently process the entire dataset in different ways, according to their specific roles or functions." "metadata" "{\"id\":\"Z8qcpXyMAiA\",\"link\":\"https://www.youtube.com/watch?v=Z8qcpXyMAiA\",\"title\":\"Redis Streams Explained\",\"description\":\"Redis Streams allow us to aggregate numerous sources of information into one easily consumable source of truth. Join Justin as we learn about the utility and power of the Redis Streams data structure.\\n\\nLinks: \\nRedis University \xe2\x86\x92 https://university.redislabs.com/\\nRedis University Streams Course \xe2\x86\x92 https://university.redislabs.com/courses/ru202/\\nRedis Labs \xe2\x86\x92 https://www.redislabs.com/\\nRedis Streams Introduction \xe2\x86\x92 https://redis.io/topics/streams\\-intro\\nNeed a Redis cluster now? Sign up for a free Redis Cloud Essentials account \xe2\x86\x92 https://bit.ly/2wasiCa\\n\\nJoin our discord server \xe2\x86\x92 https://discord.gg/redis\",\"thumbnail\":\"https://i.ytimg.com/vi/Z8qcpXyMAiA/maxresdefault.jpg\"}"
"EXEC"
"SADD" "openai-video-vectors" "FQzlq91g7mg"
"SADD" "openai-video-vectors" "I-ohlZXXaxs"
"SADD" "openai-video-vectors" "KUfufrwpBkM"
"SADD" "openai-video-vectors" "LaiQFZ5bXaM"
"SADD" "openai-video-vectors" "SzcpwtLRgyk"
"SADD" "openai-video-vectors" "Z8qcpXyMAiA"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "router.videos.load" "message" "Loading videos..." "meta" "{\"location\":\"router.videos.load\",\"videos\":[\"AJhTduDOVCs\",\"c9Rr--1r6pk\",\"FQzlq91g7mg\",\"I-ohlZXXaxs\",\"KUfufrwpBkM\",\"LaiQFZ5bXaM\",\"SzcpwtLRgyk\",\"Z8qcpXyMAiA\"]}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "transcripts.load.getVideoInfo" "message" "Getting info about videos: [\"AJhTduDOVCs\",\"c9Rr--1r6pk\",\"FQzlq91g7mg\",\"I-ohlZXXaxs\",\"KUfufrwpBkM\",\"LaiQFZ5bXaM\",\"SzcpwtLRgyk\",\"Z8qcpXyMAiA\"]" "meta" "{\"location\":\"transcripts.load.getVideoInfo\"}"
"JSON.SET" "yt-videos:AJhTduDOVCs" "$" "{\"title\":\"Redis and MongoDB: Cache-Aside Pattern\",\"description\":\"The cache-aside pattern is used to load data on demand into a cache for better performance while keeping costs down. This video discusses how to use the cache-aside pattern with Redis and MongoDB.\\n\\nIn this video, Redis' Will Johnston covers:\\n- The cache-aside pattern is for caching on demand\\n- Redis Stack can store master data as JSON documents\\n- Redis is a good way to speed up a MongoDB app\\n\\nDownload the e-book \xe2\x80\x9cThree Design Patterns to Speed Up MEAN and MERN Stack Applications\xe2\x80\x9d: https://redis.com/docs/three-design-patterns-to-speed-up-mean-and-mern-stack-applications/\\n\\nSign up for Redis Cloud for free: https://redis.com/try-free/\\n\\nGet started with redis on any platform or language: https://developer.redis.com/howtos/quick-start \\n\\nCheck out Redis University: https://university.redis.com\\n\\n#Redis #MongoDB #Cache\",\"thumbnail\":\"https://i.ytimg.com/vi/AJhTduDOVCs/maxresdefault.jpg\"}"
"JSON.SET" "yt-videos:c9Rr--1r6pk" "$" "{\"title\":\"NoSQL Data Modeling with Redis: Building 1-to-1 Relationships\",\"description\":\"How does Redis Enterprise's NoSQL database help businesses simplify their 1-to-1 relationship data modeling? Learn more by downloading our free e-book: https://redis.com/docs/8-data-modeling-patterns-in-redis/\\n\\nIf you're a business running a e-commerce store, chances are you're constantly modeling 1-to-1 relationships to curate catalogs of product with not just a product name and price, but supplementary information and necessary details customers look for before making a purchase. As a NoSQL database, Redis provides a simplified way of data modeling with just a few easy patterns. Learn how to embed your data and start building quickly and with ease using Redis Enterprise for your next 1-to-relationship data model build.\\n\\nSign up and use for Redis Cloud for free: https://redis.info/3pyzVea\\n\\n\\\"Do You Really Know Redis?\\\" Download this white paper to learn more: https://redis.com/docs/really-know-redis/\\n\\nFrom the Blog: Introducing Redis OM for Python - https://redis.com/blog/introducing-redis-om-for-python/\\n\\nLearn more about Redis: https://developer.redis.com/\\n\\nSee apps using Redis as a database on Redis Launchpad: https://launchpad.redis.com/\\n\\n#RedisEnterprise #Redis #DataModeling #NoSQL\",\"thumbnail\":\"https://i.ytimg.com/vi/c9Rr--1r6pk/maxresdefault.jpg\"}"
"JSON.SET" "yt-videos:I-ohlZXXaxs" "$" "{\"title\":\"Redis and JSON  Explained (Revisited)\",\"description\":\"Hungry for more Redis and JSON tips and tricks? Check out this video from Redis on how to create and update JSON documents in a Redis Stack instance! Then create secondary search indexes with Redis and Search to query Redis for some delicious results!\\n\\n00:00 Introduction\\n00:32 Why we use Redis Stack\\n00:44 Intro to the use case\\n01:22 JSON.SET truck:42 - create and store a vendor JSON object\\n02:00 JSON.SET location:23 - create and store a location JSON object\\n02:21 JSON.SET event:11 - create and store an event JSON object\\n02:47 JSON.ARRAPPEND - ad an element to an existing JSON array\\n03:11 JSON.SET - adding to an existing JSON document\\n03:52 Redis Search & JSON\\n04:46 FT.CREATE - creating a search index for \\\"truck:\\\" JSON documents\\n05:55 FT.SEARCH - query for text within a search index\\n06:40 FT.SEARCH - query for TAG words within a search index\\n07:10 FT.CREATE - creating a search index for \\\"event:\\\" JSON. documents\\n07:51 FT.SEARCH - query for numeric range within a search index\\n08:26 Conclusion\\n\\nLinks: \\nRU204: Storing, Querying, and Indexing JSON at Speed: https://university.redis.com/courses/ru204/\\nRedis University \xe2\x86\x92 https://university.redis.com/\\nRedis \xe2\x86\x92 https://www.redis.com/\\nRedis Stack \xe2\x86\x92 https://redis.io/docs/stack/\\nRedis and JSON \xe2\x86\x92 https://redis.io/docs/stack/json/\\nRedis and Search \xe2\x86\x92 https://redis.io/docs/stack/search/\\nNeed a Redis Cloud now? Sign up for a free Redis Cloud Essentials account \xe2\x86\x92 https://bit.ly/3xdTyMR\\n\\nJoin our discord server \xe2\x86\x92 https://discord.gg/redis\",\"thumbnail\":\"https://i.ytimg.com/vi/I-ohlZXXaxs/maxresdefault.jpg\"}"
"JSON.SET" "yt-videos:SzcpwtLRgyk" "$" "{\"title\":\"RedisTimeSeries Explained\",\"description\":\"Have you ever tried to wrangle data via timestamps but never had the time to do so? Join Justin as we take a stroll down 'in-memory' lane with the RedisTimeSeries module.  The RedisTimeSeries module, part of Redis Stack, lets the developer create time series data structures within Redis with the speed you've come to love from Redis. Redis Stack is an extension of Redis that adds modern data models and processing engines to provide a complete developer experience.\\n\\nIn addition to all of the features of OSS Redis, Redis stack supports:\\n- Queryable JSON documents\\n- Full-text search\\n- Time series data (ingestion & querying)\\n- Graph data models with the Cypher query language\\n- Probabilistic data structures\\n\\n00:00 Introduction\\n00:25 What is RedisTimeSeries?\\n00:50 Example explanation\\n01:27 TS.CREATE - create a time series object\\n03:01 TS.ADD - add to a time series object\\n03:31 TS.ALTER - update a time series object's options\\n04:00 TS.RANGE - retrieve a range of a time series' values\\n06:06 TS.CREATERULE - create rule for a time series object\\n07:48 TS.QUERYINDEX - query labels across time series objects\\n08:29 Conclusion\\n\\nLinks: \\nRedis University \xe2\x86\x92 https://university.redis.com/\\nRedis \xe2\x86\x92 https://www.redis.com/\\nRedisTimeSeries \xe2\x86\x92 https://redis.io/docs/stack/timeseries/\\nNeed a Redis Cloud  now? Sign up for a free Redis Cloud Essentials account \xe2\x86\x92 https://bit.ly/3xdTyMR\\n\\nJoin our discord server \xe2\x86\x92 https://discord.gg/redis\",\"thumbnail\":\"https://i.ytimg.com/vi/SzcpwtLRgyk/maxresdefault.jpg\"}"
"JSON.SET" "yt-videos:Z8qcpXyMAiA" "$" "{\"title\":\"Redis Streams Explained\",\"description\":\"Redis Streams allow us to aggregate numerous sources of information into one easily consumable source of truth. Join Justin as we learn about the utility and power of the Redis Streams data structure.\\n\\nLinks: \\nRedis University \xe2\x86\x92 https://university.redislabs.com/\\nRedis University Streams Course \xe2\x86\x92 https://university.redislabs.com/courses/ru202/\\nRedis Labs \xe2\x86\x92 https://www.redislabs.com/\\nRedis Streams Introduction \xe2\x86\x92 https://redis.io/topics/streams-intro\\nNeed a Redis cluster now? Sign up for a free Redis Cloud Essentials account \xe2\x86\x92 https://bit.ly/2wasiCa\\n\\nJoin our discord server \xe2\x86\x92 https://discord.gg/redis\",\"thumbnail\":\"https://i.ytimg.com/vi/Z8qcpXyMAiA/maxresdefault.jpg\"}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "transcripts.load.getTranscript" "message" "Getting transcript for https://www.youtube.com/watch?v=AJhTduDOVCs" "meta" "{\"location\":\"transcripts.load.getTranscript\"}"
"SET" "transcripts:AJhTduDOVCs" "have you ever been in a situation where your database queries are slow and you need to speed\nthem up while keeping costs down I'd like you to imagine for a moment you've built a movie\nstreaming platform that is growing quickly when you started you decided to use mongodb to store\nand retrieve movies this worked really well for a while and now things are starting to break down\nyou've already attempted to optimize your queries to mongodb and you are able to squeak out a little\nmore performance but it wasn't enough you know you need to Cache your queries in redis but you want\nto make sure you keep costs down this is where the cache aside pattern comes in handy the goal of the\ncache aside pattern is to set up optimal caching for data retrieval on demand so rather than\nsyncing your entire database with redis from the start you'll fill redis as your data is requested\nwhen an application requests data you first see if that data exists in redis if it exists you can\nquickly return it if it doesn't exist you fetch the data from your database and store it in redis\nfor future requests then return the data to the application let's see how you might implement the\ncache aside pattern in code here I'm using node.js with the mongodb client and the redisome library\nfirst I'll create a function to create a hash key based on the search criteria this will be\nused to store and retrieve Keys from redis next I'll create a function to find the top movies\nin it I'll get my [ __ ] and redis connections then create my search criteria for now I'm\nlooking for movies in English that have an IMDb rating greater than or equal to 8.5\nnow I need to get the hash key to use to search redis\nif I find a value in redis then I log the cache hit and return the value if I don't find the\nvalue in redis I log a cache Miss and then search mongodb for the movies finally I store the results\nfrom mongodb in redis making sure to expire them after 30 seconds and return the results\nlet's run this function twice to see if we get the expected result\nwhen I run the script you can see I first get a cache Miss then a subsequent cash hit\nthis is the expected result since we started with nothing in our redis database\nin redis Insight you'll see our stored string with the expiration date when I click the value you can\nsee the stringified result for mongodb even though this is a string I can inform redis Insight that\nI'm looking at Json and it will display it in a format that is easier to read if you plan to use\nthe cache aside pattern and store your queries in redis as strings one thing you'll need to decide\non your own is how frequently you want to expire the data you don't want the expiration time to be\ntoo short but if it's too long it can lead to data consistency problems one way to solve the\ndata consistency issue is to use another pattern called the right behind or right through pattern\nthis is something that I will discuss in a future video however another way to mitigate some of the\ndata consistency issues is to get more granular with how you store and retrieve data from redis\nwith redis stack you can Store and search Json documents in redis so we can rewrite our code\nto Store and search redis just like we do with mongodb let's look at what that might look like\nhere I'm using node.js like before only this time I'm creating a movie collection\nin redis using redisome each movie will have the same fields that I'm storing in mongodb\nto find the top movies I first get my mongodb and redis connections then I get the redis movie\nRepository next I search the repository for movies in English with an IMDb rating greater\nthan or equal to 8.5 the result will always be an array so for my purposes I'm comfortable\nsaying that if the array is not empty then it's a cash hit otherwise it's a cache Miss\nfor cash misses I get the results from mongodb then I iterate over the results\nand store each value in redis you see here that I didn't set an expiration on my data\nfor this to work you'll need to determine the best time to delete the data from the cache\ntypically what people do is delete the data in redis whenever they delete or update it in mongodb\nlet's run the fine top movies function twice and see if we get the expected results\nwhen I run the script I first get a cache Miss then a subsequent cash hit\nthis is expected since we started with nothing in our redis database\nlooking at our data in redis Insight you can see we now have a collection of movie\nJson documents instead of before where we only had a single key with a string value\nnote that there is no expiration on the movie documents this is because our application will\ntake care of deleting and updating these documents whenever they change in mongodb\nif I click on a movie document you can see that it is storing all of the movie information that\nwe defined in our schema remember the cache aside pattern is useful when you need to query data\nfrequently and want to fill your cache on demand to save on cost if you're interested in learning\nmore about storing and searching Master data in redis check out our ebook that covers three\ndesign patterns to speed up mirn applications the link is in the description down below\nforeign [Music]"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "transcripts.load.getTranscript" "message" "Getting transcript for https://www.youtube.com/watch?v=c9Rr--1r6pk" "meta" "{\"location\":\"transcripts.load.getTranscript\"}"
"SET" "transcripts:c9Rr--1r6pk" "imagine you're creating a retail app that sells electronics you'll first create a list view that\nshows all the products and then a detailed view that shows more information about each product\nthere's a one-to-one relationship between each product in the list view that shows\nthe name image and price and the detailed view of the product where you show more information\nsuch as multiple images description manufacturer dimensions weight and so on\nin a relational database you might have a table called products and each row in the table would\ncontain enough information to populate the list view then you'll have another table called\nproduct details that contains more information used to populate the detailed view in redis\nsimilar to a relational database you can create a collection called products and another collection\ncalled product details here i've imported the redisome library and i'm modeling the products\ncollection with fields like name image and price meant for the product list view\ni also have a product details collection with product id description manufacturer\ndimensions weight and a list of images with redis ohm we can index it like this\nand here's how you can query the list view lastly here's how you query the detailed view but you can\nimprove this by simply embedding the product details within the products collection then\nwhen you query you only query for the fields you need for a particular view this way you can easily\nkeep all your data in one place this is called the embedded pattern here are the new models using the\nembedded pattern here's how we can index it and here's how we can query the list view note that\nwe're returning three fields name image and price lastly here's how we can query the detail view\nlooking at our database in redis insight what you get when you use the embedded pattern\nis all of your data in one place so we have our details embedded within the product collection\nyou"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "transcripts.load.getTranscript" "message" "Getting transcript for https://www.youtube.com/watch?v=FQzlq91g7mg" "meta" "{\"location\":\"transcripts.load.getTranscript\"}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "transcripts.load.getTranscript" "message" "Getting transcript for https://www.youtube.com/watch?v=I-ohlZXXaxs" "meta" "{\"location\":\"transcripts.load.getTranscript\"}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "transcripts.load.getTranscript" "message" "Getting transcript for https://www.youtube.com/watch?v=KUfufrwpBkM" "meta" "{\"location\":\"transcripts.load.getTranscript\"}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "transcripts.load.getTranscript" "message" "Getting transcript for https://www.youtube.com/watch?v=LaiQFZ5bXaM" "meta" "{\"location\":\"transcripts.load.getTranscript\"}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "transcripts.load.getTranscript" "message" "Getting transcript for https://www.youtube.com/watch?v=SzcpwtLRgyk" "meta" "{\"location\":\"transcripts.load.getTranscript\"}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "transcripts.load.getTranscript" "message" "Getting transcript for https://www.youtube.com/watch?v=Z8qcpXyMAiA" "meta" "{\"location\":\"transcripts.load.getTranscript\"}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "google.summarize.docs" "message" "Summarizing https://www.youtube.com/watch?v=AJhTduDOVCs" "meta" "{\"id\":\"AJhTduDOVCs\",\"link\":\"https://www.youtube.com/watch?v=AJhTduDOVCs\",\"title\":\"Redis and MongoDB: Cache-Aside Pattern\",\"description\":\"The cache-aside pattern is used to load data on demand into a cache for better performance while keeping costs down. This video discusses how to use the cache-aside pattern with Redis and MongoDB.\\n\\nIn this video, Redis' Will Johnston covers:\\n- The cache-aside pattern is for caching on demand\\n- Redis Stack can store master data as JSON documents\\n- Redis is a good way to speed up a MongoDB app\\n\\nDownload the e-book \xe2\x80\x9cThree Design Patterns to Speed Up MEAN and MERN Stack Applications\xe2\x80\x9d: https://redis.com/docs/three-design-patterns-to-speed-up-mean-and-mern-stack-applications/\\n\\nSign up for Redis Cloud for free: https://redis.com/try-free/\\n\\nGet started with redis on any platform or language: https://developer.redis.com/howtos/quick-start \\n\\nCheck out Redis University: https://university.redis.com\\n\\n#Redis #MongoDB #Cache\",\"thumbnail\":\"https://i.ytimg.com/vi/AJhTduDOVCs/maxresdefault.jpg\",\"location\":\"google.summarize.docs\"}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "google.summarize.docs" "message" "Summarized https://www.youtube.com/watch?v=AJhTduDOVCs:\n **Summary:**\n\nThe video explains the cache aside pattern. This caching strategy involves checking if the requested data exists in the cache (Redis) before fetching it from the database (MongoDB). If the data is in the cache, it's returned immediately; otherwise, it's fetched from the database, added to the cache, and then returned to the application. This pattern helps improve the performance of data retrieval operations by reducing the load on the database and improving response times.\n\n**Example Questions:**\n\n1. What is the goal of the cache aside pattern?\n   * To set up optimal caching for data retrieval on demand.\n\n\n2. When should the cache aside pattern be used?\n   * When data needs to be queried frequently, and filling the cache on demand can save costs.\n\n\n3. What are the steps involved in implementing the cache aside pattern?\n   1. Create a hash key based on the search criteria.\n   2. Check if the data exists in the cache.\n   3. If the data exists, return it.\n   4. If the data doesn't exist, fetch it from the database.\n   5. Store the data in the cache.\n   6. Return the data to the application.\n\n\n4. How does the cache aside pattern improve performance?\n   * By reducing the number of requests to the database, it improves response times and reduces the load on the database.\n\n\n5. How can data consistency issues be mitigated when using the cache aside pattern?\n   * By using another pattern called the right behind or right through pattern, or by getting more granular with how data is stored and retrieved from Redis.\n\n\n6. What is the purpose of the hash key in the cache aside pattern?\n   * To uniquely identify the data in the cache.\n\n\n7. What are some considerations when choosing an expiration time for cached data?\n   * The balance between data freshness and the risk of data inconsistency.\n\n\n8. How does storing Json documents in Redis differ from storing strings?\n   * Json documents allow for more structured and flexible data storage and retrieval.\n\n\n9. What are some alternatives to the cache aside pattern for caching data?\n   * The write-through pattern and the write-back pattern.\n\n\n10. Can the cache aside pattern be used with other databases besides MongoDB?\n    * Yes, it can be used with any database that supports caching." "meta" "{\"summary\":\"**Summary:**\\n\\nThe video explains the cache aside pattern. This caching strategy involves checking if the requested data exists in the cache (Redis) before fetching it from the database (MongoDB). If the data is in the cache, it's returned immediately; otherwise, it's fetched from the database, added to the cache, and then returned to the application. This pattern helps improve the performance of data retrieval operations by reducing the load on the database and improving response times.\\n\\n**Example Questions:**\\n\\n1. What is the goal of the cache aside pattern?\\n   * To set up optimal caching for data retrieval on demand.\\n\\n\\n2. When should the cache aside pattern be used?\\n   * When data needs to be queried frequently, and filling the cache on demand can save costs.\\n\\n\\n3. What are the steps involved in implementing the cache aside pattern?\\n   1. Create a hash key based on the search criteria.\\n   2. Check if the data exists in the cache.\\n   3. If the data exists, return it.\\n   4. If the data doesn't exist, fetch it from the database.\\n   5. Store the data in the cache.\\n   6. Return the data to the application.\\n\\n\\n4. How does the cache aside pattern improve performance?\\n   * By reducing the number of requests to the database, it improves response times and reduces the load on the database.\\n\\n\\n5. How can data consistency issues be mitigated when using the cache aside pattern?\\n   * By using another pattern called the right behind or right through pattern, or by getting more granular with how data is stored and retrieved from Redis.\\n\\n\\n6. What is the purpose of the hash key in the cache aside pattern?\\n   * To uniquely identify the data in the cache.\\n\\n\\n7. What are some considerations when choosing an expiration time for cached data?\\n   * The balance between data freshness and the risk of data inconsistency.\\n\\n\\n8. How does storing Json documents in Redis differ from storing strings?\\n   * Json documents allow for more structured and flexible data storage and retrieval.\\n\\n\\n9. What are some alternatives to the cache aside pattern for caching data?\\n   * The write-through pattern and the write-back pattern.\\n\\n\\n10. Can the cache aside pattern be used with other databases besides MongoDB?\\n    * Yes, it can be used with any database that supports caching.\",\"location\":\"google.summarize.docs\"}"
"SET" "google-video-summary:AJhTduDOVCs" "**Summary:**\n\nThe video explains the cache aside pattern. This caching strategy involves checking if the requested data exists in the cache (Redis) before fetching it from the database (MongoDB). If the data is in the cache, it's returned immediately; otherwise, it's fetched from the database, added to the cache, and then returned to the application. This pattern helps improve the performance of data retrieval operations by reducing the load on the database and improving response times.\n\n**Example Questions:**\n\n1. What is the goal of the cache aside pattern?\n   * To set up optimal caching for data retrieval on demand.\n\n\n2. When should the cache aside pattern be used?\n   * When data needs to be queried frequently, and filling the cache on demand can save costs.\n\n\n3. What are the steps involved in implementing the cache aside pattern?\n   1. Create a hash key based on the search criteria.\n   2. Check if the data exists in the cache.\n   3. If the data exists, return it.\n   4. If the data doesn't exist, fetch it from the database.\n   5. Store the data in the cache.\n   6. Return the data to the application.\n\n\n4. How does the cache aside pattern improve performance?\n   * By reducing the number of requests to the database, it improves response times and reduces the load on the database.\n\n\n5. How can data consistency issues be mitigated when using the cache aside pattern?\n   * By using another pattern called the right behind or right through pattern, or by getting more granular with how data is stored and retrieved from Redis.\n\n\n6. What is the purpose of the hash key in the cache aside pattern?\n   * To uniquely identify the data in the cache.\n\n\n7. What are some considerations when choosing an expiration time for cached data?\n   * The balance between data freshness and the risk of data inconsistency.\n\n\n8. How does storing Json documents in Redis differ from storing strings?\n   * Json documents allow for more structured and flexible data storage and retrieval.\n\n\n9. What are some alternatives to the cache aside pattern for caching data?\n   * The write-through pattern and the write-back pattern.\n\n\n10. Can the cache aside pattern be used with other databases besides MongoDB?\n    * Yes, it can be used with any database that supports caching."
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "google.summarize.docs" "message" "Summarizing https://www.youtube.com/watch?v=c9Rr--1r6pk" "meta" "{\"id\":\"c9Rr--1r6pk\",\"link\":\"https://www.youtube.com/watch?v=c9Rr--1r6pk\",\"title\":\"NoSQL Data Modeling with Redis: Building 1-to-1 Relationships\",\"description\":\"How does Redis Enterprise's NoSQL database help businesses simplify their 1-to-1 relationship data modeling? Learn more by downloading our free e-book: https://redis.com/docs/8-data-modeling-patterns-in-redis/\\n\\nIf you're a business running a e-commerce store, chances are you're constantly modeling 1-to-1 relationships to curate catalogs of product with not just a product name and price, but supplementary information and necessary details customers look for before making a purchase. As a NoSQL database, Redis provides a simplified way of data modeling with just a few easy patterns. Learn how to embed your data and start building quickly and with ease using Redis Enterprise for your next 1-to-relationship data model build.\\n\\nSign up and use for Redis Cloud for free: https://redis.info/3pyzVea\\n\\n\\\"Do You Really Know Redis?\\\" Download this white paper to learn more: https://redis.com/docs/really-know-redis/\\n\\nFrom the Blog: Introducing Redis OM for Python - https://redis.com/blog/introducing-redis-om-for-python/\\n\\nLearn more about Redis: https://developer.redis.com/\\n\\nSee apps using Redis as a database on Redis Launchpad: https://launchpad.redis.com/\\n\\n#RedisEnterprise #Redis #DataModeling #NoSQL\",\"thumbnail\":\"https://i.ytimg.com/vi/c9Rr--1r6pk/maxresdefault.jpg\",\"location\":\"google.summarize.docs\"}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "google.summarize.docs" "message" "Summarized https://www.youtube.com/watch?v=c9Rr--1r6pk:\n **Summary:**\nThe video explains how to model one-to-one relationships in Redis, specifically in the context of designing a retail app that sells electronics. The app has two views: a list view that shows information like product name, image, and price, and a detailed view that shows more information like multiple images, description, manufacturer, dimensions, and weight. The video demonstrates how to model this relationship using the \"embedded pattern\" in Redis, where the product details are embedded within the product collection, making it easier to query and keep all data in one place.\n\n**Example Questions:**\n\n1. What are the two views in the retail app?\nAnswer: A list view that shows product name, image, and price, and a detailed view that shows more information like multiple images, description, manufacturer, dimensions, and weight.\n\n\n2. How is the one-to-one relationship between products and product details modeled in Redis?\nAnswer: Using the \"embedded pattern,\" where the product details are embedded within the product collection.\n\n\n3. How does the embedded pattern benefit data modeling in Redis?\nAnswer: It simplifies querying and keeps all data in one place, making it easier to manage and retrieve information.\n\n\n4. What fields are indexed in the products collection?\nAnswer: name, image, price.\n\n\n5. How can you query the list view in Redis using the embedded pattern?\nAnswer: You can use a query like \"HGETALL product_id\" to retrieve all fields for a specific product, including the embedded product details.\n\n\n6. How does the embedded pattern improve query performance?\nAnswer: By embedding product details within the product collection, you can query all necessary fields in one go, reducing the number of round trips to the database and improving performance.\n\n\n7. What is the advantage of keeping all data in one place using the embedded pattern?\nAnswer: It simplifies data management and reduces the complexity of maintaining relationships between different collections.\n\n\n8. How can you ensure that the embedded product details are always up to date with the product information?\nAnswer: You can use triggers or hooks to automatically update the embedded product details whenever the product information changes.\n\n\n9. Are there any limitations to using the embedded pattern in Redis?\nAnswer: The embedded pattern can lead to larger documents and increased memory usage, especially for products with a lot of details.\n\n\n10. Can you combine the embedded pattern with other data modeling techniques in Redis?\nAnswer: Yes, you can combine the embedded pattern with other techniques like sharding or clustering to handle large datasets and improve scalability." "meta" "{\"summary\":\"**Summary:**\\nThe video explains how to model one-to-one relationships in Redis, specifically in the context of designing a retail app that sells electronics. The app has two views: a list view that shows information like product name, image, and price, and a detailed view that shows more information like multiple images, description, manufacturer, dimensions, and weight. The video demonstrates how to model this relationship using the \\\"embedded pattern\\\" in Redis, where the product details are embedded within the product collection, making it easier to query and keep all data in one place.\\n\\n**Example Questions:**\\n\\n1. What are the two views in the retail app?\\nAnswer: A list view that shows product name, image, and price, and a detailed view that shows more information like multiple images, description, manufacturer, dimensions, and weight.\\n\\n\\n2. How is the one-to-one relationship between products and product details modeled in Redis?\\nAnswer: Using the \\\"embedded pattern,\\\" where the product details are embedded within the product collection.\\n\\n\\n3. How does the embedded pattern benefit data modeling in Redis?\\nAnswer: It simplifies querying and keeps all data in one place, making it easier to manage and retrieve information.\\n\\n\\n4. What fields are indexed in the products collection?\\nAnswer: name, image, price.\\n\\n\\n5. How can you query the list view in Redis using the embedded pattern?\\nAnswer: You can use a query like \\\"HGETALL product_id\\\" to retrieve all fields for a specific product, including the embedded product details.\\n\\n\\n6. How does the embedded pattern improve query performance?\\nAnswer: By embedding product details within the product collection, you can query all necessary fields in one go, reducing the number of round trips to the database and improving performance.\\n\\n\\n7. What is the advantage of keeping all data in one place using the embedded pattern?\\nAnswer: It simplifies data management and reduces the complexity of maintaining relationships between different collections.\\n\\n\\n8. How can you ensure that the embedded product details are always up to date with the product information?\\nAnswer: You can use triggers or hooks to automatically update the embedded product details whenever the product information changes.\\n\\n\\n9. Are there any limitations to using the embedded pattern in Redis?\\nAnswer: The embedded pattern can lead to larger documents and increased memory usage, especially for products with a lot of details.\\n\\n\\n10. Can you combine the embedded pattern with other data modeling techniques in Redis?\\nAnswer: Yes, you can combine the embedded pattern with other techniques like sharding or clustering to handle large datasets and improve scalability.\",\"location\":\"google.summarize.docs\"}"
"SET" "google-video-summary:c9Rr--1r6pk" "**Summary:**\nThe video explains how to model one-to-one relationships in Redis, specifically in the context of designing a retail app that sells electronics. The app has two views: a list view that shows information like product name, image, and price, and a detailed view that shows more information like multiple images, description, manufacturer, dimensions, and weight. The video demonstrates how to model this relationship using the \"embedded pattern\" in Redis, where the product details are embedded within the product collection, making it easier to query and keep all data in one place.\n\n**Example Questions:**\n\n1. What are the two views in the retail app?\nAnswer: A list view that shows product name, image, and price, and a detailed view that shows more information like multiple images, description, manufacturer, dimensions, and weight.\n\n\n2. How is the one-to-one relationship between products and product details modeled in Redis?\nAnswer: Using the \"embedded pattern,\" where the product details are embedded within the product collection.\n\n\n3. How does the embedded pattern benefit data modeling in Redis?\nAnswer: It simplifies querying and keeps all data in one place, making it easier to manage and retrieve information.\n\n\n4. What fields are indexed in the products collection?\nAnswer: name, image, price.\n\n\n5. How can you query the list view in Redis using the embedded pattern?\nAnswer: You can use a query like \"HGETALL product_id\" to retrieve all fields for a specific product, including the embedded product details.\n\n\n6. How does the embedded pattern improve query performance?\nAnswer: By embedding product details within the product collection, you can query all necessary fields in one go, reducing the number of round trips to the database and improving performance.\n\n\n7. What is the advantage of keeping all data in one place using the embedded pattern?\nAnswer: It simplifies data management and reduces the complexity of maintaining relationships between different collections.\n\n\n8. How can you ensure that the embedded product details are always up to date with the product information?\nAnswer: You can use triggers or hooks to automatically update the embedded product details whenever the product information changes.\n\n\n9. Are there any limitations to using the embedded pattern in Redis?\nAnswer: The embedded pattern can lead to larger documents and increased memory usage, especially for products with a lot of details.\n\n\n10. Can you combine the embedded pattern with other data modeling techniques in Redis?\nAnswer: Yes, you can combine the embedded pattern with other techniques like sharding or clustering to handle large datasets and improve scalability."
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "google.summarize.docs" "message" "Summarizing https://www.youtube.com/watch?v=FQzlq91g7mg" "meta" "{\"id\":\"FQzlq91g7mg\",\"link\":\"https://www.youtube.com/watch?v=FQzlq91g7mg\",\"title\":\"Redis + MySQL in 60 Seconds\",\"description\":\"What are the possibilities for MySQL when integrating with the real-time power of Redis? Try Redis Cloud for free: https://redis.com/try-free/\\\\n\\\\nMySQL is open source, free, and can be fast when working on a relational database, but to handle modern use cases, your MySQL will need a boost of real-time performance - the type Redis Enterprise can provide. MySQL can be difficult to scale and lacks the modern features necessary to quickly operate complex queries. Enable your MySQL applications with the real-time performance power of Redis.\\\\n\\\\nFrom the blog: https://redis.com/blog/3-reasons-your-mysql-db-needs-redis/\\\\n\\\\nDownload our MySQL Solution Brief: https://redis.com/docs/modernize-your-mysql-database-with-redis-enterprise/\\\\n\\\\nExplore Redis + MySQL: https://redis.com/comparisons/redis-enterprise-and-mysql/\\\\n\\\\nTry Redis Enterprise Cloud for free: https://redis.com/try-free/\\\\n\\\\n#MySQL #SQL #Redis\",\"thumbnail\":\"https://i.ytimg.com/vi/FQzlq91g7mg/maxresdefault.jpg\",\"location\":\"google.summarize.docs\"}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "google.summarize.docs" "message" "Summarizing https://www.youtube.com/watch?v=I-ohlZXXaxs" "meta" "{\"id\":\"I-ohlZXXaxs\",\"link\":\"https://www.youtube.com/watch?v=I-ohlZXXaxs\",\"title\":\"Redis and JSON  Explained (Revisited)\",\"description\":\"Hungry for more Redis and JSON tips and tricks? Check out this video from Redis on how to create and update JSON documents in a Redis Stack instance! Then create secondary search indexes with Redis and Search to query Redis for some delicious results!\\n\\n00:00 Introduction\\n00:32 Why we use Redis Stack\\n00:44 Intro to the use case\\n01:22 JSON.SET truck:42 - create and store a vendor JSON object\\n02:00 JSON.SET location:23 - create and store a location JSON object\\n02:21 JSON.SET event:11 - create and store an event JSON object\\n02:47 JSON.ARRAPPEND - ad an element to an existing JSON array\\n03:11 JSON.SET - adding to an existing JSON document\\n03:52 Redis Search & JSON\\n04:46 FT.CREATE - creating a search index for \\\"truck:\\\" JSON documents\\n05:55 FT.SEARCH - query for text within a search index\\n06:40 FT.SEARCH - query for TAG words within a search index\\n07:10 FT.CREATE - creating a search index for \\\"event:\\\" JSON. documents\\n07:51 FT.SEARCH - query for numeric range within a search index\\n08:26 Conclusion\\n\\nLinks: \\nRU204: Storing, Querying, and Indexing JSON at Speed: https://university.redis.com/courses/ru204/\\nRedis University \xe2\x86\x92 https://university.redis.com/\\nRedis \xe2\x86\x92 https://www.redis.com/\\nRedis Stack \xe2\x86\x92 https://redis.io/docs/stack/\\nRedis and JSON \xe2\x86\x92 https://redis.io/docs/stack/json/\\nRedis and Search \xe2\x86\x92 https://redis.io/docs/stack/search/\\nNeed a Redis Cloud now? Sign up for a free Redis Cloud Essentials account \xe2\x86\x92 https://bit.ly/3xdTyMR\\n\\nJoin our discord server \xe2\x86\x92 https://discord.gg/redis\",\"thumbnail\":\"https://i.ytimg.com/vi/I-ohlZXXaxs/maxresdefault.jpg\",\"location\":\"google.summarize.docs\"}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "google.summarize.docs" "message" "Summarizing https://www.youtube.com/watch?v=KUfufrwpBkM" "meta" "{\"id\":\"KUfufrwpBkM\",\"link\":\"https://www.youtube.com/watch?v=KUfufrwpBkM\",\"title\":\"Redis Stack Workshop: Redis Stack OM Library for Node.js\",\"description\":\"Join us on April 13th at 5:30pm GMT for the Redis Stack OM library for Node.js workshop with Redis Developer Advocate Guy Royse. \\\\n\\\\nTune in to follow as Guy demonstrates how to create applications using Redis Stack and Node.js. Also, see how to store your data using Redis OM and store data using RedisJSON. Follow along with the sample application built with Express, which is available on GitHub. Guy will be on chat to answer any questions. Stay tuned!\\\\n\\\\nSource code for the demo application: https://github.com/redis-developer/express-redis-om-workshop\\\\nRedis OM Client for Node.js: https://github.com/redis/redis-om-node\\\\n\\\\nFrom the blog: https://redis.com/blog/introducing-redis-stack/\\\\nDiscover Redis Stack: https://redis.io/docs/stack/\\\\n\\\\n#Redis #RedisStack #NodeJS #RedisOM\",\"thumbnail\":\"https://i.ytimg.com/vi/KUfufrwpBkM/maxresdefault.jpg\",\"location\":\"google.summarize.docs\"}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "google.summarize.docs" "message" "Summarizing https://www.youtube.com/watch?v=LaiQFZ5bXaM" "meta" "{\"id\":\"LaiQFZ5bXaM\",\"link\":\"https://www.youtube.com/watch?v=LaiQFZ5bXaM\",\"title\":\"Redis Stack Crash Course: How to Build Apps with Superpowers\",\"description\":\"Redis Stack turns Redis into a multi-model database, enabling you to build rich real-time applications with Redis as a primary database. Explore Redis Stack - http://redis.info/3Lq9gbF\\\\n\\\\nRedis Stack consolidates the capabilities of the leading Redis modules into a single product, making it easy for developers to build modern, real-time applications with the speed and stability of Redis.\\\\n\\\\nRedis Stack is free and unifies the leading Redis modules in a single product. This makes it easy to start building with our Redis-based search, document, graph, and time series capabilities.\\\\n\\\\nRedis Stack is a suite of three components:\\\\n\\\\n- Redis Stack Server combines open source Redis with RediSearch, RedisJSON, RedisGraph, RedisTimeSeries and RedisBloom\\\\n\\\\n- RedisInsight is a powerful tool for visualizing and optimizing Redis data, making real-time application development easier and more fun than ever before\\\\n\\\\n- The Redis Stack Client SDK includes the leading official Redis clients in Java, JavaScript, and Python.  These clients also include our new suite of object mapping libraries which offer developer-friendly abstractions that get you productive with just a few lines of code. Known as Redis OM for .NET, Node.js, Java, and Python, these libraries also make it easier than ever to integrate with major application frameworks such as Spring, ASP.NET Core, FastAPI, and Express.\\\\n\\\\nSign up for Redis Cloud for free using code TIGER200: https://redis.info/3pyzVea\\\\n\\\\nGet the Source Code for This Video: https://redis.info/36PTesO\\\\n\\\\nFrom the Blog: https://redis.com/blog/introducing-redis-stack/\\\\n\\\\nLearn more about Redis Stack: http://redis.info/3Lq9gbF\\\\n\\\\n#RedisStack #Redis #RedisEnterprise #RealTimeData\",\"thumbnail\":\"https://i.ytimg.com/vi/LaiQFZ5bXaM/maxresdefault.jpg\",\"location\":\"google.summarize.docs\"}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "google.summarize.docs" "message" "Summarizing https://www.youtube.com/watch?v=SzcpwtLRgyk" "meta" "{\"id\":\"SzcpwtLRgyk\",\"link\":\"https://www.youtube.com/watch?v=SzcpwtLRgyk\",\"title\":\"RedisTimeSeries Explained\",\"description\":\"Have you ever tried to wrangle data via timestamps but never had the time to do so? Join Justin as we take a stroll down 'in-memory' lane with the RedisTimeSeries module.  The RedisTimeSeries module, part of Redis Stack, lets the developer create time series data structures within Redis with the speed you've come to love from Redis. Redis Stack is an extension of Redis that adds modern data models and processing engines to provide a complete developer experience.\\n\\nIn addition to all of the features of OSS Redis, Redis stack supports:\\n- Queryable JSON documents\\n- Full-text search\\n- Time series data (ingestion & querying)\\n- Graph data models with the Cypher query language\\n- Probabilistic data structures\\n\\n00:00 Introduction\\n00:25 What is RedisTimeSeries?\\n00:50 Example explanation\\n01:27 TS.CREATE - create a time series object\\n03:01 TS.ADD - add to a time series object\\n03:31 TS.ALTER - update a time series object's options\\n04:00 TS.RANGE - retrieve a range of a time series' values\\n06:06 TS.CREATERULE - create rule for a time series object\\n07:48 TS.QUERYINDEX - query labels across time series objects\\n08:29 Conclusion\\n\\nLinks: \\nRedis University \xe2\x86\x92 https://university.redis.com/\\nRedis \xe2\x86\x92 https://www.redis.com/\\nRedisTimeSeries \xe2\x86\x92 https://redis.io/docs/stack/timeseries/\\nNeed a Redis Cloud  now? Sign up for a free Redis Cloud Essentials account \xe2\x86\x92 https://bit.ly/3xdTyMR\\n\\nJoin our discord server \xe2\x86\x92 https://discord.gg/redis\",\"thumbnail\":\"https://i.ytimg.com/vi/SzcpwtLRgyk/maxresdefault.jpg\",\"location\":\"google.summarize.docs\"}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "google.summarize.docs" "message" "Summarizing https://www.youtube.com/watch?v=Z8qcpXyMAiA" "meta" "{\"id\":\"Z8qcpXyMAiA\",\"link\":\"https://www.youtube.com/watch?v=Z8qcpXyMAiA\",\"title\":\"Redis Streams Explained\",\"description\":\"Redis Streams allow us to aggregate numerous sources of information into one easily consumable source of truth. Join Justin as we learn about the utility and power of the Redis Streams data structure.\\n\\nLinks: \\nRedis University \xe2\x86\x92 https://university.redislabs.com/\\nRedis University Streams Course \xe2\x86\x92 https://university.redislabs.com/courses/ru202/\\nRedis Labs \xe2\x86\x92 https://www.redislabs.com/\\nRedis Streams Introduction \xe2\x86\x92 https://redis.io/topics/streams-intro\\nNeed a Redis cluster now? Sign up for a free Redis Cloud Essentials account \xe2\x86\x92 https://bit.ly/2wasiCa\\n\\nJoin our discord server \xe2\x86\x92 https://discord.gg/redis\",\"thumbnail\":\"https://i.ytimg.com/vi/Z8qcpXyMAiA/maxresdefault.jpg\",\"location\":\"google.summarize.docs\"}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "google.store.store" "message" "Storing documents..." "meta" "{\"location\":\"google.store.store\"}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "google.store.store" "message" "Found 2 new documents" "meta" "{\"location\":\"google.store.store\"}"
"MULTI"
"HSET" "google-video:0" "content_vector" "\xab\x91!=i7\x1f<\x95\xef\xd5\xbc\xbf\xcf\xa0\xbbS\x9d\x19\xbdc\xea\x88<\x91\xa3h;.\xe6\xb0\xbc\x03\x89\xa9<J\x06\xdd\xbcv\b\xc0\xbc\x9bt\xa4<\xd8\xa5\x8b\xbc\xbb\xa7\x14;\xee\x9f\xe8<\xe3\x98\x0c\xbd\x8fl\xf2\xbb\x9c\x14\xfe\xbc\xd6U\x02\xbc\xebm\xac\xbckIV\xbc\x84\x8d\xd5\xbc\xd1\xb7\\\xbb\xb9\xb4,\xbdB\x02'=\xfa\xa4\x1e\xbd7\x12L:\xb6\xcc7\xbd\\\x87r\xbc\x8e\xfc\x14=T\xff[\xbd\xba_L=YI\xc7\xbc8\xaf\xae\xba_cH\xbd0J\xf2\xbc\xf94\x18\xbd_\xd1\xf6\xbb'2\xf0<\xf4\xeeZ=6\xd4\xed8\x03\x1eK\xbc\xbf\xff\xc8\xbc\xd8o/\xbd.J-=W\xdf\xcc:9\xe1\xc5;\xedQ\xf4;\x95\x946=\xd4\xb6\x96\xbb\x8eX\x11<s\xa4\xd7<\x8bBQ;\xb3c\xa8\xbc\x1e[\xa4<\xf1!'=\xc5\xfb\x99\xbcm\a\xee\xbcA\xe6\x8e\xbc\xf0\xb5\x9c;\xb3\xd0\xaf;&\x10\xb0<\x13\xdb8\xbd\xd7\x16\x8b=\xdda\x15<L\x10\x83\xbd\x8a\x98\xaa\xbcbPD:P\xd2\x90<#z\x89:\xf5\xd7\x06\xb9i\xbd\x1f=\x82\x93\x8e=R\x97\xa48i*\x8b\xbdZ\x0b\xc8\xbd\xad\x9bA;\xf1\x9b\xcc=\xda\x93\xbf<!\x1fI=\x80\x12\\\xbcE\x10\x9a\xbdt\x92\x83\xbc\x86\x90\n\xbdWY\x90\xbd\a\xeae<bi`\xbdS/\xcb;\xeb\x85\x05\xbc-\x84\xaa<\x93\xb2\xfd\xbc>\xad\x0c=\xf9\x89u\xbcV}g\xbd\x02W(9\xa8\x83\xa6=W\xcb\xdb\xbc n9\xbc\xb0F\x04=d\x9ag\xbdl\xf7e\xbc\xc0E\xab<\xc4HL<\xe1\xf9\x8c=\xd8\x05\x81=\xa5k\x88<\x02\x9f7\xbc\xc4Fy=2\x94Z<\x1f\x98%=\x80Va\xbc\xa6\"m\xbc\xcc\xea\x05\xbd4I\x84\xbd\xedqy\xbc\x0b\x1a\xbd;\xb8\xa1[=6\xaev=\xf5~\x8b<;\xde\x8a<\x81\x86\x84=\x01\x8eT<\xc9\xe3\x14=\x05\xb3\xd6\xbcvK.\xbc\xef\x8e\xd8;8\xe8\x16=Qa\x0f\xbb\x97\xc3u=\xbe\xc7B=\xad\xaa\xf2\xbb\x8c\x0c\xdb\xbcY\xc6f7?Z\x1a<~\x0c\x9e<&@\xa9<\x9dE\xe6<i.\a;rID=y\x9b>;{\x1e\xd2;S\xb0\x11<\x83\xb7,\xbdx\x8e@<w\xfc\x84:\xb0\xd6L<z\x86\xa8;u5#<\\\xb4J<d\xca\xac<\xcb\xb4\x0e\xbd\x88^}<\xbd\xd5\x85\xbd\xf1\x80Y=!\x1dU=\xe2h\x15\xbb\x06`\xab<\xe2M\x0b=\x9c{0\xbb\x82\x9a\xb3\xbc\xfd;\xbf=\x8b&!=\x88\x9d:<\xda\b\xc4\xbbd\xba\xc9;\xa1\xd2\x1d\xbd5\xce9\xbc\x8b\x1bM<\xadz\xbe<\xcdp\x8e;S\x92\xbc<\xd1\x1a\x98=\xce\xa47\xbd~\xb1\xcf\xbcN\xcbS\xbc\xf8\x7f\xf6\xbc\xc7\xbfa<\xfac\xa5:t\xe9\xf8\xbcL\x83\x9c\xbb*\xee\x8c\xbd\\\xaf\xac\xbc{\xaf\x95<\x96m\xae<\xc6t\x8a=\xfb\xdaA=U.\xc4=\x9a4x\xbd\x1eN\x03;q\x87O\xbb\x03\xb3A\xbc\x18\xef\x88\xbb\xe3\xba\xf0\xbc\xe6Ez<7\x82\xcf\xbb\xc4\x06\xd7=B\x88n:a\xe0\xca<q\xdd\x8f\xbc\xd0\xe7\xe6\xbc\xab\xd6\x85\xbdV\xf5\xa6=\r\x96N=m'\xbd\xbc\x10\x0bo=\x8dcL<\x1f$A=\xf1\xcf\x0f\xbdrr\xf2\xbc\xd1Q\xfe;\ai\x89<\x10\xfb.=\xb0\xc6\n\xbd\"\xd6\xe6<v\xe5o=\x9d_\xfc\xbaT%\xbd<\x0c\x1f{<6\xb2\x11\xbc2\xb3{\xbc\x17\xa6\x12=Y\xbb\xbc<\x89\xea8\xbd\x1e\xbf\xd0<ud\a\xbc<\x95\x81;l\x0e\xa9;\xe6\xe4\x8a\xbb\x8d\x1b\x00=e~\x1c\xbd\x05\x00\xc6<,U6=\xf3;\xc9<\x19\xc6\xbc\xbc\r\xaa\xd8<\x1a\xea\x02\xbc\x03\xd4\xca<\xccon<x\xa9\x94=\x8c\aB\xbcY\xa7\x06\xbbN\xde\xe3:c\x94\xcf;'S\x14\xbc;\xe13\xbdA\x1a\x8c\xbc5\x0e\xef\xbc=V\x83=U\xc6\x1c<\xa7t\xba<\xcd\xe8\xa3\xbcE\xe0\x04\xbd\x95\b\xae<\xb5\xe0\xbd< +\x81\xbd\xd47\xc1<?\xff\xbc\xbc\xd2\xa4\x83<t\xc5\t=\x19_\xb8:V\x89\x80=<\xae\xec\xb9\xee\x18,;\xe2<\x9a<\xce\xb3}<W\xdb\x02<\x84\xdc\xa0:~\x061\xbcv\xb1,\xbb\x01\x88\x84\xbc\xc0\x96!=\xe3t\xa0\xbd\xb9Xa=\xd7y\xa5\xbc~t\x95<[\x87\b=\x11\xa1+\xbc0e\x1b=HS\xd9\xba\xadN\xe8\xbc]D!\xbc(J\xb0<T\"\xec;c2\x96\xbc)V(\xbd\xe2\xcd\x8b;\x0b\x8a\xc3\xbb?\x15d\xbd\xfe\xdd\x81\xbc\xc4\x0c\xb7\xbc\x8f\xb3\x0b\xbd.\xafX\xbd\xcb\x15\\\xba\xad\xad\xbf\xbd\x98\xf9x<\xe6\xc86=\xc1\xa4\xfa\xbc|\xae\x82\xbb\xa9+\b=U\x9f\x1d<\xcd\xf4\xa0\xbb\xd4\x16\xae\xbd\x16\x1c\x15\xbc\xc4U\xab\xba\xbf\x14&\xbc^\x90\xa4\xbb}>g\xbdw\xfc7\xbd\xadb2<\xecf\x94\xbc\x7f\x93S\xbc\x0cO\xba\xbc\xbf\x8b\xa2\xbc{Y`\xbc\xd6\xcf\xe5=J\xfc\x8b<V\x8b\xd1\xbc\xcd\xf0\a\xbc@/<\xbb*\xde\x1b=j\xf5\xde\xba\xfcq\x0c=\x91\x10\x86=\xd2L\xb9<\x10\x11\xee\xbc\xf3\xfa\x80=0\xc2\x9d\xbdP\xa6\x89<b\x034\xbc\xa79l<\xe7\x89\xe8\xbc\x97\xc2\xcc<\xfd%\xa8\xbc\n\xba><\x9b\xbe\x8e<wM\x12<|'(\xbdmI\xc0\xbc\xad%\x04\xbd85\x89<\xb1!\xec<\xcf\xa5\xaa<\xf7\xb5C\xbd\x9a\xe7D\xbd\xa2\xd0\xc3<\xc8\xaeI\xbc@\x86\xb8\xba\xd8\x8a\xee\xbc\xa9\"\xb9=s\x98Z<\x9a\xa2\x17=\x18\x10\xfe<\xb6\xe2/\xbd\xcf\x9f\x00\xbdS\xec\xe7\xb8\xd8\xb6\xe3\xbc\xd7\xbb\x89=\x8fU\x1b\xbd\x98\xfd\x85=SE\xe4\xbcPyT\xbc\xd5\x826\xbdX\xeeJ\xbb\x83\x7f\x83:|E=\xbc\xf2'\x16=\x97\xe1\x0c\xbc.\xb8\xc0;\xf8F\xac\xbc\xa19\x11\xbd\x88\xc4i=\xb4Z\x0b\xbd\xe7\xf1\x81\xbc\x86\xf4\xba;W\xce-\xbdD\xe9\x04\xbd#\x0b\x80\xbd\xd1\xd2\x8a\xbd\r\xfb)=}\x97U\xba\xfa)[\xbd\x82$\x18\xbd\x05\xee\x15=$\x15?=\x94\x81\n=\xd8\xc7\xe5\xbc3\xd4\x8b<\x01 )=Af\x92\xbch\xebZ\xbcK\xfb\xd0<\x05\"%=m7\x06>V\x90T=\xbf\x8a\xc8<\xee\xe2|\xbcg#\xd8\xbc\x16\xa3\xbe\xbc\xe19\xc7;.e6\xbdr\x04\x80\xbd^\x16.\xbdMC:\xbdN\x0c\x02\xbd\xee\xbb\xc5\xba\xb9\xf2\x84\xbc\x88j\x05<\x1d\xea7\xbcF\xa1\x92;\x16\x05\x05\xbdz\xc1\x9b\xbc\xd1\a1=\x0ba\x12=b\x017\xbd]\bF\xbd8\x06u<\x84T\x89<<\xd0\x11<\xcb\xc6\a=\x15,\xaa:\xa1\xfc\x00\xbd;s\xf9;\xcdu\x82\xbc\xea\xae\xae\xbb\x12\x81d\xbc\xc2\xdb\x9c\xbd]\xb2A;\xbde\xdb;.W\n<\x85\x19\xeb<\x05\x9fH<\x12\xfe\x11\xbc8f\x88;\x7fS\xb3\xbcv\xf0]\xbc\x10*\xfa\xbc\x89=\xe7\xbc+\xf6\x16=(\xd0\x16\xbbi,\xa6\xbc\xcf\xe8\x9a<\xba(\xb4<\xc4x\xbe<\xc3\xb8\x12\xbd\xd5L:\xbd\xf4\xbc6\xbd\x80\xb3\x9a;\xe7\x9c\x88\xbdz\x0c\x84\xbc\x80\xd7<\xbd\xc3\x06\x93=\x0f\xabc\xbd\xcd\xef\xf2\xbcl\xfa+\xbc\nHJ<*!\x00\xbd\x92?\"\xbc\xcf\x17\xb2<\x9aK\xca;r?\xee\xbc\xa5\xae\xe3\xb7\x86\xbb{\xbc\x93W-\xbdP\xc8\\\xbc\xc3\xa4\xf3<\"[\x1b\xbc\xb4\x91\xa18.d\x8e; \xa6+<m\xe1}=\x90\x14\xfe;Q,\xfe<\x81\x8el<@\xc6=\xbc\xf1\x01a=\x8e%\xff\xbc\x91=\xd9\xbd\x89\xa1\x87=\xf0\xfe\x17\xbdqlG\xbdIKJ\xbcW\x16\x18=\xc1\xfb-=\xc7\xe7\x06\xbcm\x85\x94;\xceOj\xbc\x81U\xef\xbcK\x9c\xa8<d{%\xbb\xabe\xec<\x9a\xfd;\xbd\x97w\a\xbdst!\xbd-.\x13\xbdJ\x16\xf4\xbc\xd7\xeb\xf3<\x92\xb1t\xbdxSF=\xe2W\\\xbc|\xbfP<\xed\xb3\xd9<\x11\xfa9=e\xea!<&\xc6\x7f<\xcf\x85\xfe<g<\xf9\xbcc#'\xbc\xc1Ri\xbc/\xb6\xb5<\x1d\xd5\xae</2d<b\x11 <8\xfdQ:\xe2\x8e\xaf\xba?}\xf1;\xfd1\xe4\xba\xdc\x05Z=\x05\x8e5=\xaf`\xac;\x1d\x05~\xba\xf9\x9a\x99=\xeb0\xfe<\x8c\x11\xf8\xbdZ\xc6\x83;\xa4\x83\x89=V\x00\x86\xbd\xde\xe4/\xbdL\x87I=\xe6\xd3\xa1\xbd\xce\x17F=\xea+\x8e\xbb\xf4\xa6\xac<\xce0\xa9\xbdj\xba\xba\xbc\xa62\xbd\xbcS\xaa\xf3\xbco\x03%\xbd\xb2f\xae:,O\xa0\xbb\x97.\x91;\xd7\x00\x99<\xba\x8d\xc0\xbc\xab\xa9\xb5<\xb2\x8a\x80<\x9dB\x0e=\xa0\x17g\xbc\xf8\xfc|;k\x9f\xa6\xbd\x80`\xe6<\x85\xcf\xb7\xbca\xb8\x1b=\xb9\xdf\xc9<\xfdt\xc0<\x0b\xddu\xbdG>\xab</d\xb7<\xd0\x8e;\xbd\xf3\x1d\xf6\xbci\xdd\x1b\xbc\x17\xf5\n\xbd\xb4*\x01\xbayQ9=\xa1n2\xbd\x84RG\xba\b\x84\x9b;\x18\xea\xf0<\xd0\xbb\xff\xbcv\xbc\x9b\xbd\xb6\xdbs<?\xf5\xb5\xbc\xf9Y\x80<\xc4\xc4\xb2<(\x87+=5\x87\x8a\xbc\xe1\xaap;$\xbaP\xbd-\x16R\xbc\x9b\xec*\xbc\xb2\xe9\xc5\xbc\xf6Yg\xb9g\x12\xce<]%\xae<\x87~\xc8\xbc\xbas7=~\xb0\x84\xbc\xe5\xa7\x17=2\xcb;=\x0b4\xb2;\x9e2\xc7=_;\x0b<\t\xd3\xe1\xbc\xaam\xe4<\n\xe6\xb7\xbc\xa8\x89Z\xbc\xe8\x03\xad\xbb\x85\xb1\x89<e2\x9c<-\xf5\x1b<4\xd0\xc3\xbd\xf6\x1eq<\x9b\rr<\xfe\xee\xc8\xbc\x11$\x83=>e=\xbdF\x19\x8c=m\xe7\x9a\xbc]\xfe0<\xb1\xe9\x92<\xdf\x0b\xf9<\x0e$\xfd<\xd7\xeca\xbdm\xe3\r\xbc\xa4|V<\xf5|\x93\xbd\xf2\x9dz\xbd_l\xba\xbc!\xf4\x13=\x9d\xbe\xa0\xbcJ\xf3\x8d<u\xc0\x18\xbd~D\x91;\xf9\x8e#<\xc6*'\xbc\xaf:\x88\xbc\x15\xde\x9e<W\x80+\xbc\x04S:<\xd6\xdc\x00\xbd\xf8\xd8\xc3=\n\xa8\xf5<\xd1\x05\xab<\xc5\x0b\x0f>\x9c\xe8\x96<\xc15=\xbc\x13\x8e\xc4\xbc\x186V\xbcP\x0b\r\xbd{\xf7u\xbd\xe2z =g\x00\x1c\xbc\xa2+\xa9\xbd\x18\xc6d=\xfc\xab\x93<\x05\xc0\xf6\xbcF\xda-\xbcpB}=\xcf\xf55=\xb4<\x8f\xbd3\xcba\xbd\a\xe0S=\xcf9I\xbc\xe4\xbf\x83:\xb1\xe7\xf3;>\xc5><!1T=\x91\x12\xba\xba6x\xd3\xbb.\x7fX\xbd\xc9\x9f\xd0<%B#\xbc\x0f\xbc-\xbc}\xf3#=\x02\t=\xbd\x0c,\x8d\xbb\xb6\x86\a\xbc\"<Z\xbc0\x1cC\xbd\xf4\r\x945\xde8x\xbd\xae\x94^<\xfd\xd9\x87\xbdO1:=P\x82n=B\x0f\xf5\xbc\xd7\xa2\xff<\xf8\xe4\x83\xbc\x99\xff\x01;\xd9Z\xcd<+71\xbd@\x87H<l\xcc\x17\xbbs\xf2\x8c<\x06L\xdb\xbc(O\x98\xbb\x941\xa1<h]]<&\xd3\r\xbd\xfd\xbe\xcb<\xe9U\x86\xbc\xd2\x89f\xbc`q\x14=\x04\rS\xbct\xbc\x9f\xbd\xd0\xd8\x0e\xbds{\xf7<T\xe2\xc9<\x16\x8c\x03\xbdR\xb3\xb9;\x9b\xb4\b<\x1c\xb8c=\xa7\xfcH\xbdw\xe65\xbcR\xe8\xd1\xbc\x05\xe4\x03=L\xd2\xb1;e\xff6\xbd\xa7^\xfd<\t\xf9\xa8<dq\xe8<j\xf3\x85<\xf8\xbf\xf7<M\xd1\xb4\xbd\x14M\xb7\xbd\x9e\x868=\xe5\xb5;<Q\x10\xf0\xbc\xb4\xc4f\xbd\xa5<\x99\xbc\x88Y\xcd\xbc\xb6\xfe\xfc<\xba\xc4\x86=\xbd\x06\xbb<\xb5\x15X<>\xfe`\xbd_\x98\xf8<\xea1{=\xd9\x93\xab\xba\xb6\xde9=\x7f\xfe7\xbd\xe9\x16\xa0\xbc\xd8\xaa\xfd\xbb\xb9\xb5\xf9\xbc\xb1\x88:\xbc\x18\xe4%=_B;8\xc1\xa8r=?W\xc0\xbc\x88\x1f8\xbb\nO\x93\xbd)<{\xbd\xaf\xe2q\xbc\x81\x96\xb8\xbc\xf1\xd9\x85\xbcs\x0bc=\x82\xa5+=\x99CU\xbd{\xa09;\xda\xcaM\xbd\xc6`\x98\xbc\x18b\xa18Pz0\xbd\xddB\xdb;\xd7`\xfe\xbc\xa2\x86\xf9<\x94\x1e\xa7<8\xc2h;\xd9i3\xbb\xa7C]=h.\x06\xbd\x8b\x8c\x92<\xdeb\x81\xbc\xbb%\xb7<\xa5Z\xec\xbc\x18\xea\x85<W\xad\xb3=\xb8\x18P<N\x89\x7f\xbd\x1f/\xa6<" "content" "**Summary:**\n\nThe video explains the cache aside pattern. This caching strategy involves checking if the requested data exists in the cache (Redis) before fetching it from the database (MongoDB). If the data is in the cache, it's returned immediately; otherwise, it's fetched from the database, added to the cache, and then returned to the application. This pattern helps improve the performance of data retrieval operations by reducing the load on the database and improving response times.\n\n**Example Questions:**\n\n1. What is the goal of the cache aside pattern?\n   * To set up optimal caching for data retrieval on demand.\n\n\n2. When should the cache aside pattern be used?\n   * When data needs to be queried frequently, and filling the cache on demand can save costs.\n\n\n3. What are the steps involved in implementing the cache aside pattern?\n   1. Create a hash key based on the search criteria.\n   2. Check if the data exists in the cache.\n   3. If the data exists, return it.\n   4. If the data doesn't exist, fetch it from the database.\n   5. Store the data in the cache.\n   6. Return the data to the application.\n\n\n4. How does the cache aside pattern improve performance?\n   * By reducing the number of requests to the database, it improves response times and reduces the load on the database.\n\n\n5. How can data consistency issues be mitigated when using the cache aside pattern?\n   * By using another pattern called the right behind or right through pattern, or by getting more granular with how data is stored and retrieved from Redis.\n\n\n6. What is the purpose of the hash key in the cache aside pattern?\n   * To uniquely identify the data in the cache.\n\n\n7. What are some considerations when choosing an expiration time for cached data?\n   * The balance between data freshness and the risk of data inconsistency.\n\n\n8. How does storing Json documents in Redis differ from storing strings?\n   * Json documents allow for more structured and flexible data storage and retrieval.\n\n\n9. What are some alternatives to the cache aside pattern for caching data?\n   * The write-through pattern and the write-back pattern.\n\n\n10. Can the cache aside pattern be used with other databases besides MongoDB?\n    * Yes, it can be used with any database that supports caching." "metadata" "{\"id\":\"AJhTduDOVCs\",\"link\":\"https://www.youtube.com/watch?v=AJhTduDOVCs\",\"title\":\"Redis and MongoDB: Cache\\-Aside Pattern\",\"description\":\"The cache\\-aside pattern is used to load data on demand into a cache for better performance while keeping costs down. This video discusses how to use the cache\\-aside pattern with Redis and MongoDB.\\n\\nIn this video, Redis' Will Johnston covers:\\n\\- The cache\\-aside pattern is for caching on demand\\n\\- Redis Stack can store master data as JSON documents\\n\\- Redis is a good way to speed up a MongoDB app\\n\\nDownload the e\\-book \xe2\x80\x9cThree Design Patterns to Speed Up MEAN and MERN Stack Applications\xe2\x80\x9d: https://redis.com/docs/three\\-design\\-patterns\\-to\\-speed\\-up\\-mean\\-and\\-mern\\-stack\\-applications/\\n\\nSign up for Redis Cloud for free: https://redis.com/try\\-free/\\n\\nGet started with redis on any platform or language: https://developer.redis.com/howtos/quick\\-start \\n\\nCheck out Redis University: https://university.redis.com\\n\\n#Redis #MongoDB #Cache\",\"thumbnail\":\"https://i.ytimg.com/vi/AJhTduDOVCs/maxresdefault.jpg\"}"
"EXEC"
"MULTI"
"HSET" "google-video:0" "content_vector" "\xab\x91!=i7\x1f<\x95\xef\xd5\xbc\xbf\xcf\xa0\xbbS\x9d\x19\xbdc\xea\x88<\x91\xa3h;.\xe6\xb0\xbc\x03\x89\xa9<J\x06\xdd\xbcv\b\xc0\xbc\x9bt\xa4<\xd8\xa5\x8b\xbc\xbb\xa7\x14;\xee\x9f\xe8<\xe3\x98\x0c\xbd\x8fl\xf2\xbb\x9c\x14\xfe\xbc\xd6U\x02\xbc\xebm\xac\xbckIV\xbc\x84\x8d\xd5\xbc\xd1\xb7\\\xbb\xb9\xb4,\xbdB\x02'=\xfa\xa4\x1e\xbd7\x12L:\xb6\xcc7\xbd\\\x87r\xbc\x8e\xfc\x14=T\xff[\xbd\xba_L=YI\xc7\xbc8\xaf\xae\xba_cH\xbd0J\xf2\xbc\xf94\x18\xbd_\xd1\xf6\xbb'2\xf0<\xf4\xeeZ=6\xd4\xed8\x03\x1eK\xbc\xbf\xff\xc8\xbc\xd8o/\xbd.J-=W\xdf\xcc:9\xe1\xc5;\xedQ\xf4;\x95\x946=\xd4\xb6\x96\xbb\x8eX\x11<s\xa4\xd7<\x8bBQ;\xb3c\xa8\xbc\x1e[\xa4<\xf1!'=\xc5\xfb\x99\xbcm\a\xee\xbcA\xe6\x8e\xbc\xf0\xb5\x9c;\xb3\xd0\xaf;&\x10\xb0<\x13\xdb8\xbd\xd7\x16\x8b=\xdda\x15<L\x10\x83\xbd\x8a\x98\xaa\xbcbPD:P\xd2\x90<#z\x89:\xf5\xd7\x06\xb9i\xbd\x1f=\x82\x93\x8e=R\x97\xa48i*\x8b\xbdZ\x0b\xc8\xbd\xad\x9bA;\xf1\x9b\xcc=\xda\x93\xbf<!\x1fI=\x80\x12\\\xbcE\x10\x9a\xbdt\x92\x83\xbc\x86\x90\n\xbdWY\x90\xbd\a\xeae<bi`\xbdS/\xcb;\xeb\x85\x05\xbc-\x84\xaa<\x93\xb2\xfd\xbc>\xad\x0c=\xf9\x89u\xbcV}g\xbd\x02W(9\xa8\x83\xa6=W\xcb\xdb\xbc n9\xbc\xb0F\x04=d\x9ag\xbdl\xf7e\xbc\xc0E\xab<\xc4HL<\xe1\xf9\x8c=\xd8\x05\x81=\xa5k\x88<\x02\x9f7\xbc\xc4Fy=2\x94Z<\x1f\x98%=\x80Va\xbc\xa6\"m\xbc\xcc\xea\x05\xbd4I\x84\xbd\xedqy\xbc\x0b\x1a\xbd;\xb8\xa1[=6\xaev=\xf5~\x8b<;\xde\x8a<\x81\x86\x84=\x01\x8eT<\xc9\xe3\x14=\x05\xb3\xd6\xbcvK.\xbc\xef\x8e\xd8;8\xe8\x16=Qa\x0f\xbb\x97\xc3u=\xbe\xc7B=\xad\xaa\xf2\xbb\x8c\x0c\xdb\xbcY\xc6f7?Z\x1a<~\x0c\x9e<&@\xa9<\x9dE\xe6<i.\a;rID=y\x9b>;{\x1e\xd2;S\xb0\x11<\x83\xb7,\xbdx\x8e@<w\xfc\x84:\xb0\xd6L<z\x86\xa8;u5#<\\\xb4J<d\xca\xac<\xcb\xb4\x0e\xbd\x88^}<\xbd\xd5\x85\xbd\xf1\x80Y=!\x1dU=\xe2h\x15\xbb\x06`\xab<\xe2M\x0b=\x9c{0\xbb\x82\x9a\xb3\xbc\xfd;\xbf=\x8b&!=\x88\x9d:<\xda\b\xc4\xbbd\xba\xc9;\xa1\xd2\x1d\xbd5\xce9\xbc\x8b\x1bM<\xadz\xbe<\xcdp\x8e;S\x92\xbc<\xd1\x1a\x98=\xce\xa47\xbd~\xb1\xcf\xbcN\xcbS\xbc\xf8\x7f\xf6\xbc\xc7\xbfa<\xfac\xa5:t\xe9\xf8\xbcL\x83\x9c\xbb*\xee\x8c\xbd\\\xaf\xac\xbc{\xaf\x95<\x96m\xae<\xc6t\x8a=\xfb\xdaA=U.\xc4=\x9a4x\xbd\x1eN\x03;q\x87O\xbb\x03\xb3A\xbc\x18\xef\x88\xbb\xe3\xba\xf0\xbc\xe6Ez<7\x82\xcf\xbb\xc4\x06\xd7=B\x88n:a\xe0\xca<q\xdd\x8f\xbc\xd0\xe7\xe6\xbc\xab\xd6\x85\xbdV\xf5\xa6=\r\x96N=m'\xbd\xbc\x10\x0bo=\x8dcL<\x1f$A=\xf1\xcf\x0f\xbdrr\xf2\xbc\xd1Q\xfe;\ai\x89<\x10\xfb.=\xb0\xc6\n\xbd\"\xd6\xe6<v\xe5o=\x9d_\xfc\xbaT%\xbd<\x0c\x1f{<6\xb2\x11\xbc2\xb3{\xbc\x17\xa6\x12=Y\xbb\xbc<\x89\xea8\xbd\x1e\xbf\xd0<ud\a\xbc<\x95\x81;l\x0e\xa9;\xe6\xe4\x8a\xbb\x8d\x1b\x00=e~\x1c\xbd\x05\x00\xc6<,U6=\xf3;\xc9<\x19\xc6\xbc\xbc\r\xaa\xd8<\x1a\xea\x02\xbc\x03\xd4\xca<\xccon<x\xa9\x94=\x8c\aB\xbcY\xa7\x06\xbbN\xde\xe3:c\x94\xcf;'S\x14\xbc;\xe13\xbdA\x1a\x8c\xbc5\x0e\xef\xbc=V\x83=U\xc6\x1c<\xa7t\xba<\xcd\xe8\xa3\xbcE\xe0\x04\xbd\x95\b\xae<\xb5\xe0\xbd< +\x81\xbd\xd47\xc1<?\xff\xbc\xbc\xd2\xa4\x83<t\xc5\t=\x19_\xb8:V\x89\x80=<\xae\xec\xb9\xee\x18,;\xe2<\x9a<\xce\xb3}<W\xdb\x02<\x84\xdc\xa0:~\x061\xbcv\xb1,\xbb\x01\x88\x84\xbc\xc0\x96!=\xe3t\xa0\xbd\xb9Xa=\xd7y\xa5\xbc~t\x95<[\x87\b=\x11\xa1+\xbc0e\x1b=HS\xd9\xba\xadN\xe8\xbc]D!\xbc(J\xb0<T\"\xec;c2\x96\xbc)V(\xbd\xe2\xcd\x8b;\x0b\x8a\xc3\xbb?\x15d\xbd\xfe\xdd\x81\xbc\xc4\x0c\xb7\xbc\x8f\xb3\x0b\xbd.\xafX\xbd\xcb\x15\\\xba\xad\xad\xbf\xbd\x98\xf9x<\xe6\xc86=\xc1\xa4\xfa\xbc|\xae\x82\xbb\xa9+\b=U\x9f\x1d<\xcd\xf4\xa0\xbb\xd4\x16\xae\xbd\x16\x1c\x15\xbc\xc4U\xab\xba\xbf\x14&\xbc^\x90\xa4\xbb}>g\xbdw\xfc7\xbd\xadb2<\xecf\x94\xbc\x7f\x93S\xbc\x0cO\xba\xbc\xbf\x8b\xa2\xbc{Y`\xbc\xd6\xcf\xe5=J\xfc\x8b<V\x8b\xd1\xbc\xcd\xf0\a\xbc@/<\xbb*\xde\x1b=j\xf5\xde\xba\xfcq\x0c=\x91\x10\x86=\xd2L\xb9<\x10\x11\xee\xbc\xf3\xfa\x80=0\xc2\x9d\xbdP\xa6\x89<b\x034\xbc\xa79l<\xe7\x89\xe8\xbc\x97\xc2\xcc<\xfd%\xa8\xbc\n\xba><\x9b\xbe\x8e<wM\x12<|'(\xbdmI\xc0\xbc\xad%\x04\xbd85\x89<\xb1!\xec<\xcf\xa5\xaa<\xf7\xb5C\xbd\x9a\xe7D\xbd\xa2\xd0\xc3<\xc8\xaeI\xbc@\x86\xb8\xba\xd8\x8a\xee\xbc\xa9\"\xb9=s\x98Z<\x9a\xa2\x17=\x18\x10\xfe<\xb6\xe2/\xbd\xcf\x9f\x00\xbdS\xec\xe7\xb8\xd8\xb6\xe3\xbc\xd7\xbb\x89=\x8fU\x1b\xbd\x98\xfd\x85=SE\xe4\xbcPyT\xbc\xd5\x826\xbdX\xeeJ\xbb\x83\x7f\x83:|E=\xbc\xf2'\x16=\x97\xe1\x0c\xbc.\xb8\xc0;\xf8F\xac\xbc\xa19\x11\xbd\x88\xc4i=\xb4Z\x0b\xbd\xe7\xf1\x81\xbc\x86\xf4\xba;W\xce-\xbdD\xe9\x04\xbd#\x0b\x80\xbd\xd1\xd2\x8a\xbd\r\xfb)=}\x97U\xba\xfa)[\xbd\x82$\x18\xbd\x05\xee\x15=$\x15?=\x94\x81\n=\xd8\xc7\xe5\xbc3\xd4\x8b<\x01 )=Af\x92\xbch\xebZ\xbcK\xfb\xd0<\x05\"%=m7\x06>V\x90T=\xbf\x8a\xc8<\xee\xe2|\xbcg#\xd8\xbc\x16\xa3\xbe\xbc\xe19\xc7;.e6\xbdr\x04\x80\xbd^\x16.\xbdMC:\xbdN\x0c\x02\xbd\xee\xbb\xc5\xba\xb9\xf2\x84\xbc\x88j\x05<\x1d\xea7\xbcF\xa1\x92;\x16\x05\x05\xbdz\xc1\x9b\xbc\xd1\a1=\x0ba\x12=b\x017\xbd]\bF\xbd8\x06u<\x84T\x89<<\xd0\x11<\xcb\xc6\a=\x15,\xaa:\xa1\xfc\x00\xbd;s\xf9;\xcdu\x82\xbc\xea\xae\xae\xbb\x12\x81d\xbc\xc2\xdb\x9c\xbd]\xb2A;\xbde\xdb;.W\n<\x85\x19\xeb<\x05\x9fH<\x12\xfe\x11\xbc8f\x88;\x7fS\xb3\xbcv\xf0]\xbc\x10*\xfa\xbc\x89=\xe7\xbc+\xf6\x16=(\xd0\x16\xbbi,\xa6\xbc\xcf\xe8\x9a<\xba(\xb4<\xc4x\xbe<\xc3\xb8\x12\xbd\xd5L:\xbd\xf4\xbc6\xbd\x80\xb3\x9a;\xe7\x9c\x88\xbdz\x0c\x84\xbc\x80\xd7<\xbd\xc3\x06\x93=\x0f\xabc\xbd\xcd\xef\xf2\xbcl\xfa+\xbc\nHJ<*!\x00\xbd\x92?\"\xbc\xcf\x17\xb2<\x9aK\xca;r?\xee\xbc\xa5\xae\xe3\xb7\x86\xbb{\xbc\x93W-\xbdP\xc8\\\xbc\xc3\xa4\xf3<\"[\x1b\xbc\xb4\x91\xa18.d\x8e; \xa6+<m\xe1}=\x90\x14\xfe;Q,\xfe<\x81\x8el<@\xc6=\xbc\xf1\x01a=\x8e%\xff\xbc\x91=\xd9\xbd\x89\xa1\x87=\xf0\xfe\x17\xbdqlG\xbdIKJ\xbcW\x16\x18=\xc1\xfb-=\xc7\xe7\x06\xbcm\x85\x94;\xceOj\xbc\x81U\xef\xbcK\x9c\xa8<d{%\xbb\xabe\xec<\x9a\xfd;\xbd\x97w\a\xbdst!\xbd-.\x13\xbdJ\x16\xf4\xbc\xd7\xeb\xf3<\x92\xb1t\xbdxSF=\xe2W\\\xbc|\xbfP<\xed\xb3\xd9<\x11\xfa9=e\xea!<&\xc6\x7f<\xcf\x85\xfe<g<\xf9\xbcc#'\xbc\xc1Ri\xbc/\xb6\xb5<\x1d\xd5\xae</2d<b\x11 <8\xfdQ:\xe2\x8e\xaf\xba?}\xf1;\xfd1\xe4\xba\xdc\x05Z=\x05\x8e5=\xaf`\xac;\x1d\x05~\xba\xf9\x9a\x99=\xeb0\xfe<\x8c\x11\xf8\xbdZ\xc6\x83;\xa4\x83\x89=V\x00\x86\xbd\xde\xe4/\xbdL\x87I=\xe6\xd3\xa1\xbd\xce\x17F=\xea+\x8e\xbb\xf4\xa6\xac<\xce0\xa9\xbdj\xba\xba\xbc\xa62\xbd\xbcS\xaa\xf3\xbco\x03%\xbd\xb2f\xae:,O\xa0\xbb\x97.\x91;\xd7\x00\x99<\xba\x8d\xc0\xbc\xab\xa9\xb5<\xb2\x8a\x80<\x9dB\x0e=\xa0\x17g\xbc\xf8\xfc|;k\x9f\xa6\xbd\x80`\xe6<\x85\xcf\xb7\xbca\xb8\x1b=\xb9\xdf\xc9<\xfdt\xc0<\x0b\xddu\xbdG>\xab</d\xb7<\xd0\x8e;\xbd\xf3\x1d\xf6\xbci\xdd\x1b\xbc\x17\xf5\n\xbd\xb4*\x01\xbayQ9=\xa1n2\xbd\x84RG\xba\b\x84\x9b;\x18\xea\xf0<\xd0\xbb\xff\xbcv\xbc\x9b\xbd\xb6\xdbs<?\xf5\xb5\xbc\xf9Y\x80<\xc4\xc4\xb2<(\x87+=5\x87\x8a\xbc\xe1\xaap;$\xbaP\xbd-\x16R\xbc\x9b\xec*\xbc\xb2\xe9\xc5\xbc\xf6Yg\xb9g\x12\xce<]%\xae<\x87~\xc8\xbc\xbas7=~\xb0\x84\xbc\xe5\xa7\x17=2\xcb;=\x0b4\xb2;\x9e2\xc7=_;\x0b<\t\xd3\xe1\xbc\xaam\xe4<\n\xe6\xb7\xbc\xa8\x89Z\xbc\xe8\x03\xad\xbb\x85\xb1\x89<e2\x9c<-\xf5\x1b<4\xd0\xc3\xbd\xf6\x1eq<\x9b\rr<\xfe\xee\xc8\xbc\x11$\x83=>e=\xbdF\x19\x8c=m\xe7\x9a\xbc]\xfe0<\xb1\xe9\x92<\xdf\x0b\xf9<\x0e$\xfd<\xd7\xeca\xbdm\xe3\r\xbc\xa4|V<\xf5|\x93\xbd\xf2\x9dz\xbd_l\xba\xbc!\xf4\x13=\x9d\xbe\xa0\xbcJ\xf3\x8d<u\xc0\x18\xbd~D\x91;\xf9\x8e#<\xc6*'\xbc\xaf:\x88\xbc\x15\xde\x9e<W\x80+\xbc\x04S:<\xd6\xdc\x00\xbd\xf8\xd8\xc3=\n\xa8\xf5<\xd1\x05\xab<\xc5\x0b\x0f>\x9c\xe8\x96<\xc15=\xbc\x13\x8e\xc4\xbc\x186V\xbcP\x0b\r\xbd{\xf7u\xbd\xe2z =g\x00\x1c\xbc\xa2+\xa9\xbd\x18\xc6d=\xfc\xab\x93<\x05\xc0\xf6\xbcF\xda-\xbcpB}=\xcf\xf55=\xb4<\x8f\xbd3\xcba\xbd\a\xe0S=\xcf9I\xbc\xe4\xbf\x83:\xb1\xe7\xf3;>\xc5><!1T=\x91\x12\xba\xba6x\xd3\xbb.\x7fX\xbd\xc9\x9f\xd0<%B#\xbc\x0f\xbc-\xbc}\xf3#=\x02\t=\xbd\x0c,\x8d\xbb\xb6\x86\a\xbc\"<Z\xbc0\x1cC\xbd\xf4\r\x945\xde8x\xbd\xae\x94^<\xfd\xd9\x87\xbdO1:=P\x82n=B\x0f\xf5\xbc\xd7\xa2\xff<\xf8\xe4\x83\xbc\x99\xff\x01;\xd9Z\xcd<+71\xbd@\x87H<l\xcc\x17\xbbs\xf2\x8c<\x06L\xdb\xbc(O\x98\xbb\x941\xa1<h]]<&\xd3\r\xbd\xfd\xbe\xcb<\xe9U\x86\xbc\xd2\x89f\xbc`q\x14=\x04\rS\xbct\xbc\x9f\xbd\xd0\xd8\x0e\xbds{\xf7<T\xe2\xc9<\x16\x8c\x03\xbdR\xb3\xb9;\x9b\xb4\b<\x1c\xb8c=\xa7\xfcH\xbdw\xe65\xbcR\xe8\xd1\xbc\x05\xe4\x03=L\xd2\xb1;e\xff6\xbd\xa7^\xfd<\t\xf9\xa8<dq\xe8<j\xf3\x85<\xf8\xbf\xf7<M\xd1\xb4\xbd\x14M\xb7\xbd\x9e\x868=\xe5\xb5;<Q\x10\xf0\xbc\xb4\xc4f\xbd\xa5<\x99\xbc\x88Y\xcd\xbc\xb6\xfe\xfc<\xba\xc4\x86=\xbd\x06\xbb<\xb5\x15X<>\xfe`\xbd_\x98\xf8<\xea1{=\xd9\x93\xab\xba\xb6\xde9=\x7f\xfe7\xbd\xe9\x16\xa0\xbc\xd8\xaa\xfd\xbb\xb9\xb5\xf9\xbc\xb1\x88:\xbc\x18\xe4%=_B;8\xc1\xa8r=?W\xc0\xbc\x88\x1f8\xbb\nO\x93\xbd)<{\xbd\xaf\xe2q\xbc\x81\x96\xb8\xbc\xf1\xd9\x85\xbcs\x0bc=\x82\xa5+=\x99CU\xbd{\xa09;\xda\xcaM\xbd\xc6`\x98\xbc\x18b\xa18Pz0\xbd\xddB\xdb;\xd7`\xfe\xbc\xa2\x86\xf9<\x94\x1e\xa7<8\xc2h;\xd9i3\xbb\xa7C]=h.\x06\xbd\x8b\x8c\x92<\xdeb\x81\xbc\xbb%\xb7<\xa5Z\xec\xbc\x18\xea\x85<W\xad\xb3=\xb8\x18P<N\x89\x7f\xbd\x1f/\xa6<" "content" "**Summary:**\n\nThe video explains the cache aside pattern. This caching strategy involves checking if the requested data exists in the cache (Redis) before fetching it from the database (MongoDB). If the data is in the cache, it's returned immediately; otherwise, it's fetched from the database, added to the cache, and then returned to the application. This pattern helps improve the performance of data retrieval operations by reducing the load on the database and improving response times.\n\n**Example Questions:**\n\n1. What is the goal of the cache aside pattern?\n   * To set up optimal caching for data retrieval on demand.\n\n\n2. When should the cache aside pattern be used?\n   * When data needs to be queried frequently, and filling the cache on demand can save costs.\n\n\n3. What are the steps involved in implementing the cache aside pattern?\n   1. Create a hash key based on the search criteria.\n   2. Check if the data exists in the cache.\n   3. If the data exists, return it.\n   4. If the data doesn't exist, fetch it from the database.\n   5. Store the data in the cache.\n   6. Return the data to the application.\n\n\n4. How does the cache aside pattern improve performance?\n   * By reducing the number of requests to the database, it improves response times and reduces the load on the database.\n\n\n5. How can data consistency issues be mitigated when using the cache aside pattern?\n   * By using another pattern called the right behind or right through pattern, or by getting more granular with how data is stored and retrieved from Redis.\n\n\n6. What is the purpose of the hash key in the cache aside pattern?\n   * To uniquely identify the data in the cache.\n\n\n7. What are some considerations when choosing an expiration time for cached data?\n   * The balance between data freshness and the risk of data inconsistency.\n\n\n8. How does storing Json documents in Redis differ from storing strings?\n   * Json documents allow for more structured and flexible data storage and retrieval.\n\n\n9. What are some alternatives to the cache aside pattern for caching data?\n   * The write-through pattern and the write-back pattern.\n\n\n10. Can the cache aside pattern be used with other databases besides MongoDB?\n    * Yes, it can be used with any database that supports caching." "metadata" "{\"id\":\"AJhTduDOVCs\",\"link\":\"https://www.youtube.com/watch?v=AJhTduDOVCs\",\"title\":\"Redis and MongoDB: Cache\\-Aside Pattern\",\"description\":\"The cache\\-aside pattern is used to load data on demand into a cache for better performance while keeping costs down. This video discusses how to use the cache\\-aside pattern with Redis and MongoDB.\\n\\nIn this video, Redis' Will Johnston covers:\\n\\- The cache\\-aside pattern is for caching on demand\\n\\- Redis Stack can store master data as JSON documents\\n\\- Redis is a good way to speed up a MongoDB app\\n\\nDownload the e\\-book \xe2\x80\x9cThree Design Patterns to Speed Up MEAN and MERN Stack Applications\xe2\x80\x9d: https://redis.com/docs/three\\-design\\-patterns\\-to\\-speed\\-up\\-mean\\-and\\-mern\\-stack\\-applications/\\n\\nSign up for Redis Cloud for free: https://redis.com/try\\-free/\\n\\nGet started with redis on any platform or language: https://developer.redis.com/howtos/quick\\-start \\n\\nCheck out Redis University: https://university.redis.com\\n\\n#Redis #MongoDB #Cache\",\"thumbnail\":\"https://i.ytimg.com/vi/AJhTduDOVCs/maxresdefault.jpg\"}"
"HSET" "google-video:1" "content_vector" ">o\x83\xbbZ\\g<\xe5\x1a\xc3\xbc\xc2m6<zF^;v\x05<\xbc\x98^\x15=\xf20y\xbd6\xf5\x00<\xbb\xd7\xf3\xbcf\xa1\xc5;#\t\"<\xcc\xc7\xb9<'\t\xaa\xbb\x06\xaf\xed<\xff\x83\x8d\xbd\x02\xb4\xd2<\xa2;\b\xbd\xa9\x16\x15<\xa1h\x9c\xbc\xad\xc0\xae\xbc\xf1~\xc1\xbc,i\xe5\xbb\xcf\xc1\x1f\xbdX\x14\x14<Vq\xbd\xbb\xc9\xf6?=\xab\xeeZ\xbd\x108\x9b<\x8aJ\x0b=\x80\x1a\x05\xbd\xff\x18\x9b=\xb7\xdb!\xbd\x04k\xa2<6\xd8#\xbd\xa8E$\xbdp\xae\x1e\xbd\xe7\xc4d\xbc\x9dn\xb0<\x1b\xa0\xb7<\xd53\x0b=p\xab\xa6\xbbx)0;\x84\xd0\xb7\xbc\xad\xd5+\xbc\x88\xf3\xde\xbc\xa0\x96\x05\xbcm\xacA\xbc\xce\xc0\xcb<\x05\xdf\xe2\xbcw\x89J\xbc\xea\xcce\xbc\x04\x82\xd4;\x1f\xf8\xe1\xbcM\xc8\xba<\x1bS\xf3<\xa8\x06H\xbc]|'\xbc\x8be!\xbc\xcbX\xe0<\xce\x94\a=6\x8cu\xbc\xea\x16U\xbc\x15\xf0<=*\xb60=X\xa6\x82\xbd=\xfa\xd3\xbc~i\xee<9oz=\x80\xb6\x88\xbd\xfc \\\xbcz}\r\xbd\xd1.\xda=0\xa5\xf3\xba\x98W\x83\xbdOM\xa6\xbd\xe7\x9cy<\xef<x=\x00\x8bV=\xe4y\\<LG\xe2\xbc\x0b3P\xbd\xb6\x11!\xbd\x1d~5\xbd\xa8=I\xbd\x1c\xc1\xa5=\xab\xce\xee\xbc\x1e\\\xbd\xbc\xb9JX<e\x06\x8c<Gt\x98<^\xdd+\xbc:\a\x9d<c\xb0\xa5\xbd\xe4R.=0l+=B/\x02<wn\r\xbd\xcfF-\xbd\x15\x03\xf7\xbc\"\xcd\xef:\x19\x15I<\xca\xea\x06=iG\xcc<\x00@\xed<G\xe1\xbb<\xc3U\x04=\xabiq=\x8b\xa5=\xbd\xa7q?=\xe2\x9c\x84\xbdB^\x93\xbc\xf7\x0c\xfe\xbc^\xe5\x88\xbcd3\x9f<\xfd9\x17\xbc\xb3\xffa=\xa0_\xb5=R\x11H<\b\x9cG<$\x10Z=S\xe7\xb3\xbca\x9d\xaa=\xd9\xa5\xdf:cax\xbd\xc5\n\x04=\xf6\xb58=\x97\xcf\b\xbc\xdd`\x97<Q\xfc\xc9<\x8cRl\xban\xa6(\xbd\x80=\xef<\x85\xa9\xcf<g\xc9\xb4=\x1c\xb1\x1c=\x7f\xa7P=\x8a\xf9M=)\x04<=\x0e\xe7t\xbb\x8cX\xc4<W\xc3\xd9< \xb40\xbd\b\x13\x12=\xb7F\xb7\xbc\xbe]\xab<\x014\xbe<`\x10y<\x1c\xe4\a<Y\xe2q\xbc\a%\x18\xbd\xca\xbd\x12\xbd\xc9\xeaI\xbd8\x8f\x82<\x9d\xdeH=\x93\xc9\xa7<,\xdd\x98<\xfe3\xf4;\x12\xcav<%D\xc2<a\xd1\xc3=\xd2\xc14=/\xa4\xba\xbc\xed]\xe1<d\xe3\xa4<0\xf6;\xbc\x13c\x12\xbdP\x03\xd5\xbcb\"k<\b\x8e\xce:\x15i(<\xdb5\xab=@GL\xbd\xd9E\xc4\xbc2\xc5\xbb\xbc\xc5\x96-\xbdD\x9a\xa1;\x9d\x87\xac\xbcV\xac:\xbdS,\x91<\x1b\x1b\x8e\xbd\x9a\xe8\xcf\xbc\xd8\xed\xe3\xbc{\x8eK\xbc=\xa1o=\x1f\x84>\xbc\x1c8\xfa=x-\x11\xbdF[\xde<W\xbfR\xbc\x1ft\xa4\xbc\xe1\xca\x7f\xbc\a\b\xc0\xbcS\x0ey\xbc\xb5\x12*\xbd\xa3\xa0D=\x88%\xed\xbc\xa70;=4\xa7%;l\x12\x8c\xbc\xca#'\xbdx\x0fu=x\xce-=\x1b\xc6\xbb\xbc\x8bI\"=m&\xf0<V\x1d(=\xb1rl\xbd\xc5f\x86\xbb\xc9\xb6/<\x1f\x1c\xb5\xbc\x16;\xdb<\x1ft&\xbb\xb5\x84\xc5<\x94\x80k=\x90\xb4\xcf9\x9d-\xbb\xbbfy\xe4<\xf4\xc16;\x91De\xbd\x85\xfe\xbc<\x9e^<\xbcL\xc3[\xbc\x97C;<V\xd6\xa6\xbc#u{<\x97l\x99\xbb;\xa1>\xbd]\x1e\xa3\xbb \x91S\xbdK\x90\x1a\xbc?\xb8^=\t\xf6\xb3\xbb\xcdh\xb1\xbc\xed\xcf\x19=\x05?\xd8;\x19\x16\xbf<\xbe\xb8\x85=\x0b\xd9\a=\x8b\x1b\x12\xbd\x1aZ(\xba\xd2\xbc-<\xd6YH\xbb\xe5>\x9f<&\xb3\xa6\xbc\xe2\xcc\x1e\xbd\xe4p\x01\xbdr\x9e\x1a=\x16\x95e;'\xba\xa7\xbb\xf9\xab\x9a\xbc\xbf\x88\"\xbc\x06\x16\x12;f\x10\xbd<\xed\xd9\x97\xbd!\xcb\x84\xbc\x87-K\xbd\xd6\xb8\xa4<\x8d\xd2\x9b<\x16\xcc_\xbb\xbe\xc0\xaa=\x01\x94\x14\xbc\xbe\xec\x03\xbd\x87)\xe9:\xae83\xbdU+\xfc\xbc\xdcb\xa7:zQ\xe9\xbc\x19\xd9\xf4\xbbl\x92\xb0\xbc8\xcd^<\xd6z\xe3\xbc6\xab{=\xd9H\xc4\xbc\x89Qn\xbb'\x98\xb2:7Gn\xbb\xc2\xb0S<\x1c\xbc\t<\x00},\xbd\b1+=\xcb\xcf\x03\xbbB\xc6\x02=\x1bY\x1b\xbc\xdd\xfc\x86\xbd2\x88v<;O\xd1;\xcf\xbd\xa6\xbb\x82\x05d\xbcs\xc2\x85\xbc\x80#\x83\xbd\x0fQ\x8c:\xf73c\xbd/b\xa2\xbd\xb7\xc0\xc8<a\xd5\x15<4b/\xbd\xdc\x133=q\x99\x1e=H\xb5\x11\xbdV\xfcx<\xe7\xcce\xbdFC>\xbd!\xc7<\xbd\xf8/\xd4<\xd4<\xad\xbc4\x19\x9c\xbc\xa4P\x8f\xbd\xd2\xc2\x89\xbc\xef\xa4\x82<I\xb9\xb4\xb8\x17\xc3\xab\xbc.\x125\xbc\x17/\x8d\xbc\xed\xca\xfa=r\xc7\x16;\xeb\x8f\xf3\xbcv\xec\r\xbc\xfdS,\xbd*\x92\xe5<+P\x99\xbc\x9e\xb6\xc2<\xf8\xdb\x18=\x007\xf3<\x0e`v\xbc\xa82-=!\xdaS\xbdCb,=\t\x00C<n\xa41=\xca\x82\xa3<\x15\xc3\x0f<\xc8\xc4\xca\xbcW\xe3=<\x83gO=\x92\xbdg=z\xa9\x93\xbd\xb9tg\xbd7M\xc0;\xe9\xd9B\xbb\xa6\xa8m\xbc\x85\x02I<\xf0\xdb/\xbc\xecSZ\xbd'\xd6Z=XW\x18\xbd\xe1OI;\x9aa6\xbd^\xe9L=$,\x9f<\xf7\xbeF<i\x9dF=\xde\xba\x0e\xbd\x91\xa5T\xbc.\x11\x13\xbb\xd8[e\xbc\xc8\xddK=\x84\xc1S\xbd\x06\xde1=\x88\xe6\xf5\xbcm\xe1\xa8\xbb\xb8q\x04\xbd\xaa[\xdf\xbb[\xbd\"\xbchP\x8b=\xb2e\xd8;|M\b\xbd9\xd1\xe9;2\x0e\x8a<\xd3\x8e\x98\xbb\x11\xb3~=B\x8e^\xbd\xc1Z\xdd<\xc1DP<\xe4v\xe9\xbc\xddU\xaf:\xdb|\xee\xbc|\xe1\xd9\xbcK2\x05=G`\x0e<\xa5\xb4Q\xbc\x8aD\x06\xbd\xf43\x82<\xb8\x17\xce<u(\xa4<C(\x00\xbc\xfdU\xa6=\x18m\xe0<\xe9\xc8\xc6\xbb\xb1\x80\xdd:\xcb\xf3<\xbd>\xac\x00=S\xc1\x0f>\xce]\n='\xf5u=\xa9*\xbc\xbc\x19\xd6\xed\xbc\xcd\xb4\x87\xbb;c\xb0\xbc\x00)^\xbd\xd2:\x8e\xbd-3\x99\xbc\x82\x0c\xd1\xbc\x8468;\x85at\xbcA\x8c\x11;\x17\xb9\x81;w\xa8\x8f\xbc\xf9#8\xbc\x80\x9a#\xbc\xf2(6\xbca*\x9f=\xf9\xe02=I1@\xbd\xc8\t\x01\xbd\xcd\x96\xb07\x1f\x04\xf7<\xbe\xbc\xd8\xbc\x9b\xe4\x10<\x026c<}\xa8\a\xbd\x7f\xf9\xb2<\x1f\xae\xf9\xbc\x86\xdf\xe1\xbc{vF\xbc3LK\xbd\x8a\xb4w<-{]\xbd\xe9\xaf\xea<\xc4jh=\xb5\x8c\r=\xa6\xc2\xa2<;'O;\x14j2\xbd\xbe\x11\t<\xd7[0\xbd\xff\xb9\xa6\xbb\xae\xa9\x9a<\"\x17\xf5\xbc\xab~,\xbd7No=\xe1Z\x99<[\x9e\x06\xbc\xbd4\b;I\xcdi\xbc*\xa5\x04\xbda\ao\xbcJ\xc6[\xbd6\xa5*=E(\xdf\xbd\xf4\xc9H=s\"V\xbd*\x9d\x8d\xbb[l\x05\xbdVb\x12<\xab\x8d\x17\xbd\xe9A\xa0<\x1f\xf1z=n\t\xb2;\xfa+\x14\xbd\x1a\b\x1e<4j\x81;\x88\x90\x04\xbd\xba\xae\x1c\xbd\xc5\xaa]\xbcNt\x97\xbb\b\xf6\xe3:*\xe9\x1c\xbdG\rH=\xc8aP=\x10\xe1\xff<\xfd\x0f\xb8<.#\xd0\xbb&\xa4\xf7\xbc~\xe4\x9b<\xe3!\xf3\xbc\xf3\xf8\xa3\xbd\xe5\xad\x0b=\xd1\xe0\xde\xbc\xfa\x13n\xbd\x1f\xbf%\xb9\x86([<\xb1m\x80=\x00\x8af\xbc\xc2\x1b.\xbd\x15\x88\xf4\xbc\xf3u\xe1\xbc\xe8\x1a9=\xa6~\x05\xbd\xf5\xb2\x02=\x82f[<\xdf\xc2\xb4\xbb\x8cqx<\xc8\x1dR\xbb$\xe7c;\xf7\xa6\xa8<\x80\x87\xc6\xbcw\x0b#=\r7\x16\xbbP\xdd|<\x9cjR;I\x9bC<\xd3\x06;=.`\x8f\xbc\xaf\xc8\xc1<\x97(\x92\xbd\x8bc\x00\xbc\x17\xf3\r=_i&<\x9a|!=\x854\xc0\xbc\xb5\xab\xea;TZ\x1a\xbd\x9a\n\xa7\xbc\ry\t=q\x8c\xd6\xbc|~\x04\xbb\xdb\xca@\xbcUb8\xbb/O\xcc;Tl\xe0=\xeb\t\x8f<\xeb\r\x9f\xbd\xd3\n\x8d<\x00\xa7k=+\b\x91\xbd\xc7\x06Q\xbd/}\xda<\x14\xc4\x06\xbd\x87G\xa8<\xc5\xcc\b\xbdv<\x82<\x9fK\x92\xbdi\x10e\xba)\x03\x8a\xbc^\xbbX\xbdZ\xf3\a\xbd\x9fQ\xb7\xbb.\xa5/\xbc\xba\xd7?<$\x9f\x06=\x86\x82\xb0\xbcg>t<@M\xb2;x\xf0\xcc<\x1b\x86s;\x96K\x16\xbcg\xc3\xa6\xbd\x1b\xa8w<r\xdcN\xbcsA\r\xbc\xff$\x1a=\n\x17\x17=,A\b\xbd\x14~F=\xe1\x8fH\xbd,KK\xbd6P\xcf\xbbp\xbfA\xbc\xca\xacs\xbcke\xc1\xbc\x01Q\xc5<~c\xd9<\x19*\xa8<d-\xcf<\xb0}\x13=\xca/p;\xe0\xa8d\xbd[Bv=-\xfa\x1a\xbd\xdf~\xdb<I\xfcJ= \x9e\x8c<Y\b\xb9\xbb\x04\xfb\xdc<M1\xb6\xbc\n\xa9\t\xbd\xc2\xda\x81;{\xd4@\xbc@i\xb9\xbb\x1c4\xce<&\xe0\x7f<\xb8\xdc\xd4;\xc3\x1d\xd6<\x04\xc2\x00<\xb5\x84J\xbc\xb5\x8c+=V\x8aR\xbc\x1e\xd29=\x90\x99\xdc\xbb\xa8\xd1\x8d\xbcx\xce\xc8<\xb5\x18\x90\xbb\xffjR\xbdkGu\xbb\xbf\x10\x7f<\xa8\x8f\x02=*,\x88<\x93v[\xbd\xb7\x85\xa7;\xc1}\x95<\xd3\x13\xb0\xbc+\xb6\xb3=\xb3\xf19\xbc\xa6hA=K\x98k<\xff\x12\x0c\xbbb<i\xbb.#:<$\xaa\x89\xbc(\x10\x8c\xba|\x87\x92\xbc\xa6\x1a\xbb<4\x19,\xbd\x84\xb5\xcd\xbc\xb5\x81\xed\xbb$\xd9\x85=\xe3L\x8e\xbc\x870\xbe\xb9\x80\xe3T\xbd\xa8\x0f\x14<\xfb\xdc(\xbbK\xe6y\xbc\x8a\x7f\x97\xbc\xb5\x92\x84<Hd\x1d\xbd\xf2\xa4v<\xcd\x844\xbd\xfc0\x88=\xfb\x81v<\xfe\x15B<\xb0\xf1\xcf=\r\xcbl<\x19u\x14<F\xc2d\xbd\xbe\xb8\x8b<9\x15\x0e\xbatH\x9b\xbc\xf7\xa0\xa8<\xe4\x8c\xcb<\xa1\"\x9c\xbd\xa4y\xc8;\xa85\x18=\xb1\t=<\xd4\x90\xf3\xbc\x91xm=d\x80\r=\bL\x88\xbd]\xe58\xbd\x89\x04-<\x8f\rV\xbd\x96\xfd\xec\xbc\xb2\x82(=\x9a3L\xbd\xa7\x12\x0e=R\xa3|\xbcF\xf01=\ax\x9f\xbd:\xe5\x9f\xbc\xf3\xbe&\xbcH\xc14\xbdTC\x84=\xcf-\xdd\xbc\xbb\xcd\xd1\xbc\xee\xfa\xaa;\xd0D \xbd\xea\x9c\xc9\xbd\xe7\xd7\x89\xbd\t\t6\xbd\x14\xf9\x8a<\x1cz\xa1\xbd%j\x8e=\x7f\x89==J\xc17\xbd\xc3i\\=|X\xa3\xbb\x96\xe0\x0e\xbdp\xe8Y=!\x0c\xc3\xbcJW\xc1\xbc\x03\x83\x91\xbc\x14\xb5\xb1\xb9\xc15R\xbd\xb0\xf3\a=S\b\xc6<\xc7M5=\xa8|\x02\xbd\xf8\xd6.=h\x9e\xf5\xbb\xd7m\x1e\xbd#\xf4\xda<X\xdb\xd6\xbc\xb8\xab\x83\xbd_\xab4\xbd&\x12\x9a<JD\x88\xbc\x85\xe0\xb3\xba\x8b\x01<\xb9x\xf3\x18=w\x82\x18=o\xee\xe0\xbcR\xb2L\xbd\xae\xa1\x1a\xbd\xab\xc3\xb7<y\xe0v<|\xc1\x06\xbd^\x1c\\<\x18E\x8e<@\xbd6=\xc8n\x8b\xbc\xf8QF=)\xf2{\xbd1\x8ed\xbd\x0f)\x90=\xea\xfcR<\xdd\xfb\xe0\xbc\xde\x0bf\xbc\xeaa\x04\xbd\xf1X\xa2\xbc\xb2>\xa3\xbb\x8c\xa6<<\x15\xcf\x96<;5\xfc:k\xd93\xbdiTp\xbcL\">='\xa9\xd3\xbc)\x0er=\xa2!\x84\xbdx\xc8\xfb\xbcH$\xca<\x00A\x83\xbdj[`<n3\xff<h\x9a\x15\xbd)\x85\xa2=\xbdB\xbe\xbcj\x02N<\x8b\x96\x7f\xbdL\xb8\x99\xbc\xc5[\xe8\xbc(\xcb\a:\xe4\xe5\xe8\xbcl\x83-=J\xb6\xfe\xbc}i\x97\xbc\r\xa0g\xbc\x18%\x01\xbdc\x04\xe0\xba\xd4\xd4\x83\xbd\x17WE\xbdm\x12H\xbcI5,\xbcqi\x10=5-\x19=;/\xc8;\x89/?\xbb\xb2\xbb\x12=\x8d\xc5\xe1\xbc3\xe9C=m\x0e\xfe\xbc\xb8\x93\xc7<,]K\xbc\x7f\x961=4k\x0b=\xc9pb=m\x8b\xe4\xbb\xb7\x15\x00=" "content" "**Summary:**\nThe video explains how to model one-to-one relationships in Redis, specifically in the context of designing a retail app that sells electronics. The app has two views: a list view that shows information like product name, image, and price, and a detailed view that shows more information like multiple images, description, manufacturer, dimensions, and weight. The video demonstrates how to model this relationship using the \"embedded pattern\" in Redis, where the product details are embedded within the product collection, making it easier to query and keep all data in one place.\n\n**Example Questions:**\n\n1. What are the two views in the retail app?\nAnswer: A list view that shows product name, image, and price, and a detailed view that shows more information like multiple images, description, manufacturer, dimensions, and weight.\n\n\n2. How is the one-to-one relationship between products and product details modeled in Redis?\nAnswer: Using the \"embedded pattern,\" where the product details are embedded within the product collection.\n\n\n3. How does the embedded pattern benefit data modeling in Redis?\nAnswer: It simplifies querying and keeps all data in one place, making it easier to manage and retrieve information.\n\n\n4. What fields are indexed in the products collection?\nAnswer: name, image, price.\n\n\n5. How can you query the list view in Redis using the embedded pattern?\nAnswer: You can use a query like \"HGETALL product_id\" to retrieve all fields for a specific product, including the embedded product details.\n\n\n6. How does the embedded pattern improve query performance?\nAnswer: By embedding product details within the product collection, you can query all necessary fields in one go, reducing the number of round trips to the database and improving performance.\n\n\n7. What is the advantage of keeping all data in one place using the embedded pattern?\nAnswer: It simplifies data management and reduces the complexity of maintaining relationships between different collections.\n\n\n8. How can you ensure that the embedded product details are always up to date with the product information?\nAnswer: You can use triggers or hooks to automatically update the embedded product details whenever the product information changes.\n\n\n9. Are there any limitations to using the embedded pattern in Redis?\nAnswer: The embedded pattern can lead to larger documents and increased memory usage, especially for products with a lot of details.\n\n\n10. Can you combine the embedded pattern with other data modeling techniques in Redis?\nAnswer: Yes, you can combine the embedded pattern with other techniques like sharding or clustering to handle large datasets and improve scalability." "metadata" "{\"id\":\"c9Rr\\-\\-1r6pk\",\"link\":\"https://www.youtube.com/watch?v=c9Rr\\-\\-1r6pk\",\"title\":\"NoSQL Data Modeling with Redis: Building 1\\-to\\-1 Relationships\",\"description\":\"How does Redis Enterprise's NoSQL database help businesses simplify their 1\\-to\\-1 relationship data modeling? Learn more by downloading our free e\\-book: https://redis.com/docs/8\\-data\\-modeling\\-patterns\\-in\\-redis/\\n\\nIf you're a business running a e\\-commerce store, chances are you're constantly modeling 1\\-to\\-1 relationships to curate catalogs of product with not just a product name and price, but supplementary information and necessary details customers look for before making a purchase. As a NoSQL database, Redis provides a simplified way of data modeling with just a few easy patterns. Learn how to embed your data and start building quickly and with ease using Redis Enterprise for your next 1\\-to\\-relationship data model build.\\n\\nSign up and use for Redis Cloud for free: https://redis.info/3pyzVea\\n\\n\\\"Do You Really Know Redis?\\\" Download this white paper to learn more: https://redis.com/docs/really\\-know\\-redis/\\n\\nFrom the Blog: Introducing Redis OM for Python \\- https://redis.com/blog/introducing\\-redis\\-om\\-for\\-python/\\n\\nLearn more about Redis: https://developer.redis.com/\\n\\nSee apps using Redis as a database on Redis Launchpad: https://launchpad.redis.com/\\n\\n#RedisEnterprise #Redis #DataModeling #NoSQL\",\"thumbnail\":\"https://i.ytimg.com/vi/c9Rr\\-\\-1r6pk/maxresdefault.jpg\"}"
"EXEC"
"SADD" "google-video-vectors" "AJhTduDOVCs"
"SADD" "google-video-vectors" "c9Rr--1r6pk"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "openai.summarize.docs" "message" "Summarizing https://www.youtube.com/watch?v=AJhTduDOVCs" "meta" "{\"id\":\"AJhTduDOVCs\",\"link\":\"https://www.youtube.com/watch?v=AJhTduDOVCs\",\"title\":\"Redis and MongoDB: Cache-Aside Pattern\",\"description\":\"The cache-aside pattern is used to load data on demand into a cache for better performance while keeping costs down. This video discusses how to use the cache-aside pattern with Redis and MongoDB.\\n\\nIn this video, Redis' Will Johnston covers:\\n- The cache-aside pattern is for caching on demand\\n- Redis Stack can store master data as JSON documents\\n- Redis is a good way to speed up a MongoDB app\\n\\nDownload the e-book \xe2\x80\x9cThree Design Patterns to Speed Up MEAN and MERN Stack Applications\xe2\x80\x9d: https://redis.com/docs/three-design-patterns-to-speed-up-mean-and-mern-stack-applications/\\n\\nSign up for Redis Cloud for free: https://redis.com/try-free/\\n\\nGet started with redis on any platform or language: https://developer.redis.com/howtos/quick-start \\n\\nCheck out Redis University: https://university.redis.com\\n\\n#Redis #MongoDB #Cache\",\"thumbnail\":\"https://i.ytimg.com/vi/AJhTduDOVCs/maxresdefault.jpg\",\"location\":\"openai.summarize.docs\"}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "openai.summarize.docs" "message" "Summarized https://www.youtube.com/watch?v=AJhTduDOVCs:\n ### Summary:\nThe video discusses how to address slow database query issues while maintaining cost efficiency, specifically through the implementation of the Cache Aside Pattern using Redis and MongoDB in a Node.js environment. The presenter uses a movie streaming platform as an example, where the increasing growth of the platform necessitates improved data retrieval methods. Initially, MongoDB was sufficient for storing movie data, but as demand grew, the need for caching became apparent.\n\nThe Cache Aside Pattern is explained as a method of filling the Redis cache on-demand instead of syncing the entire database at the start. When a data request is made, the application first checks Redis; if the data exists, it's quickly returned. If not, the data is fetched from MongoDB, stored in Redis for future requests, and then returned to the application. This approach aims at optimizing caching, reducing load time, and keeping costs down.\n\nFurthermore, the video showcases how to implement this pattern with Node.js, using MongoDB for data storage and Redis for caching. Two scenarios are demonstrated: initially, where data is stored in Redis as strings with a set expiration, and later, using RedisJSON with Redisome to store and manipulate JSON documents directly in Redis, enhancing the structure and retrievability of cached data. The latter part also touches on data consistency challenges and introduces potential solutions.\n\n### Example Questions and Answers:\n\n1. **What is the Cache Aside Pattern, and how does it improve database query performance?**\n   - The Cache Aside Pattern is a caching strategy that loads data into the cache on-demand. It improves performance by first checking if requested data is available in the cache, thus reducing database load and speeding up data retrieval.\n\n2. **Why did the video use MongoDB and Redis together in the implementation?**\n   - MongoDB was initially used for its document-oriented storage capabilities, ideal for storing movie data. Redis was introduced alongside MongoDB to cache frequently requested data, reduce database load, and improve retrieval times.\n\n3. **How does the application check for data in Redis and MongoDB in the Cache Aside Pattern implementation?**\n   - When an application request is made, it first checks Redis for the data. If found, it's returned immediately. If not, the data is fetched from MongoDB, stored in Redis for future use, and then returned to the application.\n\n4. **What was the role of Node.js in the video's implementation?**\n   - Node.js is used to build the server-side application logic, interfacing with both MongoDB for data storage and Redis for caching, utilizing libraries like 'mongodb' client for MongoDB and 'redisome' for Redis.\n\n5. **How is data stored in Redis, and why is expiration important?**\n   - Data in Redis can be stored as strings with a set expiration or as JSON documents using RedisJSON. Setting an expiration is important to ensure that the cache does not serve stale data and to manage memory usage efficiently.\n\n6. **What challenges does caching present regarding data consistency, and how does the video propose to solve them?**\n   - Caching can present data consistency issues if cached data becomes outdated. The video suggests using patterns like write-behind or write-through to maintain consistency or being granular with cache operations, such as updating or deleting cache entries when the corresponding database data changes.\n\n7. **What are the benefits of using RedisJSON and Redisome for caching, as mentioned in the video?**\n   - RedisJSON with Redisome allows for storing and querying JSON documents directly in Redis, providing a more structured and flexible way to manage cached data, similar to document-oriented databases like MongoDB. This approach simplifies data handling and retrieval in cache." "meta" "{\"summary\":\"### Summary:\\nThe video discusses how to address slow database query issues while maintaining cost efficiency, specifically through the implementation of the Cache Aside Pattern using Redis and MongoDB in a Node.js environment. The presenter uses a movie streaming platform as an example, where the increasing growth of the platform necessitates improved data retrieval methods. Initially, MongoDB was sufficient for storing movie data, but as demand grew, the need for caching became apparent.\\n\\nThe Cache Aside Pattern is explained as a method of filling the Redis cache on-demand instead of syncing the entire database at the start. When a data request is made, the application first checks Redis; if the data exists, it's quickly returned. If not, the data is fetched from MongoDB, stored in Redis for future requests, and then returned to the application. This approach aims at optimizing caching, reducing load time, and keeping costs down.\\n\\nFurthermore, the video showcases how to implement this pattern with Node.js, using MongoDB for data storage and Redis for caching. Two scenarios are demonstrated: initially, where data is stored in Redis as strings with a set expiration, and later, using RedisJSON with Redisome to store and manipulate JSON documents directly in Redis, enhancing the structure and retrievability of cached data. The latter part also touches on data consistency challenges and introduces potential solutions.\\n\\n### Example Questions and Answers:\\n\\n1. **What is the Cache Aside Pattern, and how does it improve database query performance?**\\n   - The Cache Aside Pattern is a caching strategy that loads data into the cache on-demand. It improves performance by first checking if requested data is available in the cache, thus reducing database load and speeding up data retrieval.\\n\\n2. **Why did the video use MongoDB and Redis together in the implementation?**\\n   - MongoDB was initially used for its document-oriented storage capabilities, ideal for storing movie data. Redis was introduced alongside MongoDB to cache frequently requested data, reduce database load, and improve retrieval times.\\n\\n3. **How does the application check for data in Redis and MongoDB in the Cache Aside Pattern implementation?**\\n   - When an application request is made, it first checks Redis for the data. If found, it's returned immediately. If not, the data is fetched from MongoDB, stored in Redis for future use, and then returned to the application.\\n\\n4. **What was the role of Node.js in the video's implementation?**\\n   - Node.js is used to build the server-side application logic, interfacing with both MongoDB for data storage and Redis for caching, utilizing libraries like 'mongodb' client for MongoDB and 'redisome' for Redis.\\n\\n5. **How is data stored in Redis, and why is expiration important?**\\n   - Data in Redis can be stored as strings with a set expiration or as JSON documents using RedisJSON. Setting an expiration is important to ensure that the cache does not serve stale data and to manage memory usage efficiently.\\n\\n6. **What challenges does caching present regarding data consistency, and how does the video propose to solve them?**\\n   - Caching can present data consistency issues if cached data becomes outdated. The video suggests using patterns like write-behind or write-through to maintain consistency or being granular with cache operations, such as updating or deleting cache entries when the corresponding database data changes.\\n\\n7. **What are the benefits of using RedisJSON and Redisome for caching, as mentioned in the video?**\\n   - RedisJSON with Redisome allows for storing and querying JSON documents directly in Redis, providing a more structured and flexible way to manage cached data, similar to document-oriented databases like MongoDB. This approach simplifies data handling and retrieval in cache.\",\"location\":\"openai.summarize.docs\"}"
"SET" "openai-video-summary:AJhTduDOVCs" "### Summary:\nThe video discusses how to address slow database query issues while maintaining cost efficiency, specifically through the implementation of the Cache Aside Pattern using Redis and MongoDB in a Node.js environment. The presenter uses a movie streaming platform as an example, where the increasing growth of the platform necessitates improved data retrieval methods. Initially, MongoDB was sufficient for storing movie data, but as demand grew, the need for caching became apparent.\n\nThe Cache Aside Pattern is explained as a method of filling the Redis cache on-demand instead of syncing the entire database at the start. When a data request is made, the application first checks Redis; if the data exists, it's quickly returned. If not, the data is fetched from MongoDB, stored in Redis for future requests, and then returned to the application. This approach aims at optimizing caching, reducing load time, and keeping costs down.\n\nFurthermore, the video showcases how to implement this pattern with Node.js, using MongoDB for data storage and Redis for caching. Two scenarios are demonstrated: initially, where data is stored in Redis as strings with a set expiration, and later, using RedisJSON with Redisome to store and manipulate JSON documents directly in Redis, enhancing the structure and retrievability of cached data. The latter part also touches on data consistency challenges and introduces potential solutions.\n\n### Example Questions and Answers:\n\n1. **What is the Cache Aside Pattern, and how does it improve database query performance?**\n   - The Cache Aside Pattern is a caching strategy that loads data into the cache on-demand. It improves performance by first checking if requested data is available in the cache, thus reducing database load and speeding up data retrieval.\n\n2. **Why did the video use MongoDB and Redis together in the implementation?**\n   - MongoDB was initially used for its document-oriented storage capabilities, ideal for storing movie data. Redis was introduced alongside MongoDB to cache frequently requested data, reduce database load, and improve retrieval times.\n\n3. **How does the application check for data in Redis and MongoDB in the Cache Aside Pattern implementation?**\n   - When an application request is made, it first checks Redis for the data. If found, it's returned immediately. If not, the data is fetched from MongoDB, stored in Redis for future use, and then returned to the application.\n\n4. **What was the role of Node.js in the video's implementation?**\n   - Node.js is used to build the server-side application logic, interfacing with both MongoDB for data storage and Redis for caching, utilizing libraries like 'mongodb' client for MongoDB and 'redisome' for Redis.\n\n5. **How is data stored in Redis, and why is expiration important?**\n   - Data in Redis can be stored as strings with a set expiration or as JSON documents using RedisJSON. Setting an expiration is important to ensure that the cache does not serve stale data and to manage memory usage efficiently.\n\n6. **What challenges does caching present regarding data consistency, and how does the video propose to solve them?**\n   - Caching can present data consistency issues if cached data becomes outdated. The video suggests using patterns like write-behind or write-through to maintain consistency or being granular with cache operations, such as updating or deleting cache entries when the corresponding database data changes.\n\n7. **What are the benefits of using RedisJSON and Redisome for caching, as mentioned in the video?**\n   - RedisJSON with Redisome allows for storing and querying JSON documents directly in Redis, providing a more structured and flexible way to manage cached data, similar to document-oriented databases like MongoDB. This approach simplifies data handling and retrieval in cache."
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "openai.summarize.docs" "message" "Summarizing https://www.youtube.com/watch?v=c9Rr--1r6pk" "meta" "{\"id\":\"c9Rr--1r6pk\",\"link\":\"https://www.youtube.com/watch?v=c9Rr--1r6pk\",\"title\":\"NoSQL Data Modeling with Redis: Building 1-to-1 Relationships\",\"description\":\"How does Redis Enterprise's NoSQL database help businesses simplify their 1-to-1 relationship data modeling? Learn more by downloading our free e-book: https://redis.com/docs/8-data-modeling-patterns-in-redis/\\n\\nIf you're a business running a e-commerce store, chances are you're constantly modeling 1-to-1 relationships to curate catalogs of product with not just a product name and price, but supplementary information and necessary details customers look for before making a purchase. As a NoSQL database, Redis provides a simplified way of data modeling with just a few easy patterns. Learn how to embed your data and start building quickly and with ease using Redis Enterprise for your next 1-to-relationship data model build.\\n\\nSign up and use for Redis Cloud for free: https://redis.info/3pyzVea\\n\\n\\\"Do You Really Know Redis?\\\" Download this white paper to learn more: https://redis.com/docs/really-know-redis/\\n\\nFrom the Blog: Introducing Redis OM for Python - https://redis.com/blog/introducing-redis-om-for-python/\\n\\nLearn more about Redis: https://developer.redis.com/\\n\\nSee apps using Redis as a database on Redis Launchpad: https://launchpad.redis.com/\\n\\n#RedisEnterprise #Redis #DataModeling #NoSQL\",\"thumbnail\":\"https://i.ytimg.com/vi/c9Rr--1r6pk/maxresdefault.jpg\",\"location\":\"openai.summarize.docs\"}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "openai.summarize.docs" "message" "Summarized https://www.youtube.com/watch?v=c9Rr--1r6pk:\n ### Summary:\n\nThe video focuses on how to handle product data in retail app development, showcasing a transition from using a relational database model to utilizing Redis with the RedisOM library for more efficient data management. Initially, it describes a scenario where a retail app displays a list of electronics, including a name, image, and price for each product, as well as a detailed view featuring comprehensive details like multiple images, description, manufacturer, dimensions, and weight.\n\nIn a traditional relational database, two separate tables would be used: 'products' for the list view and 'product details' for the detailed view. However, the video introduces a more streamlined approach using Redis, where two collections, 'products' and 'product details,' are initially created. It then shifts to recommend an embedded pattern where product details are embedded within the products collection itself. This method allows querying for specific fields based on the view (list or detailed), making data retrieval more efficient and keeping all relevant information in one place.\n\nThe video concludes by demonstrating how to index and query data using the embedded pattern and showcases the benefits of this approach using Redis Insight, emphasizing improved data organization and retrieval.\n\n### Example Questions and Answers:\n\n**Q1: How does the video propose handling product data in a retail app?**  \nA1: The video suggests initially using two collections for product data \xe2\x80\x93 one for the list view and another for detailed product information \xe2\x80\x93 and then recommends an embedded pattern where product details are incorporated directly into the products collection for more efficient data management.\n\n**Q2: What are the key fields included in the 'products' collection as per the video?**  \nA2: The 'products' collection includes fields like name, image, and price, which are intended for the product list view.\n\n**Q3: What kind of information is stored in the 'product details' collection?**  \nA3: The 'product details' collection contains more comprehensive information such as product ID, description, manufacturer, dimensions, weight, and a list of images.\n\n**Q4: How can the embedded pattern benefit data organization in a retail app?**  \nA4: The embedded pattern consolidates all relevant data in one place by embedding detailed product information within the main products collection, allowing for more streamlined and efficient data queries.\n\n**Q5: How is data indexed and queried using the embedded pattern, according to the video?**  \nA5: The video demonstrates indexing the data by setting up models with the embedded pattern and shows how to query the data by specifying the fields needed for each view (list or detailed), leading to more efficient data retrieval.\n\n**Q6: What tool is highlighted in the video for visualizing the benefits of the embedded pattern in Redis?**  \nA6: Redis Insight is highlighted as the tool for visualizing how the embedded pattern organizes all product data in one place, showcasing the advantages of this approach in data management." "meta" "{\"summary\":\"### Summary:\\n\\nThe video focuses on how to handle product data in retail app development, showcasing a transition from using a relational database model to utilizing Redis with the RedisOM library for more efficient data management. Initially, it describes a scenario where a retail app displays a list of electronics, including a name, image, and price for each product, as well as a detailed view featuring comprehensive details like multiple images, description, manufacturer, dimensions, and weight.\\n\\nIn a traditional relational database, two separate tables would be used: 'products' for the list view and 'product details' for the detailed view. However, the video introduces a more streamlined approach using Redis, where two collections, 'products' and 'product details,' are initially created. It then shifts to recommend an embedded pattern where product details are embedded within the products collection itself. This method allows querying for specific fields based on the view (list or detailed), making data retrieval more efficient and keeping all relevant information in one place.\\n\\nThe video concludes by demonstrating how to index and query data using the embedded pattern and showcases the benefits of this approach using Redis Insight, emphasizing improved data organization and retrieval.\\n\\n### Example Questions and Answers:\\n\\n**Q1: How does the video propose handling product data in a retail app?**  \\nA1: The video suggests initially using two collections for product data \xe2\x80\x93 one for the list view and another for detailed product information \xe2\x80\x93 and then recommends an embedded pattern where product details are incorporated directly into the products collection for more efficient data management.\\n\\n**Q2: What are the key fields included in the 'products' collection as per the video?**  \\nA2: The 'products' collection includes fields like name, image, and price, which are intended for the product list view.\\n\\n**Q3: What kind of information is stored in the 'product details' collection?**  \\nA3: The 'product details' collection contains more comprehensive information such as product ID, description, manufacturer, dimensions, weight, and a list of images.\\n\\n**Q4: How can the embedded pattern benefit data organization in a retail app?**  \\nA4: The embedded pattern consolidates all relevant data in one place by embedding detailed product information within the main products collection, allowing for more streamlined and efficient data queries.\\n\\n**Q5: How is data indexed and queried using the embedded pattern, according to the video?**  \\nA5: The video demonstrates indexing the data by setting up models with the embedded pattern and shows how to query the data by specifying the fields needed for each view (list or detailed), leading to more efficient data retrieval.\\n\\n**Q6: What tool is highlighted in the video for visualizing the benefits of the embedded pattern in Redis?**  \\nA6: Redis Insight is highlighted as the tool for visualizing how the embedded pattern organizes all product data in one place, showcasing the advantages of this approach in data management.\",\"location\":\"openai.summarize.docs\"}"
"SET" "openai-video-summary:c9Rr--1r6pk" "### Summary:\n\nThe video focuses on how to handle product data in retail app development, showcasing a transition from using a relational database model to utilizing Redis with the RedisOM library for more efficient data management. Initially, it describes a scenario where a retail app displays a list of electronics, including a name, image, and price for each product, as well as a detailed view featuring comprehensive details like multiple images, description, manufacturer, dimensions, and weight.\n\nIn a traditional relational database, two separate tables would be used: 'products' for the list view and 'product details' for the detailed view. However, the video introduces a more streamlined approach using Redis, where two collections, 'products' and 'product details,' are initially created. It then shifts to recommend an embedded pattern where product details are embedded within the products collection itself. This method allows querying for specific fields based on the view (list or detailed), making data retrieval more efficient and keeping all relevant information in one place.\n\nThe video concludes by demonstrating how to index and query data using the embedded pattern and showcases the benefits of this approach using Redis Insight, emphasizing improved data organization and retrieval.\n\n### Example Questions and Answers:\n\n**Q1: How does the video propose handling product data in a retail app?**  \nA1: The video suggests initially using two collections for product data \xe2\x80\x93 one for the list view and another for detailed product information \xe2\x80\x93 and then recommends an embedded pattern where product details are incorporated directly into the products collection for more efficient data management.\n\n**Q2: What are the key fields included in the 'products' collection as per the video?**  \nA2: The 'products' collection includes fields like name, image, and price, which are intended for the product list view.\n\n**Q3: What kind of information is stored in the 'product details' collection?**  \nA3: The 'product details' collection contains more comprehensive information such as product ID, description, manufacturer, dimensions, weight, and a list of images.\n\n**Q4: How can the embedded pattern benefit data organization in a retail app?**  \nA4: The embedded pattern consolidates all relevant data in one place by embedding detailed product information within the main products collection, allowing for more streamlined and efficient data queries.\n\n**Q5: How is data indexed and queried using the embedded pattern, according to the video?**  \nA5: The video demonstrates indexing the data by setting up models with the embedded pattern and shows how to query the data by specifying the fields needed for each view (list or detailed), leading to more efficient data retrieval.\n\n**Q6: What tool is highlighted in the video for visualizing the benefits of the embedded pattern in Redis?**  \nA6: Redis Insight is highlighted as the tool for visualizing how the embedded pattern organizes all product data in one place, showcasing the advantages of this approach in data management."
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "openai.summarize.docs" "message" "Summarizing https://www.youtube.com/watch?v=FQzlq91g7mg" "meta" "{\"id\":\"FQzlq91g7mg\",\"link\":\"https://www.youtube.com/watch?v=FQzlq91g7mg\",\"title\":\"Redis + MySQL in 60 Seconds\",\"description\":\"What are the possibilities for MySQL when integrating with the real-time power of Redis? Try Redis Cloud for free: https://redis.com/try-free/\\\\n\\\\nMySQL is open source, free, and can be fast when working on a relational database, but to handle modern use cases, your MySQL will need a boost of real-time performance - the type Redis Enterprise can provide. MySQL can be difficult to scale and lacks the modern features necessary to quickly operate complex queries. Enable your MySQL applications with the real-time performance power of Redis.\\\\n\\\\nFrom the blog: https://redis.com/blog/3-reasons-your-mysql-db-needs-redis/\\\\n\\\\nDownload our MySQL Solution Brief: https://redis.com/docs/modernize-your-mysql-database-with-redis-enterprise/\\\\n\\\\nExplore Redis + MySQL: https://redis.com/comparisons/redis-enterprise-and-mysql/\\\\n\\\\nTry Redis Enterprise Cloud for free: https://redis.com/try-free/\\\\n\\\\n#MySQL #SQL #Redis\",\"thumbnail\":\"https://i.ytimg.com/vi/FQzlq91g7mg/maxresdefault.jpg\",\"location\":\"openai.summarize.docs\"}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "openai.summarize.docs" "message" "Summarizing https://www.youtube.com/watch?v=I-ohlZXXaxs" "meta" "{\"id\":\"I-ohlZXXaxs\",\"link\":\"https://www.youtube.com/watch?v=I-ohlZXXaxs\",\"title\":\"Redis and JSON  Explained (Revisited)\",\"description\":\"Hungry for more Redis and JSON tips and tricks? Check out this video from Redis on how to create and update JSON documents in a Redis Stack instance! Then create secondary search indexes with Redis and Search to query Redis for some delicious results!\\n\\n00:00 Introduction\\n00:32 Why we use Redis Stack\\n00:44 Intro to the use case\\n01:22 JSON.SET truck:42 - create and store a vendor JSON object\\n02:00 JSON.SET location:23 - create and store a location JSON object\\n02:21 JSON.SET event:11 - create and store an event JSON object\\n02:47 JSON.ARRAPPEND - ad an element to an existing JSON array\\n03:11 JSON.SET - adding to an existing JSON document\\n03:52 Redis Search & JSON\\n04:46 FT.CREATE - creating a search index for \\\"truck:\\\" JSON documents\\n05:55 FT.SEARCH - query for text within a search index\\n06:40 FT.SEARCH - query for TAG words within a search index\\n07:10 FT.CREATE - creating a search index for \\\"event:\\\" JSON. documents\\n07:51 FT.SEARCH - query for numeric range within a search index\\n08:26 Conclusion\\n\\nLinks: \\nRU204: Storing, Querying, and Indexing JSON at Speed: https://university.redis.com/courses/ru204/\\nRedis University \xe2\x86\x92 https://university.redis.com/\\nRedis \xe2\x86\x92 https://www.redis.com/\\nRedis Stack \xe2\x86\x92 https://redis.io/docs/stack/\\nRedis and JSON \xe2\x86\x92 https://redis.io/docs/stack/json/\\nRedis and Search \xe2\x86\x92 https://redis.io/docs/stack/search/\\nNeed a Redis Cloud now? Sign up for a free Redis Cloud Essentials account \xe2\x86\x92 https://bit.ly/3xdTyMR\\n\\nJoin our discord server \xe2\x86\x92 https://discord.gg/redis\",\"thumbnail\":\"https://i.ytimg.com/vi/I-ohlZXXaxs/maxresdefault.jpg\",\"location\":\"openai.summarize.docs\"}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "openai.summarize.docs" "message" "Summarizing https://www.youtube.com/watch?v=KUfufrwpBkM" "meta" "{\"id\":\"KUfufrwpBkM\",\"link\":\"https://www.youtube.com/watch?v=KUfufrwpBkM\",\"title\":\"Redis Stack Workshop: Redis Stack OM Library for Node.js\",\"description\":\"Join us on April 13th at 5:30pm GMT for the Redis Stack OM library for Node.js workshop with Redis Developer Advocate Guy Royse. \\\\n\\\\nTune in to follow as Guy demonstrates how to create applications using Redis Stack and Node.js. Also, see how to store your data using Redis OM and store data using RedisJSON. Follow along with the sample application built with Express, which is available on GitHub. Guy will be on chat to answer any questions. Stay tuned!\\\\n\\\\nSource code for the demo application: https://github.com/redis-developer/express-redis-om-workshop\\\\nRedis OM Client for Node.js: https://github.com/redis/redis-om-node\\\\n\\\\nFrom the blog: https://redis.com/blog/introducing-redis-stack/\\\\nDiscover Redis Stack: https://redis.io/docs/stack/\\\\n\\\\n#Redis #RedisStack #NodeJS #RedisOM\",\"thumbnail\":\"https://i.ytimg.com/vi/KUfufrwpBkM/maxresdefault.jpg\",\"location\":\"openai.summarize.docs\"}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "openai.summarize.docs" "message" "Summarizing https://www.youtube.com/watch?v=LaiQFZ5bXaM" "meta" "{\"id\":\"LaiQFZ5bXaM\",\"link\":\"https://www.youtube.com/watch?v=LaiQFZ5bXaM\",\"title\":\"Redis Stack Crash Course: How to Build Apps with Superpowers\",\"description\":\"Redis Stack turns Redis into a multi-model database, enabling you to build rich real-time applications with Redis as a primary database. Explore Redis Stack - http://redis.info/3Lq9gbF\\\\n\\\\nRedis Stack consolidates the capabilities of the leading Redis modules into a single product, making it easy for developers to build modern, real-time applications with the speed and stability of Redis.\\\\n\\\\nRedis Stack is free and unifies the leading Redis modules in a single product. This makes it easy to start building with our Redis-based search, document, graph, and time series capabilities.\\\\n\\\\nRedis Stack is a suite of three components:\\\\n\\\\n- Redis Stack Server combines open source Redis with RediSearch, RedisJSON, RedisGraph, RedisTimeSeries and RedisBloom\\\\n\\\\n- RedisInsight is a powerful tool for visualizing and optimizing Redis data, making real-time application development easier and more fun than ever before\\\\n\\\\n- The Redis Stack Client SDK includes the leading official Redis clients in Java, JavaScript, and Python.  These clients also include our new suite of object mapping libraries which offer developer-friendly abstractions that get you productive with just a few lines of code. Known as Redis OM for .NET, Node.js, Java, and Python, these libraries also make it easier than ever to integrate with major application frameworks such as Spring, ASP.NET Core, FastAPI, and Express.\\\\n\\\\nSign up for Redis Cloud for free using code TIGER200: https://redis.info/3pyzVea\\\\n\\\\nGet the Source Code for This Video: https://redis.info/36PTesO\\\\n\\\\nFrom the Blog: https://redis.com/blog/introducing-redis-stack/\\\\n\\\\nLearn more about Redis Stack: http://redis.info/3Lq9gbF\\\\n\\\\n#RedisStack #Redis #RedisEnterprise #RealTimeData\",\"thumbnail\":\"https://i.ytimg.com/vi/LaiQFZ5bXaM/maxresdefault.jpg\",\"location\":\"openai.summarize.docs\"}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "openai.summarize.docs" "message" "Summarizing https://www.youtube.com/watch?v=SzcpwtLRgyk" "meta" "{\"id\":\"SzcpwtLRgyk\",\"link\":\"https://www.youtube.com/watch?v=SzcpwtLRgyk\",\"title\":\"RedisTimeSeries Explained\",\"description\":\"Have you ever tried to wrangle data via timestamps but never had the time to do so? Join Justin as we take a stroll down 'in-memory' lane with the RedisTimeSeries module.  The RedisTimeSeries module, part of Redis Stack, lets the developer create time series data structures within Redis with the speed you've come to love from Redis. Redis Stack is an extension of Redis that adds modern data models and processing engines to provide a complete developer experience.\\n\\nIn addition to all of the features of OSS Redis, Redis stack supports:\\n- Queryable JSON documents\\n- Full-text search\\n- Time series data (ingestion & querying)\\n- Graph data models with the Cypher query language\\n- Probabilistic data structures\\n\\n00:00 Introduction\\n00:25 What is RedisTimeSeries?\\n00:50 Example explanation\\n01:27 TS.CREATE - create a time series object\\n03:01 TS.ADD - add to a time series object\\n03:31 TS.ALTER - update a time series object's options\\n04:00 TS.RANGE - retrieve a range of a time series' values\\n06:06 TS.CREATERULE - create rule for a time series object\\n07:48 TS.QUERYINDEX - query labels across time series objects\\n08:29 Conclusion\\n\\nLinks: \\nRedis University \xe2\x86\x92 https://university.redis.com/\\nRedis \xe2\x86\x92 https://www.redis.com/\\nRedisTimeSeries \xe2\x86\x92 https://redis.io/docs/stack/timeseries/\\nNeed a Redis Cloud  now? Sign up for a free Redis Cloud Essentials account \xe2\x86\x92 https://bit.ly/3xdTyMR\\n\\nJoin our discord server \xe2\x86\x92 https://discord.gg/redis\",\"thumbnail\":\"https://i.ytimg.com/vi/SzcpwtLRgyk/maxresdefault.jpg\",\"location\":\"openai.summarize.docs\"}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "openai.summarize.docs" "message" "Summarizing https://www.youtube.com/watch?v=Z8qcpXyMAiA" "meta" "{\"id\":\"Z8qcpXyMAiA\",\"link\":\"https://www.youtube.com/watch?v=Z8qcpXyMAiA\",\"title\":\"Redis Streams Explained\",\"description\":\"Redis Streams allow us to aggregate numerous sources of information into one easily consumable source of truth. Join Justin as we learn about the utility and power of the Redis Streams data structure.\\n\\nLinks: \\nRedis University \xe2\x86\x92 https://university.redislabs.com/\\nRedis University Streams Course \xe2\x86\x92 https://university.redislabs.com/courses/ru202/\\nRedis Labs \xe2\x86\x92 https://www.redislabs.com/\\nRedis Streams Introduction \xe2\x86\x92 https://redis.io/topics/streams-intro\\nNeed a Redis cluster now? Sign up for a free Redis Cloud Essentials account \xe2\x86\x92 https://bit.ly/2wasiCa\\n\\nJoin our discord server \xe2\x86\x92 https://discord.gg/redis\",\"thumbnail\":\"https://i.ytimg.com/vi/Z8qcpXyMAiA/maxresdefault.jpg\",\"location\":\"openai.summarize.docs\"}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "openai.store.store" "message" "Storing documents..." "meta" "{\"location\":\"openai.store.store\"}"
"XADD" "LOGS" "*" "service" "generative-qa-bot@1.0.0" "level" "debug" "location" "openai.store.store" "message" "Found 2 new documents" "meta" "{\"location\":\"openai.store.store\"}"
"MULTI"
"HSET" "openai-video:0" "content_vector" "\xd6G\xce\xbc\xeb\xccH\xbb\xc2\x19\xde<\x8d\x81\xa7;K\xa7\x13=i\xaei=w\xe3\xa0<\x9ce3=k\xd3[<f\x0c;\xbc\xa9\x8e\x84=Ws\xd3\xbcB\x96\x8e<\xe0d9\xbd\xf0\xacu\xbc\x81\xa3z<\xa3\x83^\xbc\xcb\xa0\x80;\xf0z]<\xef\x16-;\x0bV\"=\x88\xec\x1e=?\x97N<rg$=7G\x8b\xbc\xa3jR\xbd\xe0}\xc5\xbc\x96\xc4\xc4=kb\x05;QH\x82\xbd\xf7\xdc\r=^\xd5\x83\xbcs\x800\xbc\x8e\x17\xf0;\x822$<e\xf3\xae<\x12\xde\x04:\xb2\x1cF\xbd\xe1>\a=F\x12\x0b<\x87\x12\xd1<,* \xbd\xfb\xc9\xe0\xbb\xa0\xc8#\xbc5\xf0\x00=&p\xa5<\xc0\xc2\xd3\xbc\xbb\xfb\xb2\xbcq\xa6b\xbd\x9e?\x81=A\xee\xd8\xbc\xc9\xec\xe4<\xa5],\xbd\x02\xcf\x7f\xbc\x8e\x8d\x8d<,\xf8\a\xbdL\x0bD\xbc\xa0\xaf\x17=\x12))<\xf3`\x11;\xad\n\x81=\xc8V\x1c\xbc\xa7i\x12\xbc\x05\x83\x1b<_9\xb4<\xae\xd2\xe1<A\xbc\xc0\xbc\xf6\xb7\x1b\xbdn\x044\xbd\xc5\xff\x11=N\x94f=\xd4;h<\x15\x803=\xa6\xda\xe8\xbc\xf3y\x1d=\xa9\xd9\xa8\xbc\xa3j\xd2<\x93\t\n;F\x9c\xed<c\xb5\xb0<\xa2\xed\x15\xbc\xe9\xa7\xd6\xbb\xf7\xc3\x81;\x88\xd3\x12\xbd\xf1\t\x87<N\x94f<WZG\xbd\x9c3\x1b<?\xfb\xfe\xbc1\n\xcd<fW\xdf\xbc%\xe1\xfb<\xa38:\xbdp\x10\x9a<\xebh\x18=R\xac\xb2\xbc1\xbf\xa8<\x83\x96\xd4<t\x8c\x16=\xf3`\x11=W\xbe\xf7<\xd9-\x82\xbd\xde\xf4\xa2\xbc;Mj\xbbDw{=\xe6\xba\x83\xbc\x9eq\x19=\xb9\xd6@<\xd9-\x02\xbd\xef\xe4\x14\xbd\x81qb\xbdrg$\xbc \xcf\xb6\xbb9\xb7!\xbbC\x13\xcb\xbas\x800\xbc\xf3y\x9d\xbcrN\x98\xbc\xa0\x96\x8b\xbc-\x8e\xd0;\xb9!e\xbc\xa4\xb5\xf6;w.E9)]\xf8\xbc`\x13\x82\xbb\xc2\x00R\xbd\xab\xe5\x0e=\x8c6\x83\xbc\x9b\x01\x83\xbc\xe1\xe1u\xbd0\x8d\x10=cj\x0c=s\xcb\xd4<\x93\t\x8a\xbd\x95G\b\xbd\xb0\xde\xc7\xba[\xefO\xbd\x17\xf0I\xbc\xd9\xe9\xfc;6\xd1m;C\xfa\xbe<\xdf\x8ak\xbd\xa3\x83^=T\x03==9\x9e\x15\xba[\xefO\xbd\x8d\x81\xa7<?\xfb\xfe;\xbaS\xfd\xbb\xa3\x1f\xae\xbb\xec0\xf9<\x9b\xbd}<\xe8\xb4\xfc\xbc\xafz\x97\xbc\x85\x1f\xf7\xbc\\\xc9\x1d\xbd\xaa\x0bA=\x8c\xf2}\xbc\x05\x83\x1b<\x97\xb7\x1e\xbdd2\xed\xbc\t\xe6\x8b\xbc\xf8Y\xca\xbcI\xcdE\xbc\xe1\xe1u\xbb\x12\xf7\x90<VA;\xbd\x04Q\x03\xbd\xef\xcb\b\xbd\xf9\xa4\xee\xbc\xcb\xa0\x00<\xd4\xb1\x85\xbd\xf7\x7f\xfc;\x91/\xbc<q\xa6b=\xc3\xa8\a\xbd\xc7\xc7\xf2:\xf9\x01\x00\xbd\x17\tV=\xbf,\x8b<0t\x04\xbdY\x98E\xbc=r\\\xbc\xbc\xee\x8c<\x0b$\n\xbd>~B\xbcv\xca\x14\xbd!\xdb\x1c:\x9c\x1a\x8f\xbc\xa9\xf24=$2\xa7\xbc\xf2\xd1g=\xbfw\xaf\xbccj\x0c=jo\xab\xbc-\xa7\\<\xbb\xfb2=9\x9e\x95\xbc\x8c\xc0\xe5\xbb\xc9b\x82\xbc4z\xe3;\xbf,\x0b=\xea6\x80=)\xf9\xc7\xbaQH\x02=yS7<e\xa8\n\xbd\x8d\x9a3\xbc(|\x0b\xbd_ \xa8\xbc{x)\xb9\xc7\xc7\xf2\xbacj\x0c=\xa9\x8e\x84<\x1f\x84\x92\xbc\"\r\xb5\xbc\x89\x1e7\xbc\x03\x90A\xbc\xa7i\x12\xbd\x1d-\b=\xef\xe4\x94\xbc\x8f\xbf%=rN\x18=p\xde\x01\xbc-\xa7\xdc<`\x84X\xbb\xb2\xb8\x15\xbb\xa8\xff\xda\xbc\xc2\x19\xde<\bpn<CE\xe3<\x04\xf4q<\xe3\x06\xe8\xbc\xf8'\xb2\xbc\xea\xd9n=\xed\xbf\"\xbd\x8a*\x1d<\xf1\"\x93<K\xc0\x1f\xbd\x1bl\xc6<0t\x84;\x83>\x8a<\x92HH\xbd\xc5\xe6\x85;\xb6M\x1e=\xf5\x9e\x8f;\xa5\x8fD\xbd\xb2\x1cF\xbd\x1d-\b<6\x86\xc9<\xc6J6=\x16\x16\xfc\xbc\x17\tV;\xf2\xd1\xe7\xbcVA\xbb\xbc\x0e\xc6\xb8\xbd\xda\x0e\xef<|\xaa\xc1<X4\x95<\xa4+\x94<\xe5]\xf2\xbc\xbbF\xd7\xbc\x1f\xb6*;S\x9f\x8c<-\\8\xbd\x7fLp<\xbcxo\xbc\xf6\xd0'\xbd\xb8\xfcr\xbc\xd9-\x02\xbd\xed\xf1\xba\xbbPn4\xbc 3g<\xd6\xef\x83\xbc\xa9\xa7\x10\xbc3/\xbf<\x01\a\x9f<P\xa0\xcc;\xbe\x9da;[\xef\xcf;\x9a\x0e):;\xdc\x13\xbdrg\xa4<M\xcc\x05=`\xb6\xf0\xbb\x89i\xdb<\xa2^l\xbc\x87Di=r\xd8\xfa<5\xf0\x00\xbd\t\xe6\x0b\xbd<\xf5\x1f\xbdW\xbew\xbd\xc6\x95Z<\x14g'\xbcS\x10\xe3<\x92a\xd4\xb9v\xca\x94<\xf6\x02@<O\xc6~<S\x9f\x8c<5\"\x99\xbc\xd9x\xa6\xbcs\xcbT<\xa5D\xa0;\x8bu\xc1<?\xfb~\xbc\xe8\xb4|\xbc)\xf9G=\x94\xb8\xde<\xe4|\x05\xbdq\xa6\xe2;\x94\xb8\xde\xbaB}\x82<\xcc\xd2\x18\xbdn\xb9\x8f;\xe8\xf8\x81=\x8cO\x8f\xba\xfcq\x16\xba\xd3\xa5\x1f\xbc'\x06n<B\xe1\xb2\xbc\x97\x85\x86<\xa4\xb5v\xbce\xa8\x8a\xb9\xb6f*\xbd\x13\x8dY\xb7\xf6\x1bL\xbd\xfa\x1a\x0c\xbcX4\x95\xbc\xdeX\xd3;\"&A\xbd\xb9\xefL=\x9b\x01\x03\xbcp\x10\x9a;L=\xdc\xbb\x93\"\x96\xbc\xe8\x11\x0e\xbd\x02\xcf\xff\xbc\xd9x\xa6<\x8e\x17\xf0\xbc=\x01\x06\xbd\xf2\x86C\xbd\x9f\a\xe2\xbc\x95\xeav\xbc\x04\xf4q<\x16\xa5\xa5\xbc_R\xc0<\x12))\xbdR\xc5\xbe<\a\xc1\x19\xbdM\x17\xaa\xbb\xcdha\xbc\x9d\xb0W\xbd~\xe8?=\xbe\xcf\xf9<\xc0\xa9G\xbc&W\x99\xbc\rb\x88\xbd5T\xb1\xbcl\xc6\xb5\xbc\x18\xca\x97<\x80\r2;\x17\tV=Qa\x8e<k\x05t<\xb0\xc5\xbb\xbc\xd9_\x1a<\x7f\xdb\x99<\xb9\xd6@\xbc\x97\x0fi<\xcb\x11W=\x05\x83\x1b\xbd\xe1>\x87\xbc~\x1aX\xbd\xae\xa0I=n\xeb'\xbcO<\x1c=/\x9a6<\x1e\xc3P=D\xbb\x00=\xa9\xc0\x1c\xbcs\x99<<\xf7\x7f\xfc\xbc;\xdc\x13=\x0b=\x16=\xa2\xed\x15<\x9b\xbd\xfd\xba\xd8\xb7d\xbd\xd8\x85\xcc<\xe5\x12N\xbc}\x9d\x1b\xbd\xb4\xdd\x87\xbaV(\xaf<\x8f\n\xca\xbaaw2=\xb6f\xaa;\xa2^l\xbc\xe4\x95\x91=\xd1\xb2E<\"?\xcd<\x81\xa3z<\xa1\x13H\xbdIi\x15:R\x93\xa6\xbb\x99\xc3\x84\xbc\xc1\x83\x15\xbc%\xaf\xe3;\xca\x94\x9a\xbcC\xfa>\xbd\x05\x83\x9b<$K\xb3\xbc_ (=kb\x85\xbcR\x93\xa6\xbb}\x9d\x9b\xbc\xaen\xb1\xba\x1c\xb7j<\xbdR\xbd;\xdf\x00\x89:E8==\x1f\xb6\xaa\xbb\xac{W\xbd\xe1\xe1u\xbc\x1e\x0e\xf5\xbc\n\x95`=\xba\xb0\x8e<x\xef\x06\xbd\x93\"\x16\xbc\x17\xd7=\xbd\x10\x1dC\xbd~\x1aX\xbc\x17\xf0\xc9<\x9b\xbd\xfd;K\xf2\xb7\xbc\x02\x13\x05<\x83\x96T;\x94m:;}'~\xbc\xd3\xbe+\xbd\xbe\xcf\xf9\xbc.\xd9\xf4;M\xfe\x9d\xbd\x89i[<\xd7!\x1c\xbd\x97\xb7\x9e<\xab\x88}\xbc\xda\xdcV\xbcHP\t=\x13\x8dY<n\xeb\xa7\xbc\x05\xb5\xb3\xb8\xe2p\x9f\xbc\xba\x97\x82<\xf0HE\xbb\xfe\x96\x88\xbc*\xd3\x95<E8\xbd<H\xf3\xf7<\x86\xe0\xb8\xbd\x04Q\x03\xbd\xb9\xd6@=W\xbew\xbc\x9a@A=\xe1>\x87=\xe3\x06h\xbc\x97\x0fi=\ncH=%%\x01=\xfa3\x18\xbd\x04\xc2Y<D\xd4\x0c=\x9e\xa31\xbb\xcb\xa0\x00<\xc8\xa1@\xbd\x86|\x88\xbd\x94\x86\xc6;[\b\\\xbc\xc8\xa1\xc0<\x0e\x94\xa0;\xd7\b\x10\xbc\xfd\xbc:\xbc`,\x0e\xbd\x9c3\x9b<\xe1\xaf]\xbb\xed\xbf\xa2<\xdb\x84\x0c\xbbz\x9e\xdb\xba\xe8\xf8\x81<\x97\x9e\x92;\xec\xfe\xe0\xbc\x86\x95\x14\xbb&\xbbI=s\xb2H\xbc~\x01L\xbd*\x05.\xbdc\xb50\xbd\xec0\xf9\xbc`\x13\x02=4z\xe3;\x95\xeav=\x93\"\x16\xbc\x8c\xf2}<\x9eX\x8d=\xd9x&\xbd(\x95\x97\xbb\xd0g!;\xde&\xbb\xbb\x83\xc8\xec<]\x14\xc2< \xe8B<z\x9e[;\xa81s;\xa3QF=\xb0\xac\xaf\xba\xe3\xd4\xcf;\xa1\x13H\xbd\xef\xfd \xbc\xd5.\xc2\xbc\xd2\x16\xf6:\n\x95\xe0\xbc\xca{\x0e<\x13t\xcd\xba\x03^\xa9<\xc0\xa9G;\x03\x90\xc1<\xc1j\t\xbdd2\xed\xbc;\xc3\x87\xbc7y#\xbc'\xd4U<\xf7\x7f|;\xfc\xa3.\xbc|\xf5\xe5<bQ\x00\xbc\xe7\x82\xe4\xbcg\x89\xf7\xbcm\xf8M\xbc_R@\xbd\xd4;\xe8\xbbI\xcd\xc5<r\xd8z\xbcN\x94\xe6\xbc\xa1,\xd4\xbbrN\x98;\xa3jR<\x06\x19\xe4<\xf0\xac\xf5\xbc\xd6`\xda\xbc\xfe\xc8\xa0\xbcT\xb8\x189\x96\x92,\xbd\x0c\x88\xba\xbb\x9ce3\xbd\xe0K-=\xffE]\xbb\x9f\xd5I<j\x887\xbd\xad\n\x81<\x1d_ \xbc\xe9\xa7V<Y\xb1\xd1;`\x84X;!\xc2\x10=\xeb\x81\xa4\xbb\x87\x12Q\xbbU\xdd\x8a<\xffE]\xbd\x80?\xca\xbbD\xd4\x0c=D\xd4\x0c\xbb1\xd84\xbc\xcc\x1d\xbd:$d\xbf;\xfcX\n=\xb9\xbd\xb4<\x84W\x96\xbc\x03E\x1d\xbd\xcc\xb9\x0c\xbc@X\x90\xbc\xbe\x9da<\x9d\xe2\xef\xbcw\x15\xb9\xbb\x9e\x8a%=\x99\xc3\x84\xbc\xcdha<\xcb\x11\xd7<e\xf3\xae<\x0c\xbaR<\xfd\xd5F<\x8cO\x8f;\x1b!\"\xbb.O\x92\xbc\x8a\xf8\x04=\xef\x16-\xba\xf3`\x11=QH\x02=/\xcc\xce;*\xec\xa1\xbc\x1bS\xba<\x96\x92\xac\xbc\b>V\xbc\xd7l@\xbc_\a\x1c\xbd\x1d_\xa0<\x8a\x11\x11=8\xf6\xdf;\xbfw\xaf<\x13t\xcd<\xb4\xf6\x13\xbc\x95`\x14\xbd\xb5\xa5h\xbc\xcc\x1d\xbd8\xd6`Z\xbd\x8a\xf8\x84\xbdQ\xeb\xf0<`\x84\xd8\xbc\x12\xde\x04\xbdyl\xc3\xbb\xb2\x1cF\xbcoOX=\xad\n\x81;\x9b\x01\x83;\xdf\x8ak\xbb\x97\x0f\xe9<}k\x03=ts\n\xbd\xfd \xeb\xbc\xc8\x884\xbd%\xaf\xe3\xbc%>\r<I\xcdE\xbc,C,\xbc\xec\xfe\xe0\xbc\x0bV\xa2;\\\x97\x05=\xd7\b\x109\x84W\x16=6\x9fU;\xdde\xf9\xbb\xde&;=J\xe6Q;\xbe\xcfy\xbc\xf5\x85\x83\xbb7\x92\xaf<\x95y \xbc\x06K|<\n1\xb0<\xad\xado\xbc\xdc\xe8\xbc\xbc\xbc\xd5\x80\xbc\xc1\x9c!\xbd\xea6\x80=\xd5.\xc2\xbb\xe5\xf9\xc1<\xd1\xb2\xc5\xbcg\x18!\xbcb\r\xfb\xbab\xa9J:P\xa0\xcc;\xf7Md\xbd\xf2\x9fO\xbc\xa1\xfa;\xbd\xb4A\xb8<#\xe7\x02\xbdq[\xbe<p)&<!e\xff<\x8a*\x9d\xbb\x97\x9e\x92\xbc\xa9\xd9(\xbd\xf8'\xb2\xbc\xbaS}=\xbcxo<\xa1\x13H\xbb-\xa7\\;\x1e\xc3\xd0<\x897C\xbc\x0bV\"\xbbe\xf3\xae<\x00x\xf5\xbc?\xc9\xe6:d2\xed\xbb\x8c6\x03\xbd\x9b\xbd}<\x10\xeb*\xbds\x80\xb0<\xfc\x8a\"<Ug\xed<\xc4%D<\xe1\x96Q<*\x05\xae\xbb\x1c\x85\xd2\xbc\x1a\xef\t\xbb\x94\xb8^<\x96\xdd\xd0<Y\xe3\xe9<\xe6\xec\x1b='\xd4U\xbb\xe0K\xad\xbd\x84\xa2:\xbb\xd9-\x82:<\xf5\x9f\xbcI\x82!\xbd\xc4p\xe8\xbc\x1e\xdc\xdc\xbcX\x1b\x89\xbc\xebh\x18\xbb\x12))<\xb0\x93\xa3\xbck\xd3[\xbd>e6\xbd\xa7\xb46\xbc\x05j\x8f<\"\r\xb5\xbc\b>V\xbc\xb35R\xbbf%G<\xafa\x0b<\xfc\xa3.\xbc\xc5\xff\x91;V\xf6\x16=\xa5\x8f\xc4\xbc\xaen1\xbdC\xfa\xbe<g\xff\x14\xbb8\xab;<)+`=\xcb\x11\xd7\xbb\xe2p\x9f<\xf2\x9fO;^\xee\x8f<t\x8c\x16<?\xc9\xe6<\x06K\xfc\xbb\xb4\xf6\x93\xbc<YP\xbd\xa4\x12\x88\xbc\xa2^\xec\xbc\x1b\b\x16\xbc4zc\xbc\b>V\xbcSB\xfb\xbb\xa0\x96\x0b\xbc\xf4\xab\xb5<e\xda\"\xbc\xc6cB;bQ\x00=\x7f\xc2\x8d<\x9c\x1a\x0f=\xbb\xfb2\xbb\xed\xd8.<I\x9b-\xbc\xe1\x96\xd1<\x9c~\xbf<\x04Q\x83\xbcV\xf6\x16<B\xaf\x1a\xba\xe7\x82d\xbcR\xc5\xbe<J\xe6Q\xbc\x12\x10\x1d=\xe77@\xbd\xc7$\x04=-\\\xb8\xbb\xda\x0eo<\xd05\t\xbc\xbd \xa5\xbc\xf2\x86\xc3<\r\xec\xea<\x8b\\5<0\x8d\x10;E\x1f\xb19\xb0\x93\xa3<#\x19\x1b=\x8f\xf1=\xbcU5U<\xf3`\x11\xbb\x9d\x97\xcb:\xc6\x95\xda<\x84W\x16=M06\xbc?\x97N<!\xa9\x84\xbc4z\xe3<\x1fk\x86\xbc\xa81\xf3\xbc\xeb\xb3\xbc;\x18\xca\x17\xbd\xf3G\x05\xbd\x04Q\x83\xbc\x96\xddP\xbc\x9b\x01\x83<\xd5\xfc):rN\x18\xbb\xad\xad\xef;\xa8\xff\xda\xbbc\x9c\xa4\xbd\xc5\xff\x91\xbb~\x1a\xd8<\x8d\xb3\xbf\xbc3\xfd\xa6\xbc\x1blF<\xcft\xc7<\xe9\xa7\xd6\xbc\x14\x1c\x03=\x96\xab8\xbdL\x0b\xc4\xbc\xbfE\x17\xbdLo\xf4\xbb\xf8@>\xbd\xddey\xbc\xe1\xaf\xdd<\x1e\x0e\xf5<\xe5\x12N<3\x16\xb3<`\xb6\xf0:/\x9a6\xbcl\xdf\xc1<\xc9\xecd\xbc\xab\xe5\x8e<\x82}\xc8<\xd7!\x9c\xbc\xa7\xcd\xc2\xbb\x0f\xa0\x06\xbdA\xee\xd8\xbb\xc9\xecd\xbc<YP\xbc@\xa34=!\xdb\x1c\xbdU5\xd5;\xe3\xd4\xcf\xbc\xe0d9<\xf4\xf6\xd9;[\xd6\xc3\xbb\x89PO<K\xc0\x9f\xbc\xbfE\x97\xbc\x80&\xbe\xbc\xd7l\xc0<\x92\x93l\xbd\x9eq\x19=\xc2\xe7E\xbd\x16s\x8d\xbc\xe6\xec\x9b;?\xc9f\xbc.6\x06\xbcVA\xbb\xbc\xb1)\xec:\t\xe6\x8b\xbc\bpn<z\xd0s\xba\xcbCo<.O\x92\xbc\x9f\ab<\xa2\xd4\t\xbco\x81\xf0\xbb5T\xb1\xbc\x1e\xc3P<\xa1\x13\xc8<\xf0\xac\xf5\xbcm\xa0\x03\xba\xca\x94\x1a\xbc\xcbC\xef\xbb\x81\x19\x18=\xb64\x12=\xe8\xb4\xfc<\xf8\x0e&<\x0197<\xb0\xc5;<\"?M<\xed\xa6\x16\xbc}k\x03\xbc\x88\xba\x86<\xc4\x0c\xb8\xbcP\x87\xc0\xbcR\x93&;+\x1e:<\xeb\x81\xa4\xbb\xc8\x88\xb4<\x8c\xf2};\xd9-\x82<j\x88\xb7\xbc\xa2\xd4\t\xbd\xd9-\x02=\x116\xcf;c\xb50\xbbbQ\x00=\xfe\xaf\x94\xbc\xa3\x1f.\xbc\xb0\xf7\xd3\xbb\x06\x19d<\xd1\xe4]\xbcY\x98\xc5\xbc\x91\xe4\x17<2#Y<\x1d_ \xbc\xbb-K=\xc0\xf4\xeb\xba.O\x92<\xf4\xab5\xbc\xfd\xbc\xba<2Uq8)]x\xba\xbdkI<$2\xa7\xbc/\xcc\xce;C\x13K\xbc\xd2\x8c\x13\xbd\xa1\xe1\xaf<\x87D\xe9<\xe0}E\xbcy:\xab<,*\xa0<1\xf1@<\xa7\xcd\xc2;p\xf7\r\xbb\xc6\x95\xda<\x9cL\xa7\xbc\xbdR\xbd:\x9f\xd5\xc9\xbb\xeeUk9\xa38\xba<\x145\x0f==r\\<T\xd1\xa4<y!\x1f\xbb\xeb\x9a\xb0;0\x8d\x90=\xf4\xf6\xd9\xbb\x88\xec\x1e=M\xcc\x85<=r\xdc;1\xa6\x1c\xbc\x1e\x0e\xf5<?\xc9\xe6<\xa9\x8e\x84\xbc\x0f\x11]\xbc\x17\xf0\xc9<\x01\a\x1f\xbc2\xb2\x82\xbcZr\x93<%%\x81<+\x1e:\xb9\x95\xea\xf6;P\xb9\xd8\xbc0\x8d\x10=\xef\x16-<<@\xc4\xbc\xeb\xb3\xbc<EjU=!\xa9\x84\xbb\x00\xd5\x06=\xbf,\x8b\xbc\xe4\x95\x11\xbc\xc9\x1e\xfd<$}K\xbc\xf4\xdd\xcd<\xad#\r=\xcdh\xe1;SB\xfb:\x13[A=\x1b!\"\xbc\x04\xf4q\xbb\xd0N\x15\xbd#\x8aq\xbcU5\xd5<\x10\xb9\x12=}\x9d\x9b\xbc2#Y\xbc\\\xb0\x91<\x01k\xcf<\x8c\xf2\xfd<\xae\x87\xbd<\x94\xb8^=\xd6\x92r<\xd4;h:Qa\x0e\xbd\xea\xd9n:n\x04\xb4\xba\xce)\xa3<\xce\x10\x97<.6\x86\xbcM\xcc\x85\xbc\x86\x95\x94\xbc\xf7Md\xbc\xab\x88}\xbb\xa6\xdah<r\xd8z\xbc)]x<\xaaVe<\xd1\xb2E7N\x94f<\xeb\x81$\xbb\bp\xee\xbc0\x8d\x10<,\x11\x14\xbc\xbe\x9d\xe1\xbc\xe6\xd3\x0f<C\x13\xcb;\xd4;h\xbcr\xd8\xfa<\xd5\xca\x11=U5U\xbc`\x13\x82\xbb\x1fk\x86\xbbB\xc8&<[\b\\<\xda\xc3J\xbbb\r{\xbb\xb3N\xde\xbb,\xf8\a\xbdz\x9e\xdb;\x19\xfc/\xbd\x94\xb8^\xbb\xb4\x0f\xa0\xbc\xe9u>\xbd\xa4\xb5v\xbbXf-\xbdEQ\xc9\xbc\x93T\xae<5T1\xbd,\x11\x14<\x04Q\x83<g\x18\xa1\xbb\xbdR=\xbcL=\\\xbc]\xfb5\xbc\xf9\x01\x80<?\xc9\xe6\xbb<@D<\xa2^l<\x8a*\x9d\xbc\x984[\xbc\x18\xb1\x0b=\x9f\xbc==7`\x17\xbd\xd5\xfc\xa9:yS\xb7\xbcGv;;\xd9-\x02\xbd\xa4\xb5\xf6\xbc\x97\x85\x06\xbd\xae\xa0\xc9<>\x1a\x12\xbc,C,<,\xf8\x87<z\x9e[\xbac\x83\x98<\x8bC\xa9<q\xa6\xe2\xba\x14\x1c\x83<\xd4;h\xbbc\x83\x989^\x91\xfe<\x8bC\xa9<D\x06\xa5\xbc~\xcf\xb3\xbc\xfe\x96\b\xbc0\xfe\xe6<\xf0z]\xbd\xd0g\xa1\xbb\x1e\xaaD\xbcpB2\xbd\xacbK<\xf3y\x1d\xbcv\xca\x94<\x8e\x17p\xbb\xd5\xca\x11=Y\xe3\xe9<\x9d\xb0W=\n10;\x7fL\xf0<\x06\xe7K\xbd\xec\x8d\x8a\xbc\xe6\xd3\x0f\xbb\x15\xb2K\xbd\xe6\xd3\x8f\xbb\x14\x1c\x83;g\x89w<2#\xd9\xbcs\x99<;\xbaS\xfd\xbcfW\xdf\xbc\x822\xa4<_ (=\xaa$M<k\xd3\xdb;\xa81\xf3\xbcQH\x02:\x12\xde\x04:\x15\x99?:\\\xb0\x91;\xe5\x12\xce\xbcDw\xfb\xbc\xd3\t\xd0<n\xb9\x0f<\x18;n\xbb\\:\xf4<\x02\x9dg<\x92aT<0t\x04<\x12\xf7\x10=\xc3\xf3+<\xbbFW\xbcm\\~<\x14\x1c\x83\xbb\xf8@><2#Y<\x93T.=T\xea\xb0<\xc6cB\xbd\x9eq\x99<\x9e\xa31;j\xba\xcf;\xd9-\x82;K\xc0\x9f;\x1d-\x88<\x9cL'=\x91\xe4\x17\xbc\xe4\xc7)=c\xce\xbc<\x19\x15\xbc\xbc\nJ<<{-\x85\xbcaE\x1a\xbccj\x8c<`\xb6\xf0\xbb\xe4|\x85\xbcq\xa6b<HP\t;\xeb\xb3\xbc\xbc\xcd6\xc9<\rb\b\xbd\x10\xd2\x1e=\xe4\xae\x9d<\x02\x9d\xe7<\x88\xba\x06<\xed\xbf\xa2\xbc/\x9a6=\xb1\x9f\x899E8=\xbb\x90<\xe2\xbb\xec0\xf9<\x02,\x11=\xeeUk\xbc\xd3\xd7\xb7\xbc\xeeUk=1\xf1@<\x8buA<\xab\xe5\x8e\xbb\x9e\x8a%=3\x163\xbdy:+\xbc\xb4A\xb8<3\xcb\x0e;\xe3\x06h\xbcT\xb8\x98\xbc`,\x8e\xba\x0f\xa0\x06;\x0e\xf8\xd0;\x96\xab\xb8\xbc\xaen\xb1\xbc\x8ch\x9b\xbc\xd1\xb2E=\xbd\a\x19\xbd(\x95\x97<jV\x1f<B\x96\x8e;\xeeU\xeb<q\xa6\xe2<]\xe2)\xbc\xe0K-\xbbA\xee\xd8;>e\xb6\xbc\xa8\xe6\xce\xbb\x95\xeav=!\xf4\xa8<\x897C;\xbdkI\xbb\x16Z\x01=$2\xa7\xbc\xd6`Z<L\x0bD<\xd9F\x8e<#\xe7\x82\xbc\x10\x04\xb7\xbc\xe1\xe1\xf5:\xa0\xc8#\xbb\xbb\x14\xbf\xbb\xea\xd9n<\x8f\xbf%<<\x0e,=\xf5(r<&\xbb\xc9:\xbd \xa5\xbc\xed\xd8.\xbcWs\xd3\xbcu\xbe\xae;v\xca\x14<\bpn;\x80\r\xb2;\x03\x90\xc1\xbc\xbdkI<\xa5\xa8\xd0<z\xd0\xf3\xbbEj\xd5\xbb-u\xc4;R\x93\xa6<\xed\xf1:\xbdF\x12\x0b<\xcdh\xe1\xbc\x7fLp\xbd\xab\xcc\x02\xbc+\x82j\xbc\x8a\x11\x91\xbbJ\xe6Q\xbd\xd6\xef\x03\xbd\x97\x9e\x12=\xf9rV;\x94\x86\xc6;@\x8a\xa8\xbaXf-=\x18\xb1\x8b:D\xed\x18<?\xc9\xe6<\xe7PL\xbc\x1c\x85R<\xf1\t\x87=CE\xe3\xbc\xf5(\xf2<\x0e\xc68\xbc`\x84\xd8<3/\xbf<+7F\xbc\x85\x1f\xf7:\xf2\xd1g=\xd9F\x0e\xbc\x83\x96T<\x9cL\xa7<\x90nz<1\xbf\xa8\xbcn\xeb\xa7<\x17\xd7=<\xbe\x9d\xe1\xbc\xe8*\x9a\xbc\x13tM<\xa7\xcd\xc2\xbc,C\xac<%>\x8d\xbc\x0co\xae;\xf3y\x1d<\xc0\xc2\xd3;\xf4\xf6\xd9\xbcd2\xed:\xe8\xb4\xfc\xb8l\xad)=\x98\x02C;\x9c~?\xbc`\xb6p<v\xca\x94<\xde\r\xaf\xbc\xec0y<\xe1>\a\xbd\x9b\xbd\xfd;;\xdc\x13<\xd4;h\xbd\xef\x16\xad<\xd05\t=\xb0\xf7\xd3\xbcg\x89\xf7;O\xc6\xfe\xba\x1a\xef\x89;\x81q\xe2<%\xe1{\xb9!\xa9\x04\xbcO<\x1c\xbd\xb5ZD<i=\x13\xbd\xf1\t\a=d\xe7\xc8;7y\xa3\xba\x0f\xa0\x06=\x1dx\xac\xbcQz\x1a<#\x19\x1b;\xf9rV\xbc\xc8\xba\xcc\xbc\x15\x99\xbf<\xc0\xc2\xd3;\xa6P\x06=,C,=\xef\xfd\xa0<\xc1\x83\x95\xba\xb7\x98\xc2\xbb\xca\xdf>=\xce)\xa3<<@\xc4\xbc\x11\x9a\x7f\xbc7G\x8b\xbb\xa2\xd4\t=t\xfd\xec\xbb\x03w\xb5\xbc\xbb\x14?\xbb\xf7\xc3\x81\xbc\x7fL\xf0<00\xff\xbb\xd1\x80\xad; \x01\xcf\xbc\xd5\xca\x11\xbc\t\xe6\x8b;\x06\x19d<\x9c3\x9b:\x8f\xbf\xa5\xbc\r\xec\xea:u\t\xd3\xbb}\x9d\x9b<\x94\xb8\xde:\x8f\xd81\xbc\x9eX\x8d<yl\xc3<\xdb\x9d\x98;\xe0\x19\x15<\xf0aQ\xbc\xc8\x884<\x85\xed\xde\xbccj\x8c\xbb\x93;\xa2\xbc\xbc\xee\x0c=y!\x1f<\xe9C\xa6\xbak\x05t\xbc\xa2^\xec\xba\x17\xf0\xc9<\x80\xf4\xa5\xbbkb\x05=c\x9c$\xbb>3\x9e<:\x02F=\x1bl\xc6<\xef\x16-<\xb9\xef\xcc<\xa9\xa7\x90<\xf8\x0e\xa6\xbb\x84\xbb\xc6<\xd6\x92\xf2\xba\xe02\xa1<\xcc\x1d\xbd\xbcS\x10\xe3\xbc\x0e\xad,\xbdD\xd4\x0c\xbcu\xbe.\xbb_9\xb4<h|Q\xbch|Q<7`\x17=\xe9C\xa6<\xe2p\x9f\xbb\x9f\ab\xbc\xb8\xa4(<\x8c\xf2\xfd;XM!\xbc\xdbk\x80;3\xe4\x1a\xbc>~B<+\x82j<\xf0z]<H\xf3w<\xfd \xeb\xbbC\xfa\xbe\xbc&\x891\xbd\xb7\x98B<\xa7\x82\x9e<\xb6\x1b\x06=\xf6\xb7\x1b\xbc\xf1T\xab\xbb\x0f\x11\xdd:\a\xda%=\x9a\x0e)\xbc\xd1\xe4\xdd<\xc2\x19^\xbb\xef\xcb\b<\xba\xc9\x9a;\xab\xe5\x8e<HP\t\xbcU5U<)+\xe0;l\xad)\xbb\x11\x9a\x7f\xbcc\xb50=j\xa1\xc3<\x1a\x92x\xbb\xab\xcc\x02;\x90<\xe2<\x1c\xb7j<\xba\x97\x82<\xb0\xc5;<\xc6\x95Z<\x8e\x8d\x8d<}\x9d\x1b\xbc#\x8aq\xba\x1a``\xbc\\\x97\x85\xbc\xe4|\x85<e\xc1\x16\xbdH\xc1\xdf\xbb\xc3\xf3\xab\xbb\x82}\xc87n\x1d\xc0\xbc\xb7\x7f6\xbb\xf2\xd1g<\x05j\x0f<\xa9\xa7\x10\xbc\xab\xcc\x82\xbc\xb4\xf6\x13\xbc\xb8r\x90\xbc\x1b!\xa2<!\xf4\xa8\xb9)+`\xbc\xaen\xb1<\xafa\x0b\xbdM\xfe\x1d<b\xdb\xe2\xbc\xb6f\xaa<fW\xdf\xbc\xc3\xf3\xab\xbb\x1a\x92x\xbb\\\x97\x05\xbb\xafz\x97\xbc\xa7\xcdB\xbd\x10\x04\xb7\xbc\xba\xc9\x9a\xbb\xb2\x03\xba<\xc3K\xf6\xbcK\xc0\x9f<HP\t\xbd\x10\xeb\xaa<\xbd91=\x19.\xc8<B\x96\x0e;e\xa8\n<\xfd\xd5F<s\xcbT<\xf3y\x9d\xbc\xafa\x0b\xbdM\xcc\x05\xbd\xd6`\xda\xbcS\x86\x00\xbd^\xd5\x03=\x91\x16\xb0<oO\xd8\xbcD\xed\x98<\xb2\x1c\xc6\xbc\xd5\x15\xb6;k{\x91<\xba\xc9\x1a\xbd\x1dx\xac\xba`\x84\xd8<`,\x0e\xbde\xda\xa2\xbb\x05j\x8f:\xd5\xe3\x9d<_\a\x1c=\x1fk\x86\xbc}\x84\x0f=\x11\x9a\x7f\xbc\x03^)=Z\x8b\x1f=Qz\x9a\xbc\xf6\xd0\xa7\xbb\xebh\x18<\xb5\xa5\xe8<HP\x89\xbbc\x9c\xa4<\x03w\xb5\xbc\xd2\x8c\x93:,\x11\x14<T\x1cI=\xd7S\xb4\xbc\x82d<=3\xfd\xa6\xbcN\x94f<\a\x8f\x81\xbc9(\xf8<\x14\x1c\x83=}\x84\x8f<\xb2\xb8\x15\xba\xfb\xfbx;\xde&\xbb\xbc\"?M;\xe5+Z\xbc\x1a``<\x1f\xb6\xaa<q\xa6b\xbc(\xc7/=\x0bV\xa2\xbc\x95`\x94<\xb4\xdd\a=\x1d-\b=\xfa3\x98\xbc\xb4\xf6\x93<@X\x90;\xae\xa0\xc9\xbcO\n\x84<^_\xe6:\\:\xf4\xbb\x9e?\x01\xbdH\xc1_<\xcft\xc7\xbb\x19.H\xbd\xf4\xab\xb5\xbc\xde\r\xaf\xbb\\\x97\x05\xbcv\"_\xbc\xb3N\xde\xbc\xb4A\xb8\xbc\xb0\xf7S=\xba\x97\x82\xba\x96\x92\xac<S\x10c<\xfe\x96\b\xbc\x0b$\n\xbd\xbb\x14\xbf\xbcS\x10c\xbc\x8c\xc0\xe5<a^\xa6\xbb\x0e\xad,\xbd\xcdh\xe1;\x0e\xad\xac\xbc\xe3\x06\xe8;j\xba\xcf<\xde\xf4\xa2;\xf7\xdc\x8d;\xf4\xc4A\xbc\x9f\xd5I\xbbXM\xa1<" "content" "### Summary:\nThe video discusses how to address slow database query issues while maintaining cost efficiency, specifically through the implementation of the Cache Aside Pattern using Redis and MongoDB in a Node.js environment. The presenter uses a movie streaming platform as an example, where the increasing growth of the platform necessitates improved data retrieval methods. Initially, MongoDB was sufficient for storing movie data, but as demand grew, the need for caching became apparent.\n\nThe Cache Aside Pattern is explained as a method of filling the Redis cache on-demand instead of syncing the entire database at the start. When a data request is made, the application first checks Redis; if the data exists, it's quickly returned. If not, the data is fetched from MongoDB, stored in Redis for future requests, and then returned to the application. This approach aims at optimizing caching, reducing load time, and keeping costs down.\n\nFurthermore, the video showcases how to implement this pattern with Node.js, using MongoDB for data storage and Redis for caching. Two scenarios are demonstrated: initially, where data is stored in Redis as strings with a set expiration, and later, using RedisJSON with Redisome to store and manipulate JSON documents directly in Redis, enhancing the structure and retrievability of cached data. The latter part also touches on data consistency challenges and introduces potential solutions.\n\n### Example Questions and Answers:\n\n1. **What is the Cache Aside Pattern, and how does it improve database query performance?**\n   - The Cache Aside Pattern is a caching strategy that loads data into the cache on-demand. It improves performance by first checking if requested data is available in the cache, thus reducing database load and speeding up data retrieval.\n\n2. **Why did the video use MongoDB and Redis together in the implementation?**\n   - MongoDB was initially used for its document-oriented storage capabilities, ideal for storing movie data. Redis was introduced alongside MongoDB to cache frequently requested data, reduce database load, and improve retrieval times.\n\n3. **How does the application check for data in Redis and MongoDB in the Cache Aside Pattern implementation?**\n   - When an application request is made, it first checks Redis for the data. If found, it's returned immediately. If not, the data is fetched from MongoDB, stored in Redis for future use, and then returned to the application.\n\n4. **What was the role of Node.js in the video's implementation?**\n   - Node.js is used to build the server-side application logic, interfacing with both MongoDB for data storage and Redis for caching, utilizing libraries like 'mongodb' client for MongoDB and 'redisome' for Redis.\n\n5. **How is data stored in Redis, and why is expiration important?**\n   - Data in Redis can be stored as strings with a set expiration or as JSON documents using RedisJSON. Setting an expiration is important to ensure that the cache does not serve stale data and to manage memory usage efficiently.\n\n6. **What challenges does caching present regarding data consistency, and how does the video propose to solve them?**\n   - Caching can present data consistency issues if cached data becomes outdated. The video suggests using patterns like write-behind or write-through to maintain consistency or being granular with cache operations, such as updating or deleting cache entries when the corresponding database data changes.\n\n7. **What are the benefits of using RedisJSON and Redisome for caching, as mentioned in the video?**\n   - RedisJSON with Redisome allows for storing and querying JSON documents directly in Redis, providing a more structured and flexible way to manage cached data, similar to document-oriented databases like MongoDB. This approach simplifies data handling and retrieval in cache." "metadata" "{\"id\":\"AJhTduDOVCs\",\"link\":\"https://www.youtube.com/watch?v=AJhTduDOVCs\",\"title\":\"Redis and MongoDB: Cache\\-Aside Pattern\",\"description\":\"The cache\\-aside pattern is used to load data on demand into a cache for better performance while keeping costs down. This video discusses how to use the cache\\-aside pattern with Redis and MongoDB.\\n\\nIn this video, Redis' Will Johnston covers:\\n\\- The cache\\-aside pattern is for caching on demand\\n\\- Redis Stack can store master data as JSON documents\\n\\- Redis is a good way to speed up a MongoDB app\\n\\nDownload the e\\-book \xe2\x80\x9cThree Design Patterns to Speed Up MEAN and MERN Stack Applications\xe2\x80\x9d: https://redis.com/docs/three\\-design\\-patterns\\-to\\-speed\\-up\\-mean\\-and\\-mern\\-stack\\-applications/\\n\\nSign up for Redis Cloud for free: https://redis.com/try\\-free/\\n\\nGet started with redis on any platform or language: https://developer.redis.com/howtos/quick\\-start \\n\\nCheck out Redis University: https://university.redis.com\\n\\n#Redis #MongoDB #Cache\",\"thumbnail\":\"https://i.ytimg.com/vi/AJhTduDOVCs/maxresdefault.jpg\"}"
"EXEC"
"MULTI"
"HSET" "openai-video:0" "content_vector" "\xd6G\xce\xbc\xeb\xccH\xbb\xc2\x19\xde<\x8d\x81\xa7;K\xa7\x13=i\xaei=w\xe3\xa0<\x9ce3=k\xd3[<f\x0c;\xbc\xa9\x8e\x84=Ws\xd3\xbcB\x96\x8e<\xe0d9\xbd\xf0\xacu\xbc\x81\xa3z<\xa3\x83^\xbc\xcb\xa0\x80;\xf0z]<\xef\x16-;\x0bV\"=\x88\xec\x1e=?\x97N<rg$=7G\x8b\xbc\xa3jR\xbd\xe0}\xc5\xbc\x96\xc4\xc4=kb\x05;QH\x82\xbd\xf7\xdc\r=^\xd5\x83\xbcs\x800\xbc\x8e\x17\xf0;\x822$<e\xf3\xae<\x12\xde\x04:\xb2\x1cF\xbd\xe1>\a=F\x12\x0b<\x87\x12\xd1<,* \xbd\xfb\xc9\xe0\xbb\xa0\xc8#\xbc5\xf0\x00=&p\xa5<\xc0\xc2\xd3\xbc\xbb\xfb\xb2\xbcq\xa6b\xbd\x9e?\x81=A\xee\xd8\xbc\xc9\xec\xe4<\xa5],\xbd\x02\xcf\x7f\xbc\x8e\x8d\x8d<,\xf8\a\xbdL\x0bD\xbc\xa0\xaf\x17=\x12))<\xf3`\x11;\xad\n\x81=\xc8V\x1c\xbc\xa7i\x12\xbc\x05\x83\x1b<_9\xb4<\xae\xd2\xe1<A\xbc\xc0\xbc\xf6\xb7\x1b\xbdn\x044\xbd\xc5\xff\x11=N\x94f=\xd4;h<\x15\x803=\xa6\xda\xe8\xbc\xf3y\x1d=\xa9\xd9\xa8\xbc\xa3j\xd2<\x93\t\n;F\x9c\xed<c\xb5\xb0<\xa2\xed\x15\xbc\xe9\xa7\xd6\xbb\xf7\xc3\x81;\x88\xd3\x12\xbd\xf1\t\x87<N\x94f<WZG\xbd\x9c3\x1b<?\xfb\xfe\xbc1\n\xcd<fW\xdf\xbc%\xe1\xfb<\xa38:\xbdp\x10\x9a<\xebh\x18=R\xac\xb2\xbc1\xbf\xa8<\x83\x96\xd4<t\x8c\x16=\xf3`\x11=W\xbe\xf7<\xd9-\x82\xbd\xde\xf4\xa2\xbc;Mj\xbbDw{=\xe6\xba\x83\xbc\x9eq\x19=\xb9\xd6@<\xd9-\x02\xbd\xef\xe4\x14\xbd\x81qb\xbdrg$\xbc \xcf\xb6\xbb9\xb7!\xbbC\x13\xcb\xbas\x800\xbc\xf3y\x9d\xbcrN\x98\xbc\xa0\x96\x8b\xbc-\x8e\xd0;\xb9!e\xbc\xa4\xb5\xf6;w.E9)]\xf8\xbc`\x13\x82\xbb\xc2\x00R\xbd\xab\xe5\x0e=\x8c6\x83\xbc\x9b\x01\x83\xbc\xe1\xe1u\xbd0\x8d\x10=cj\x0c=s\xcb\xd4<\x93\t\x8a\xbd\x95G\b\xbd\xb0\xde\xc7\xba[\xefO\xbd\x17\xf0I\xbc\xd9\xe9\xfc;6\xd1m;C\xfa\xbe<\xdf\x8ak\xbd\xa3\x83^=T\x03==9\x9e\x15\xba[\xefO\xbd\x8d\x81\xa7<?\xfb\xfe;\xbaS\xfd\xbb\xa3\x1f\xae\xbb\xec0\xf9<\x9b\xbd}<\xe8\xb4\xfc\xbc\xafz\x97\xbc\x85\x1f\xf7\xbc\\\xc9\x1d\xbd\xaa\x0bA=\x8c\xf2}\xbc\x05\x83\x1b<\x97\xb7\x1e\xbdd2\xed\xbc\t\xe6\x8b\xbc\xf8Y\xca\xbcI\xcdE\xbc\xe1\xe1u\xbb\x12\xf7\x90<VA;\xbd\x04Q\x03\xbd\xef\xcb\b\xbd\xf9\xa4\xee\xbc\xcb\xa0\x00<\xd4\xb1\x85\xbd\xf7\x7f\xfc;\x91/\xbc<q\xa6b=\xc3\xa8\a\xbd\xc7\xc7\xf2:\xf9\x01\x00\xbd\x17\tV=\xbf,\x8b<0t\x04\xbdY\x98E\xbc=r\\\xbc\xbc\xee\x8c<\x0b$\n\xbd>~B\xbcv\xca\x14\xbd!\xdb\x1c:\x9c\x1a\x8f\xbc\xa9\xf24=$2\xa7\xbc\xf2\xd1g=\xbfw\xaf\xbccj\x0c=jo\xab\xbc-\xa7\\<\xbb\xfb2=9\x9e\x95\xbc\x8c\xc0\xe5\xbb\xc9b\x82\xbc4z\xe3;\xbf,\x0b=\xea6\x80=)\xf9\xc7\xbaQH\x02=yS7<e\xa8\n\xbd\x8d\x9a3\xbc(|\x0b\xbd_ \xa8\xbc{x)\xb9\xc7\xc7\xf2\xbacj\x0c=\xa9\x8e\x84<\x1f\x84\x92\xbc\"\r\xb5\xbc\x89\x1e7\xbc\x03\x90A\xbc\xa7i\x12\xbd\x1d-\b=\xef\xe4\x94\xbc\x8f\xbf%=rN\x18=p\xde\x01\xbc-\xa7\xdc<`\x84X\xbb\xb2\xb8\x15\xbb\xa8\xff\xda\xbc\xc2\x19\xde<\bpn<CE\xe3<\x04\xf4q<\xe3\x06\xe8\xbc\xf8'\xb2\xbc\xea\xd9n=\xed\xbf\"\xbd\x8a*\x1d<\xf1\"\x93<K\xc0\x1f\xbd\x1bl\xc6<0t\x84;\x83>\x8a<\x92HH\xbd\xc5\xe6\x85;\xb6M\x1e=\xf5\x9e\x8f;\xa5\x8fD\xbd\xb2\x1cF\xbd\x1d-\b<6\x86\xc9<\xc6J6=\x16\x16\xfc\xbc\x17\tV;\xf2\xd1\xe7\xbcVA\xbb\xbc\x0e\xc6\xb8\xbd\xda\x0e\xef<|\xaa\xc1<X4\x95<\xa4+\x94<\xe5]\xf2\xbc\xbbF\xd7\xbc\x1f\xb6*;S\x9f\x8c<-\\8\xbd\x7fLp<\xbcxo\xbc\xf6\xd0'\xbd\xb8\xfcr\xbc\xd9-\x02\xbd\xed\xf1\xba\xbbPn4\xbc 3g<\xd6\xef\x83\xbc\xa9\xa7\x10\xbc3/\xbf<\x01\a\x9f<P\xa0\xcc;\xbe\x9da;[\xef\xcf;\x9a\x0e):;\xdc\x13\xbdrg\xa4<M\xcc\x05=`\xb6\xf0\xbb\x89i\xdb<\xa2^l\xbc\x87Di=r\xd8\xfa<5\xf0\x00\xbd\t\xe6\x0b\xbd<\xf5\x1f\xbdW\xbew\xbd\xc6\x95Z<\x14g'\xbcS\x10\xe3<\x92a\xd4\xb9v\xca\x94<\xf6\x02@<O\xc6~<S\x9f\x8c<5\"\x99\xbc\xd9x\xa6\xbcs\xcbT<\xa5D\xa0;\x8bu\xc1<?\xfb~\xbc\xe8\xb4|\xbc)\xf9G=\x94\xb8\xde<\xe4|\x05\xbdq\xa6\xe2;\x94\xb8\xde\xbaB}\x82<\xcc\xd2\x18\xbdn\xb9\x8f;\xe8\xf8\x81=\x8cO\x8f\xba\xfcq\x16\xba\xd3\xa5\x1f\xbc'\x06n<B\xe1\xb2\xbc\x97\x85\x86<\xa4\xb5v\xbce\xa8\x8a\xb9\xb6f*\xbd\x13\x8dY\xb7\xf6\x1bL\xbd\xfa\x1a\x0c\xbcX4\x95\xbc\xdeX\xd3;\"&A\xbd\xb9\xefL=\x9b\x01\x03\xbcp\x10\x9a;L=\xdc\xbb\x93\"\x96\xbc\xe8\x11\x0e\xbd\x02\xcf\xff\xbc\xd9x\xa6<\x8e\x17\xf0\xbc=\x01\x06\xbd\xf2\x86C\xbd\x9f\a\xe2\xbc\x95\xeav\xbc\x04\xf4q<\x16\xa5\xa5\xbc_R\xc0<\x12))\xbdR\xc5\xbe<\a\xc1\x19\xbdM\x17\xaa\xbb\xcdha\xbc\x9d\xb0W\xbd~\xe8?=\xbe\xcf\xf9<\xc0\xa9G\xbc&W\x99\xbc\rb\x88\xbd5T\xb1\xbcl\xc6\xb5\xbc\x18\xca\x97<\x80\r2;\x17\tV=Qa\x8e<k\x05t<\xb0\xc5\xbb\xbc\xd9_\x1a<\x7f\xdb\x99<\xb9\xd6@\xbc\x97\x0fi<\xcb\x11W=\x05\x83\x1b\xbd\xe1>\x87\xbc~\x1aX\xbd\xae\xa0I=n\xeb'\xbcO<\x1c=/\x9a6<\x1e\xc3P=D\xbb\x00=\xa9\xc0\x1c\xbcs\x99<<\xf7\x7f\xfc\xbc;\xdc\x13=\x0b=\x16=\xa2\xed\x15<\x9b\xbd\xfd\xba\xd8\xb7d\xbd\xd8\x85\xcc<\xe5\x12N\xbc}\x9d\x1b\xbd\xb4\xdd\x87\xbaV(\xaf<\x8f\n\xca\xbaaw2=\xb6f\xaa;\xa2^l\xbc\xe4\x95\x91=\xd1\xb2E<\"?\xcd<\x81\xa3z<\xa1\x13H\xbdIi\x15:R\x93\xa6\xbb\x99\xc3\x84\xbc\xc1\x83\x15\xbc%\xaf\xe3;\xca\x94\x9a\xbcC\xfa>\xbd\x05\x83\x9b<$K\xb3\xbc_ (=kb\x85\xbcR\x93\xa6\xbb}\x9d\x9b\xbc\xaen\xb1\xba\x1c\xb7j<\xbdR\xbd;\xdf\x00\x89:E8==\x1f\xb6\xaa\xbb\xac{W\xbd\xe1\xe1u\xbc\x1e\x0e\xf5\xbc\n\x95`=\xba\xb0\x8e<x\xef\x06\xbd\x93\"\x16\xbc\x17\xd7=\xbd\x10\x1dC\xbd~\x1aX\xbc\x17\xf0\xc9<\x9b\xbd\xfd;K\xf2\xb7\xbc\x02\x13\x05<\x83\x96T;\x94m:;}'~\xbc\xd3\xbe+\xbd\xbe\xcf\xf9\xbc.\xd9\xf4;M\xfe\x9d\xbd\x89i[<\xd7!\x1c\xbd\x97\xb7\x9e<\xab\x88}\xbc\xda\xdcV\xbcHP\t=\x13\x8dY<n\xeb\xa7\xbc\x05\xb5\xb3\xb8\xe2p\x9f\xbc\xba\x97\x82<\xf0HE\xbb\xfe\x96\x88\xbc*\xd3\x95<E8\xbd<H\xf3\xf7<\x86\xe0\xb8\xbd\x04Q\x03\xbd\xb9\xd6@=W\xbew\xbc\x9a@A=\xe1>\x87=\xe3\x06h\xbc\x97\x0fi=\ncH=%%\x01=\xfa3\x18\xbd\x04\xc2Y<D\xd4\x0c=\x9e\xa31\xbb\xcb\xa0\x00<\xc8\xa1@\xbd\x86|\x88\xbd\x94\x86\xc6;[\b\\\xbc\xc8\xa1\xc0<\x0e\x94\xa0;\xd7\b\x10\xbc\xfd\xbc:\xbc`,\x0e\xbd\x9c3\x9b<\xe1\xaf]\xbb\xed\xbf\xa2<\xdb\x84\x0c\xbbz\x9e\xdb\xba\xe8\xf8\x81<\x97\x9e\x92;\xec\xfe\xe0\xbc\x86\x95\x14\xbb&\xbbI=s\xb2H\xbc~\x01L\xbd*\x05.\xbdc\xb50\xbd\xec0\xf9\xbc`\x13\x02=4z\xe3;\x95\xeav=\x93\"\x16\xbc\x8c\xf2}<\x9eX\x8d=\xd9x&\xbd(\x95\x97\xbb\xd0g!;\xde&\xbb\xbb\x83\xc8\xec<]\x14\xc2< \xe8B<z\x9e[;\xa81s;\xa3QF=\xb0\xac\xaf\xba\xe3\xd4\xcf;\xa1\x13H\xbd\xef\xfd \xbc\xd5.\xc2\xbc\xd2\x16\xf6:\n\x95\xe0\xbc\xca{\x0e<\x13t\xcd\xba\x03^\xa9<\xc0\xa9G;\x03\x90\xc1<\xc1j\t\xbdd2\xed\xbc;\xc3\x87\xbc7y#\xbc'\xd4U<\xf7\x7f|;\xfc\xa3.\xbc|\xf5\xe5<bQ\x00\xbc\xe7\x82\xe4\xbcg\x89\xf7\xbcm\xf8M\xbc_R@\xbd\xd4;\xe8\xbbI\xcd\xc5<r\xd8z\xbcN\x94\xe6\xbc\xa1,\xd4\xbbrN\x98;\xa3jR<\x06\x19\xe4<\xf0\xac\xf5\xbc\xd6`\xda\xbc\xfe\xc8\xa0\xbcT\xb8\x189\x96\x92,\xbd\x0c\x88\xba\xbb\x9ce3\xbd\xe0K-=\xffE]\xbb\x9f\xd5I<j\x887\xbd\xad\n\x81<\x1d_ \xbc\xe9\xa7V<Y\xb1\xd1;`\x84X;!\xc2\x10=\xeb\x81\xa4\xbb\x87\x12Q\xbbU\xdd\x8a<\xffE]\xbd\x80?\xca\xbbD\xd4\x0c=D\xd4\x0c\xbb1\xd84\xbc\xcc\x1d\xbd:$d\xbf;\xfcX\n=\xb9\xbd\xb4<\x84W\x96\xbc\x03E\x1d\xbd\xcc\xb9\x0c\xbc@X\x90\xbc\xbe\x9da<\x9d\xe2\xef\xbcw\x15\xb9\xbb\x9e\x8a%=\x99\xc3\x84\xbc\xcdha<\xcb\x11\xd7<e\xf3\xae<\x0c\xbaR<\xfd\xd5F<\x8cO\x8f;\x1b!\"\xbb.O\x92\xbc\x8a\xf8\x04=\xef\x16-\xba\xf3`\x11=QH\x02=/\xcc\xce;*\xec\xa1\xbc\x1bS\xba<\x96\x92\xac\xbc\b>V\xbc\xd7l@\xbc_\a\x1c\xbd\x1d_\xa0<\x8a\x11\x11=8\xf6\xdf;\xbfw\xaf<\x13t\xcd<\xb4\xf6\x13\xbc\x95`\x14\xbd\xb5\xa5h\xbc\xcc\x1d\xbd8\xd6`Z\xbd\x8a\xf8\x84\xbdQ\xeb\xf0<`\x84\xd8\xbc\x12\xde\x04\xbdyl\xc3\xbb\xb2\x1cF\xbcoOX=\xad\n\x81;\x9b\x01\x83;\xdf\x8ak\xbb\x97\x0f\xe9<}k\x03=ts\n\xbd\xfd \xeb\xbc\xc8\x884\xbd%\xaf\xe3\xbc%>\r<I\xcdE\xbc,C,\xbc\xec\xfe\xe0\xbc\x0bV\xa2;\\\x97\x05=\xd7\b\x109\x84W\x16=6\x9fU;\xdde\xf9\xbb\xde&;=J\xe6Q;\xbe\xcfy\xbc\xf5\x85\x83\xbb7\x92\xaf<\x95y \xbc\x06K|<\n1\xb0<\xad\xado\xbc\xdc\xe8\xbc\xbc\xbc\xd5\x80\xbc\xc1\x9c!\xbd\xea6\x80=\xd5.\xc2\xbb\xe5\xf9\xc1<\xd1\xb2\xc5\xbcg\x18!\xbcb\r\xfb\xbab\xa9J:P\xa0\xcc;\xf7Md\xbd\xf2\x9fO\xbc\xa1\xfa;\xbd\xb4A\xb8<#\xe7\x02\xbdq[\xbe<p)&<!e\xff<\x8a*\x9d\xbb\x97\x9e\x92\xbc\xa9\xd9(\xbd\xf8'\xb2\xbc\xbaS}=\xbcxo<\xa1\x13H\xbb-\xa7\\;\x1e\xc3\xd0<\x897C\xbc\x0bV\"\xbbe\xf3\xae<\x00x\xf5\xbc?\xc9\xe6:d2\xed\xbb\x8c6\x03\xbd\x9b\xbd}<\x10\xeb*\xbds\x80\xb0<\xfc\x8a\"<Ug\xed<\xc4%D<\xe1\x96Q<*\x05\xae\xbb\x1c\x85\xd2\xbc\x1a\xef\t\xbb\x94\xb8^<\x96\xdd\xd0<Y\xe3\xe9<\xe6\xec\x1b='\xd4U\xbb\xe0K\xad\xbd\x84\xa2:\xbb\xd9-\x82:<\xf5\x9f\xbcI\x82!\xbd\xc4p\xe8\xbc\x1e\xdc\xdc\xbcX\x1b\x89\xbc\xebh\x18\xbb\x12))<\xb0\x93\xa3\xbck\xd3[\xbd>e6\xbd\xa7\xb46\xbc\x05j\x8f<\"\r\xb5\xbc\b>V\xbc\xb35R\xbbf%G<\xafa\x0b<\xfc\xa3.\xbc\xc5\xff\x91;V\xf6\x16=\xa5\x8f\xc4\xbc\xaen1\xbdC\xfa\xbe<g\xff\x14\xbb8\xab;<)+`=\xcb\x11\xd7\xbb\xe2p\x9f<\xf2\x9fO;^\xee\x8f<t\x8c\x16<?\xc9\xe6<\x06K\xfc\xbb\xb4\xf6\x93\xbc<YP\xbd\xa4\x12\x88\xbc\xa2^\xec\xbc\x1b\b\x16\xbc4zc\xbc\b>V\xbcSB\xfb\xbb\xa0\x96\x0b\xbc\xf4\xab\xb5<e\xda\"\xbc\xc6cB;bQ\x00=\x7f\xc2\x8d<\x9c\x1a\x0f=\xbb\xfb2\xbb\xed\xd8.<I\x9b-\xbc\xe1\x96\xd1<\x9c~\xbf<\x04Q\x83\xbcV\xf6\x16<B\xaf\x1a\xba\xe7\x82d\xbcR\xc5\xbe<J\xe6Q\xbc\x12\x10\x1d=\xe77@\xbd\xc7$\x04=-\\\xb8\xbb\xda\x0eo<\xd05\t\xbc\xbd \xa5\xbc\xf2\x86\xc3<\r\xec\xea<\x8b\\5<0\x8d\x10;E\x1f\xb19\xb0\x93\xa3<#\x19\x1b=\x8f\xf1=\xbcU5U<\xf3`\x11\xbb\x9d\x97\xcb:\xc6\x95\xda<\x84W\x16=M06\xbc?\x97N<!\xa9\x84\xbc4z\xe3<\x1fk\x86\xbc\xa81\xf3\xbc\xeb\xb3\xbc;\x18\xca\x17\xbd\xf3G\x05\xbd\x04Q\x83\xbc\x96\xddP\xbc\x9b\x01\x83<\xd5\xfc):rN\x18\xbb\xad\xad\xef;\xa8\xff\xda\xbbc\x9c\xa4\xbd\xc5\xff\x91\xbb~\x1a\xd8<\x8d\xb3\xbf\xbc3\xfd\xa6\xbc\x1blF<\xcft\xc7<\xe9\xa7\xd6\xbc\x14\x1c\x03=\x96\xab8\xbdL\x0b\xc4\xbc\xbfE\x17\xbdLo\xf4\xbb\xf8@>\xbd\xddey\xbc\xe1\xaf\xdd<\x1e\x0e\xf5<\xe5\x12N<3\x16\xb3<`\xb6\xf0:/\x9a6\xbcl\xdf\xc1<\xc9\xecd\xbc\xab\xe5\x8e<\x82}\xc8<\xd7!\x9c\xbc\xa7\xcd\xc2\xbb\x0f\xa0\x06\xbdA\xee\xd8\xbb\xc9\xecd\xbc<YP\xbc@\xa34=!\xdb\x1c\xbdU5\xd5;\xe3\xd4\xcf\xbc\xe0d9<\xf4\xf6\xd9;[\xd6\xc3\xbb\x89PO<K\xc0\x9f\xbc\xbfE\x97\xbc\x80&\xbe\xbc\xd7l\xc0<\x92\x93l\xbd\x9eq\x19=\xc2\xe7E\xbd\x16s\x8d\xbc\xe6\xec\x9b;?\xc9f\xbc.6\x06\xbcVA\xbb\xbc\xb1)\xec:\t\xe6\x8b\xbc\bpn<z\xd0s\xba\xcbCo<.O\x92\xbc\x9f\ab<\xa2\xd4\t\xbco\x81\xf0\xbb5T\xb1\xbc\x1e\xc3P<\xa1\x13\xc8<\xf0\xac\xf5\xbcm\xa0\x03\xba\xca\x94\x1a\xbc\xcbC\xef\xbb\x81\x19\x18=\xb64\x12=\xe8\xb4\xfc<\xf8\x0e&<\x0197<\xb0\xc5;<\"?M<\xed\xa6\x16\xbc}k\x03\xbc\x88\xba\x86<\xc4\x0c\xb8\xbcP\x87\xc0\xbcR\x93&;+\x1e:<\xeb\x81\xa4\xbb\xc8\x88\xb4<\x8c\xf2};\xd9-\x82<j\x88\xb7\xbc\xa2\xd4\t\xbd\xd9-\x02=\x116\xcf;c\xb50\xbbbQ\x00=\xfe\xaf\x94\xbc\xa3\x1f.\xbc\xb0\xf7\xd3\xbb\x06\x19d<\xd1\xe4]\xbcY\x98\xc5\xbc\x91\xe4\x17<2#Y<\x1d_ \xbc\xbb-K=\xc0\xf4\xeb\xba.O\x92<\xf4\xab5\xbc\xfd\xbc\xba<2Uq8)]x\xba\xbdkI<$2\xa7\xbc/\xcc\xce;C\x13K\xbc\xd2\x8c\x13\xbd\xa1\xe1\xaf<\x87D\xe9<\xe0}E\xbcy:\xab<,*\xa0<1\xf1@<\xa7\xcd\xc2;p\xf7\r\xbb\xc6\x95\xda<\x9cL\xa7\xbc\xbdR\xbd:\x9f\xd5\xc9\xbb\xeeUk9\xa38\xba<\x145\x0f==r\\<T\xd1\xa4<y!\x1f\xbb\xeb\x9a\xb0;0\x8d\x90=\xf4\xf6\xd9\xbb\x88\xec\x1e=M\xcc\x85<=r\xdc;1\xa6\x1c\xbc\x1e\x0e\xf5<?\xc9\xe6<\xa9\x8e\x84\xbc\x0f\x11]\xbc\x17\xf0\xc9<\x01\a\x1f\xbc2\xb2\x82\xbcZr\x93<%%\x81<+\x1e:\xb9\x95\xea\xf6;P\xb9\xd8\xbc0\x8d\x10=\xef\x16-<<@\xc4\xbc\xeb\xb3\xbc<EjU=!\xa9\x84\xbb\x00\xd5\x06=\xbf,\x8b\xbc\xe4\x95\x11\xbc\xc9\x1e\xfd<$}K\xbc\xf4\xdd\xcd<\xad#\r=\xcdh\xe1;SB\xfb:\x13[A=\x1b!\"\xbc\x04\xf4q\xbb\xd0N\x15\xbd#\x8aq\xbcU5\xd5<\x10\xb9\x12=}\x9d\x9b\xbc2#Y\xbc\\\xb0\x91<\x01k\xcf<\x8c\xf2\xfd<\xae\x87\xbd<\x94\xb8^=\xd6\x92r<\xd4;h:Qa\x0e\xbd\xea\xd9n:n\x04\xb4\xba\xce)\xa3<\xce\x10\x97<.6\x86\xbcM\xcc\x85\xbc\x86\x95\x94\xbc\xf7Md\xbc\xab\x88}\xbb\xa6\xdah<r\xd8z\xbc)]x<\xaaVe<\xd1\xb2E7N\x94f<\xeb\x81$\xbb\bp\xee\xbc0\x8d\x10<,\x11\x14\xbc\xbe\x9d\xe1\xbc\xe6\xd3\x0f<C\x13\xcb;\xd4;h\xbcr\xd8\xfa<\xd5\xca\x11=U5U\xbc`\x13\x82\xbb\x1fk\x86\xbbB\xc8&<[\b\\<\xda\xc3J\xbbb\r{\xbb\xb3N\xde\xbb,\xf8\a\xbdz\x9e\xdb;\x19\xfc/\xbd\x94\xb8^\xbb\xb4\x0f\xa0\xbc\xe9u>\xbd\xa4\xb5v\xbbXf-\xbdEQ\xc9\xbc\x93T\xae<5T1\xbd,\x11\x14<\x04Q\x83<g\x18\xa1\xbb\xbdR=\xbcL=\\\xbc]\xfb5\xbc\xf9\x01\x80<?\xc9\xe6\xbb<@D<\xa2^l<\x8a*\x9d\xbc\x984[\xbc\x18\xb1\x0b=\x9f\xbc==7`\x17\xbd\xd5\xfc\xa9:yS\xb7\xbcGv;;\xd9-\x02\xbd\xa4\xb5\xf6\xbc\x97\x85\x06\xbd\xae\xa0\xc9<>\x1a\x12\xbc,C,<,\xf8\x87<z\x9e[\xbac\x83\x98<\x8bC\xa9<q\xa6\xe2\xba\x14\x1c\x83<\xd4;h\xbbc\x83\x989^\x91\xfe<\x8bC\xa9<D\x06\xa5\xbc~\xcf\xb3\xbc\xfe\x96\b\xbc0\xfe\xe6<\xf0z]\xbd\xd0g\xa1\xbb\x1e\xaaD\xbcpB2\xbd\xacbK<\xf3y\x1d\xbcv\xca\x94<\x8e\x17p\xbb\xd5\xca\x11=Y\xe3\xe9<\x9d\xb0W=\n10;\x7fL\xf0<\x06\xe7K\xbd\xec\x8d\x8a\xbc\xe6\xd3\x0f\xbb\x15\xb2K\xbd\xe6\xd3\x8f\xbb\x14\x1c\x83;g\x89w<2#\xd9\xbcs\x99<;\xbaS\xfd\xbcfW\xdf\xbc\x822\xa4<_ (=\xaa$M<k\xd3\xdb;\xa81\xf3\xbcQH\x02:\x12\xde\x04:\x15\x99?:\\\xb0\x91;\xe5\x12\xce\xbcDw\xfb\xbc\xd3\t\xd0<n\xb9\x0f<\x18;n\xbb\\:\xf4<\x02\x9dg<\x92aT<0t\x04<\x12\xf7\x10=\xc3\xf3+<\xbbFW\xbcm\\~<\x14\x1c\x83\xbb\xf8@><2#Y<\x93T.=T\xea\xb0<\xc6cB\xbd\x9eq\x99<\x9e\xa31;j\xba\xcf;\xd9-\x82;K\xc0\x9f;\x1d-\x88<\x9cL'=\x91\xe4\x17\xbc\xe4\xc7)=c\xce\xbc<\x19\x15\xbc\xbc\nJ<<{-\x85\xbcaE\x1a\xbccj\x8c<`\xb6\xf0\xbb\xe4|\x85\xbcq\xa6b<HP\t;\xeb\xb3\xbc\xbc\xcd6\xc9<\rb\b\xbd\x10\xd2\x1e=\xe4\xae\x9d<\x02\x9d\xe7<\x88\xba\x06<\xed\xbf\xa2\xbc/\x9a6=\xb1\x9f\x899E8=\xbb\x90<\xe2\xbb\xec0\xf9<\x02,\x11=\xeeUk\xbc\xd3\xd7\xb7\xbc\xeeUk=1\xf1@<\x8buA<\xab\xe5\x8e\xbb\x9e\x8a%=3\x163\xbdy:+\xbc\xb4A\xb8<3\xcb\x0e;\xe3\x06h\xbcT\xb8\x98\xbc`,\x8e\xba\x0f\xa0\x06;\x0e\xf8\xd0;\x96\xab\xb8\xbc\xaen\xb1\xbc\x8ch\x9b\xbc\xd1\xb2E=\xbd\a\x19\xbd(\x95\x97<jV\x1f<B\x96\x8e;\xeeU\xeb<q\xa6\xe2<]\xe2)\xbc\xe0K-\xbbA\xee\xd8;>e\xb6\xbc\xa8\xe6\xce\xbb\x95\xeav=!\xf4\xa8<\x897C;\xbdkI\xbb\x16Z\x01=$2\xa7\xbc\xd6`Z<L\x0bD<\xd9F\x8e<#\xe7\x82\xbc\x10\x04\xb7\xbc\xe1\xe1\xf5:\xa0\xc8#\xbb\xbb\x14\xbf\xbb\xea\xd9n<\x8f\xbf%<<\x0e,=\xf5(r<&\xbb\xc9:\xbd \xa5\xbc\xed\xd8.\xbcWs\xd3\xbcu\xbe\xae;v\xca\x14<\bpn;\x80\r\xb2;\x03\x90\xc1\xbc\xbdkI<\xa5\xa8\xd0<z\xd0\xf3\xbbEj\xd5\xbb-u\xc4;R\x93\xa6<\xed\xf1:\xbdF\x12\x0b<\xcdh\xe1\xbc\x7fLp\xbd\xab\xcc\x02\xbc+\x82j\xbc\x8a\x11\x91\xbbJ\xe6Q\xbd\xd6\xef\x03\xbd\x97\x9e\x12=\xf9rV;\x94\x86\xc6;@\x8a\xa8\xbaXf-=\x18\xb1\x8b:D\xed\x18<?\xc9\xe6<\xe7PL\xbc\x1c\x85R<\xf1\t\x87=CE\xe3\xbc\xf5(\xf2<\x0e\xc68\xbc`\x84\xd8<3/\xbf<+7F\xbc\x85\x1f\xf7:\xf2\xd1g=\xd9F\x0e\xbc\x83\x96T<\x9cL\xa7<\x90nz<1\xbf\xa8\xbcn\xeb\xa7<\x17\xd7=<\xbe\x9d\xe1\xbc\xe8*\x9a\xbc\x13tM<\xa7\xcd\xc2\xbc,C\xac<%>\x8d\xbc\x0co\xae;\xf3y\x1d<\xc0\xc2\xd3;\xf4\xf6\xd9\xbcd2\xed:\xe8\xb4\xfc\xb8l\xad)=\x98\x02C;\x9c~?\xbc`\xb6p<v\xca\x94<\xde\r\xaf\xbc\xec0y<\xe1>\a\xbd\x9b\xbd\xfd;;\xdc\x13<\xd4;h\xbd\xef\x16\xad<\xd05\t=\xb0\xf7\xd3\xbcg\x89\xf7;O\xc6\xfe\xba\x1a\xef\x89;\x81q\xe2<%\xe1{\xb9!\xa9\x04\xbcO<\x1c\xbd\xb5ZD<i=\x13\xbd\xf1\t\a=d\xe7\xc8;7y\xa3\xba\x0f\xa0\x06=\x1dx\xac\xbcQz\x1a<#\x19\x1b;\xf9rV\xbc\xc8\xba\xcc\xbc\x15\x99\xbf<\xc0\xc2\xd3;\xa6P\x06=,C,=\xef\xfd\xa0<\xc1\x83\x95\xba\xb7\x98\xc2\xbb\xca\xdf>=\xce)\xa3<<@\xc4\xbc\x11\x9a\x7f\xbc7G\x8b\xbb\xa2\xd4\t=t\xfd\xec\xbb\x03w\xb5\xbc\xbb\x14?\xbb\xf7\xc3\x81\xbc\x7fL\xf0<00\xff\xbb\xd1\x80\xad; \x01\xcf\xbc\xd5\xca\x11\xbc\t\xe6\x8b;\x06\x19d<\x9c3\x9b:\x8f\xbf\xa5\xbc\r\xec\xea:u\t\xd3\xbb}\x9d\x9b<\x94\xb8\xde:\x8f\xd81\xbc\x9eX\x8d<yl\xc3<\xdb\x9d\x98;\xe0\x19\x15<\xf0aQ\xbc\xc8\x884<\x85\xed\xde\xbccj\x8c\xbb\x93;\xa2\xbc\xbc\xee\x0c=y!\x1f<\xe9C\xa6\xbak\x05t\xbc\xa2^\xec\xba\x17\xf0\xc9<\x80\xf4\xa5\xbbkb\x05=c\x9c$\xbb>3\x9e<:\x02F=\x1bl\xc6<\xef\x16-<\xb9\xef\xcc<\xa9\xa7\x90<\xf8\x0e\xa6\xbb\x84\xbb\xc6<\xd6\x92\xf2\xba\xe02\xa1<\xcc\x1d\xbd\xbcS\x10\xe3\xbc\x0e\xad,\xbdD\xd4\x0c\xbcu\xbe.\xbb_9\xb4<h|Q\xbch|Q<7`\x17=\xe9C\xa6<\xe2p\x9f\xbb\x9f\ab\xbc\xb8\xa4(<\x8c\xf2\xfd;XM!\xbc\xdbk\x80;3\xe4\x1a\xbc>~B<+\x82j<\xf0z]<H\xf3w<\xfd \xeb\xbbC\xfa\xbe\xbc&\x891\xbd\xb7\x98B<\xa7\x82\x9e<\xb6\x1b\x06=\xf6\xb7\x1b\xbc\xf1T\xab\xbb\x0f\x11\xdd:\a\xda%=\x9a\x0e)\xbc\xd1\xe4\xdd<\xc2\x19^\xbb\xef\xcb\b<\xba\xc9\x9a;\xab\xe5\x8e<HP\t\xbcU5U<)+\xe0;l\xad)\xbb\x11\x9a\x7f\xbcc\xb50=j\xa1\xc3<\x1a\x92x\xbb\xab\xcc\x02;\x90<\xe2<\x1c\xb7j<\xba\x97\x82<\xb0\xc5;<\xc6\x95Z<\x8e\x8d\x8d<}\x9d\x1b\xbc#\x8aq\xba\x1a``\xbc\\\x97\x85\xbc\xe4|\x85<e\xc1\x16\xbdH\xc1\xdf\xbb\xc3\xf3\xab\xbb\x82}\xc87n\x1d\xc0\xbc\xb7\x7f6\xbb\xf2\xd1g<\x05j\x0f<\xa9\xa7\x10\xbc\xab\xcc\x82\xbc\xb4\xf6\x13\xbc\xb8r\x90\xbc\x1b!\xa2<!\xf4\xa8\xb9)+`\xbc\xaen\xb1<\xafa\x0b\xbdM\xfe\x1d<b\xdb\xe2\xbc\xb6f\xaa<fW\xdf\xbc\xc3\xf3\xab\xbb\x1a\x92x\xbb\\\x97\x05\xbb\xafz\x97\xbc\xa7\xcdB\xbd\x10\x04\xb7\xbc\xba\xc9\x9a\xbb\xb2\x03\xba<\xc3K\xf6\xbcK\xc0\x9f<HP\t\xbd\x10\xeb\xaa<\xbd91=\x19.\xc8<B\x96\x0e;e\xa8\n<\xfd\xd5F<s\xcbT<\xf3y\x9d\xbc\xafa\x0b\xbdM\xcc\x05\xbd\xd6`\xda\xbcS\x86\x00\xbd^\xd5\x03=\x91\x16\xb0<oO\xd8\xbcD\xed\x98<\xb2\x1c\xc6\xbc\xd5\x15\xb6;k{\x91<\xba\xc9\x1a\xbd\x1dx\xac\xba`\x84\xd8<`,\x0e\xbde\xda\xa2\xbb\x05j\x8f:\xd5\xe3\x9d<_\a\x1c=\x1fk\x86\xbc}\x84\x0f=\x11\x9a\x7f\xbc\x03^)=Z\x8b\x1f=Qz\x9a\xbc\xf6\xd0\xa7\xbb\xebh\x18<\xb5\xa5\xe8<HP\x89\xbbc\x9c\xa4<\x03w\xb5\xbc\xd2\x8c\x93:,\x11\x14<T\x1cI=\xd7S\xb4\xbc\x82d<=3\xfd\xa6\xbcN\x94f<\a\x8f\x81\xbc9(\xf8<\x14\x1c\x83=}\x84\x8f<\xb2\xb8\x15\xba\xfb\xfbx;\xde&\xbb\xbc\"?M;\xe5+Z\xbc\x1a``<\x1f\xb6\xaa<q\xa6b\xbc(\xc7/=\x0bV\xa2\xbc\x95`\x94<\xb4\xdd\a=\x1d-\b=\xfa3\x98\xbc\xb4\xf6\x93<@X\x90;\xae\xa0\xc9\xbcO\n\x84<^_\xe6:\\:\xf4\xbb\x9e?\x01\xbdH\xc1_<\xcft\xc7\xbb\x19.H\xbd\xf4\xab\xb5\xbc\xde\r\xaf\xbb\\\x97\x05\xbcv\"_\xbc\xb3N\xde\xbc\xb4A\xb8\xbc\xb0\xf7S=\xba\x97\x82\xba\x96\x92\xac<S\x10c<\xfe\x96\b\xbc\x0b$\n\xbd\xbb\x14\xbf\xbcS\x10c\xbc\x8c\xc0\xe5<a^\xa6\xbb\x0e\xad,\xbd\xcdh\xe1;\x0e\xad\xac\xbc\xe3\x06\xe8;j\xba\xcf<\xde\xf4\xa2;\xf7\xdc\x8d;\xf4\xc4A\xbc\x9f\xd5I\xbbXM\xa1<" "content" "### Summary:\nThe video discusses how to address slow database query issues while maintaining cost efficiency, specifically through the implementation of the Cache Aside Pattern using Redis and MongoDB in a Node.js environment. The presenter uses a movie streaming platform as an example, where the increasing growth of the platform necessitates improved data retrieval methods. Initially, MongoDB was sufficient for storing movie data, but as demand grew, the need for caching became apparent.\n\nThe Cache Aside Pattern is explained as a method of filling the Redis cache on-demand instead of syncing the entire database at the start. When a data request is made, the application first checks Redis; if the data exists, it's quickly returned. If not, the data is fetched from MongoDB, stored in Redis for future requests, and then returned to the application. This approach aims at optimizing caching, reducing load time, and keeping costs down.\n\nFurthermore, the video showcases how to implement this pattern with Node.js, using MongoDB for data storage and Redis for caching. Two scenarios are demonstrated: initially, where data is stored in Redis as strings with a set expiration, and later, using RedisJSON with Redisome to store and manipulate JSON documents directly in Redis, enhancing the structure and retrievability of cached data. The latter part also touches on data consistency challenges and introduces potential solutions.\n\n### Example Questions and Answers:\n\n1. **What is the Cache Aside Pattern, and how does it improve database query performance?**\n   - The Cache Aside Pattern is a caching strategy that loads data into the cache on-demand. It improves performance by first checking if requested data is available in the cache, thus reducing database load and speeding up data retrieval.\n\n2. **Why did the video use MongoDB and Redis together in the implementation?**\n   - MongoDB was initially used for its document-oriented storage capabilities, ideal for storing movie data. Redis was introduced alongside MongoDB to cache frequently requested data, reduce database load, and improve retrieval times.\n\n3. **How does the application check for data in Redis and MongoDB in the Cache Aside Pattern implementation?**\n   - When an application request is made, it first checks Redis for the data. If found, it's returned immediately. If not, the data is fetched from MongoDB, stored in Redis for future use, and then returned to the application.\n\n4. **What was the role of Node.js in the video's implementation?**\n   - Node.js is used to build the server-side application logic, interfacing with both MongoDB for data storage and Redis for caching, utilizing libraries like 'mongodb' client for MongoDB and 'redisome' for Redis.\n\n5. **How is data stored in Redis, and why is expiration important?**\n   - Data in Redis can be stored as strings with a set expiration or as JSON documents using RedisJSON. Setting an expiration is important to ensure that the cache does not serve stale data and to manage memory usage efficiently.\n\n6. **What challenges does caching present regarding data consistency, and how does the video propose to solve them?**\n   - Caching can present data consistency issues if cached data becomes outdated. The video suggests using patterns like write-behind or write-through to maintain consistency or being granular with cache operations, such as updating or deleting cache entries when the corresponding database data changes.\n\n7. **What are the benefits of using RedisJSON and Redisome for caching, as mentioned in the video?**\n   - RedisJSON with Redisome allows for storing and querying JSON documents directly in Redis, providing a more structured and flexible way to manage cached data, similar to document-oriented databases like MongoDB. This approach simplifies data handling and retrieval in cache." "metadata" "{\"id\":\"AJhTduDOVCs\",\"link\":\"https://www.youtube.com/watch?v=AJhTduDOVCs\",\"title\":\"Redis and MongoDB: Cache\\-Aside Pattern\",\"description\":\"The cache\\-aside pattern is used to load data on demand into a cache for better performance while keeping costs down. This video discusses how to use the cache\\-aside pattern with Redis and MongoDB.\\n\\nIn this video, Redis' Will Johnston covers:\\n\\- The cache\\-aside pattern is for caching on demand\\n\\- Redis Stack can store master data as JSON documents\\n\\- Redis is a good way to speed up a MongoDB app\\n\\nDownload the e\\-book \xe2\x80\x9cThree Design Patterns to Speed Up MEAN and MERN Stack Applications\xe2\x80\x9d: https://redis.com/docs/three\\-design\\-patterns\\-to\\-speed\\-up\\-mean\\-and\\-mern\\-stack\\-applications/\\n\\nSign up for Redis Cloud for free: https://redis.com/try\\-free/\\n\\nGet started with redis on any platform or language: https://developer.redis.com/howtos/quick\\-start \\n\\nCheck out Redis University: https://university.redis.com\\n\\n#Redis #MongoDB #Cache\",\"thumbnail\":\"https://i.ytimg.com/vi/AJhTduDOVCs/maxresdefault.jpg\"}"
"HSET" "openai-video:1" "content_vector" "\xf8\x1f\x90\xbc\x9a\xc1\x81<\rg\x14=\xd8g\xc7\xba\xb7\x9cH=\xe2\xc0\xbd;N\xd2\x8d<\xe8\xeal=m\xd8\xd8\xbb\xa0\xd3b\xbcu\xee|=\xb8\x1e*\xbd$o\t=\xea\xee/\xbd31\xbe<\xb9\xaf\xfe\xbb}\xf5-\xbb\x85\x0b\xd2;}\xf5-\xbd70i=\xc5\xcd(=\x12'\xb0;\xffM\x82:D\xa0\xd8<\xc1\xf5\xbe\xbcal,\xbd\xd1\xfaE\xbd\x9b+\x95=\x9d>\xcb<\n \xff\xbc\\\x12\xe1<\xb7\x84z\xbc\xcd\xfb\x9a;\xef0\xad;\xba\n\x1f<\x92\xba\xd0\xbbp\x85>\xbb,F\x1e\xbc\xde\x82\x03=nB\xec<\x11~\r=+\xc4\xbc\xbc\x94\xbe\x13\xbc\xb1\x99\xda\xbb$o\t=\xed\\\x06=\xa9D\xa79<\xc9\xc3\xbc%\xd9\x1c\xbdF\xa4\x1b=E:\b\xbc\x90\xce[<\xc3\xf9\x81\xbc\xfdI\xbf\xbc\xfc\xdf\xab<\x9c\x95(\xbdE\"\xba\xbc\xa0\xd3b<\xeb@u\xbc\x1ch\xd8:q\xc8\x90=j\x1c\x80\xbcpF\xaf<c\xd6\xbf<\xbe`'\xbc&\x82?<\x93$\xe4\xbc\x18*\x1e<u\xc7\xbb\xbc\xac\xd9><YV\x88=\\\xeb\x1f<70i<\xe8\xc3+<\xf3/X=\x05\x9fr:nBl\xbc\xe9E\r<<\xa2\x82<\x86\xa5\x01\xbdz\x9f\xa5\xbb\x18i-\xbc\x9f\x81\x9d\xbb\x11\xbd\x1c\xbc1-{:f\x14z\xbc\xfbE\xfc\xbc\xe4m#\xbd\x89:\x19\xbd\xba\xf2\xd0<X+\x84\xbd\xdak\x8a\xba!\x19\x01\xbd (\xf4\xbb\x88\xd0\x05\xbca\xab\xbb<\xb5qD\xbc<\xe1\x11=\xc0\r\r<k\xecc=Q\x8e\xe6<\bL\xd8\xbc\x0e\xf8h\xbc\xef\x87\n\xbc\xeb1\x82<\xd1\xd3\x84\xbc\xcd\xa4==K|\x85<\xf6\xf4\x0b\xbd\xdaS<\xbc\xd8\xbe\xa4\xbd\xaeCR\xbc\xdc\xbd\xcf\xba\x17\xa8\xbc<\xad\x82\xe1;\xd1\xe2\xf7</\x1a\xc5\xbc\x10\xfc\xab\xbc\x91h\x8b\xbcf,H\xbc\xaf\xc53\xbd\xc2w\xa0;`\x02\x19<#\xed\xa7\xbc\x0b{\x1f\xbc\xf5Z\xdc\xbc!\x19\x01=\x99~\xaf\xbc\x01a\xb8<'+b\xbdH\x0e/=ho\x1a=\x1e\x93\xdc\xb9\x0eOF\xbd\xf2\x9e\x03\xbd\xe1\x17\x1b\xbc\xb5q\xc4\xbc\xd8\x7f\x15=\x0e\x10\xb7\xbcx\\S\xbb\xb9\xdf\x1a\xbb\xbf\xca:\xbd^=\xe5<}\xdd\xdf<*\x81\xea\xbc\x94\x7f\x84\xbd\xc9\xe4\xa1<)\x17\xd7<\xf6\xdc\xbd<\xfe\xf2a<\x89\xe3;<\xc4c\x95\xbc\xa2\xfe\xe6\xbc\xbb\xcb\x0f\xbd\xa6\xd6\xd0\xba\x8f=\a\xbd\xb7\x84z=Kd7:\x7f\xe1\xa2<\x95Oh\xbd\x84J\xe1\xbcA#\x0f\xbca\xab\xbb\xbc\",7\xbbCN\x93\xbd\x96\x92\xba\xbb~\x9eP\xbd\x80\xa2\x13\xbd\x98\xd5\x0c\xbd\x11\xe4]\xbc\xde\x82\x03\xbd\xc1\xf5\xbe\xbc\xf53\x9b<\xd1\xd3\x04;\x01y\x06=\xdf+&9\xad\x9a/\xbczHH\xbc1\x1e\b=R\x10\xc8\xba\xd7\x15\x82\xbd:\x9e?\xbd\xf1[1\xbd\xc9\xcc\xd3\xbb+\x03L\xb9\xe3\xeb\xc1<\xa0\xd3b\xbdQ\x8e\xe6\xbc\xe5UU\xbd\x8f%\xb9<\xf9J\x14\xbd\xe1\x17\x9b=\xed\\\x06\xbdGe\x0c<d\xe9\xf5<\x19\x941;\x97z\xec<\xaa\xd5{<\x8c\xcf0;q\x98t\xbcpF\xaf<\x89:\x19='+b=\xa3Y\a<\x89\xfb\x89<\xe1\x17\x1b<\x8b\xf6\xf1\xbc\xaf\x86$\xbc\xec\x9b\x95\xbd?7\x1a\xbc\x9c\xec\x85<\xc6vK\xbd\xfa\xb4'<\xaa\x05\x18=B\xb4\xe3:3\xf2.\xbcg\xed\xb8\xbc\xbd\xde\xc5;\xe5\xef\x04\xbd\xaa\xc6\b=\xbf\xb2l\xbc\a\xa35=\xabo+=y\xc6\xe6\xbc$o\t=Ey\x97<\xeb1\x02=\xa7p\x80\xbd\x9a\xd0\xf4<\xd7\xe5\xe5\xbc\xa4\xea\xdb<h0\x8b<\"D\x05<l\x17\xe8\xbb\xe4\x94d=\xda\x92K\xbc1E\xc9;\x81\xf4X\xbc\xf6\xdc=\xbc\x1c)\xc9<\xfb6\t<\x9b+\x15=\xfda\r\xbd\x8b\x0e@<\x1f\xfd\xef<t\x1e\x99\xbb\xb1\x99\xda\xbc\xe7\x1a\x89\xbd (t<\x95O\xe8<\xc7\xe0^=\xbc\xf6\x13\xbc\x87\xf7F;\xb0/G\xbd^\xfe\xd5;<\xe1\x91\xbd\r\x8e\xd5\xbc\x97z\xec<\xf2\x9e\x03\xbd\xca\x8d\xc4<2\xc7*\xbd\x89:\x19\xbd+\xc4\xbc9A\x0bA\xbc|L\x0b\xbd\xe0\xd4H<\xe6\xbf\xe8;\x87\x0f\x15\xbd_h\xe9\xbc\x8fLz\xbc\xe1\xe7~;31>\xbc\xdb;n<\xe9-\xbf<\xbe!\x18\xbb\xb0/G<\xb8\x1e\xaa9{\xca)\xbd\x9a\xc1\x01=\xe3\x03\x10<\x9dV\x19\xbc\x8dQ\x12\xbd\x13\xd0\xd2\xbah\x18\xbd<\xe9-?\xbb\x17\xa8<=@\xf8\x8a<\xd1\xbb6=\xed\\\x06<\xceM`\xbc\xd4h\x1c\xbd\xed\\\x06\xbd\xe1\xe7\xfe\xbb\xa5To\xbc\xd4\x8f]9\xbd\x87h\xbc_\x98\x85<\xc5\x8e\x19=\xdf\xec\x16<\xf2\xdd\x92<\x9dV\x19=*Z)\xbc94\xac\xbcu\xee\xfc<\x8e|\x96\xbc2X\xff;%\xc1N<s\xb4\x85\xbc<\xa2\x02=B\x8d\"\xbc\xb9\xa0\x0b\xbd\xf1\x1c\"<\x11\xbd\x9c;\x06\xe2\xc4\xbc\x8e\xa3W\xbd\xcca\xeb;\x83\x1f]=#\xed'<IQ\x01\xbdb\x15\xcf:\xa9\x83\xb6\xba\x0b\xba\xae\xbc\x81\xf4\xd8<\xd1\xbb6\xbc\x1f\xd6\xae\xbc\x1b\xa7g\xbd\x9c\xec\x85\xbc\x18i-\xbdQOW;\x7f\xe1\"\xbd\x8d\xfa\xb4<\xd6T\x11\xbdv1\xcf<\x8f=\a\xba\xff\xb3\xd2\xbb\xab\xae:\xbd\xc2\b\xf5<\x12N\xf1\xbcX\x136\xbcT\xe4n<\xb0\b\x86;\b\xf5z\xbd\"\x83\x14\xbd\"\x83\x14\xbd\xd1\xd3\x049\xff\xb3R=\xe4m\xa3\xbcl\x17\xe8</\xdb5\xbd\x80K6;\x8d\x12\x03\xbd\xa1.\x03\xbd\xccy\xb9\xbb\xf4\x99\xeb\xbc\x9d\x17\n=\x98\xa5\xf0<V\x0fs\xbc\xda\x92K\xbd+\x03L\xbd\xdcf\xf2\xbc6\xc6\xd5\xbc\xcc:\xaa<\x01a8=\x9b\x13\xc7<\x83\xc8\xff\xba2p\xcd\xbb\x85\xe4\x10\xbc=\x0c\x16\xbbv\x88,\xbc?\x1f\xcc\xbb\xa7X\xb2<7`\x05=:\x9e\xbf\xbc\x90w\xfe\xbc\x87\xf7F\xbd\xe1\xe7\xfe<\xabW\xdd\xba\xc7\xa1\xcf<D\xdf\xe7\xb9\x85# =\xfa\xb4\xa7<^\x16$=\xcb\xf7\xd7\xbb\x89\xfb\t\xbd`\xeaJ=\x069\"=%\xd9\x9c<{\xf1\xea<k\x86\x93\xbd\xb23\n<\xf3G&\xbc\n\xf9=\xbd\x0b{\x9f:\xd7\x15\x02<\xdb\xd5\x1d<\x04\xcf\x8e<\x02\n\xdb\xbcV\xe81\xbc\x9a\x00\x91='\xc5\x11=\x1a=\xd4<\x89\"K\xbd\xe0\x95\xb9\xbc\x80rw\xbc{\xf1j\xbc\xee\xedZ\xbbGe\x8c:\xb9\xc7L\xbc\xd1\xd3\x84\xbc\x12N\xf1\xbc\x00\xf7$<\x83\x1f\xdd\xbc\xf0\x9a@=\xa3\x98\x16\xbc\x9dV\x99\xbc\x045\xdf\xbcq\a\xa0\xbc\xee\x96\xfd;\x0b\xa2\xe0;\x92\xd2\x9e;>\xdc\xf9<\x80rw\xbd)\x17W\xbd\xbf\x8b\xab\xbb\x0e\x107\xbd\x95Oh=\xffM\x02=\xe1\xff\xcc\xbc\xf2\xc5\xc4\xbc:\xb6\r\xbd\xe3\xeb\xc1\xbc\x19\x941<=\x0c\x96=a\x93\xed<\a\xbb\x03\xbc\x98\xd5\x8c\xbcnBl<1\x1e\x88<\x05\x9f\xf2\xbb\x9d>K\xbd\x12f?\xbc\x1d\x02\b<\xeb1\x02\xbd\xc2w \xbb\xa1m\x12\xbdW\xa9\"\xbc\xa1U\xc4\xbc*\xb1\x06:k\x86\x93:\x14j\x82\xba\xed\x05)\xbdu\xee|<\x90w~\xbcL\xce\xca<nr\x88\xbc<\x8a\xb4\xbb\x9c\xec\x05\xba\xdf\xec\x96<>\xb58<\xc3\xa2$\xbd\xd6{R\xbd6\x9f\x94=\xa4\xab\xcc;\xd7\xe5e=\xfe\xf2a=\xc7\xa1\xcf:,\xacn\xbb\xebXC<\xc67<=\x80r\xf7\xbc\xe0\xad\a\xbc\x13\xa9\x91<T\xfc<<:\x9e?:\xbb\xcb\x0f\xbd\xae\xdd\x81\xbc\xfa\x0b\x05\xbb\xf8\xc82=\a\xbb\x83<*B[\xbc\xa1\x94\xd3\xbc\xed\x05)\xbdL\rZ\xbd\x9bR\xd6\xbb\x9fB\x0e=*\x998=\xb1\xb1\xa8;Ey\x17\xbb\xc67\xbc<MP,<\x18\x12P\xbd\x8a\xcbm\xbc\x1d\xea9=\x97zl\xbc\x15}8\xbd\x1f\xd6\xae\xbb\xef\x87\x8a\xbc\x9d&}\xbd-.\xd0<q\xc8\x90<CN\x93=\x13y\xf5<\xf3n\xe7<\xb4\a\xb1=\x7f\xe1\xa2;\xffM\x82<H\xb7\xd1\xbb\xbc\\d\xb9\\\x12\xe1<\xe6\xbf\xe8<\xeb@\xf5;\xa3\x98\x96<u\xc7;\xba\x11\xbd\x1c=\x8e\xbb\xa5<_\xd7\x94<W\xa9\"\xbd\x9c\xec\x05\xbc4\\\xc2\xbb\xac\xd9>\xbc\xdb\xfc\xde\xbc\x18i-\xbb\xd7\x15\x02;*\xb1\x06=}\xb6\x1e:<\xe1\x91<\xcf\xe7\x8f\xbd\xcc\"\xdc\xbcL\xb6\xfc\xbc\x0c\xe5\xb2\xbc\x9c\x95\xa8;\xe6\x98'<\xd9\xd1\xda\xbc\xde\x91v=\x0e(\x05\xbd\x90\xe6)\xbd~\x9e\xd0\xbb0]\x97;=\x0c\x16\xbd\xd09U\xbc\x11\xbd\x9c<f\x14\xfa:\xc2 C\xbcL\xa7\x89;\x8c\x90!\xba\x13y\xf5<\xf8\xefs<\xcee\xae\xbc\xac\xf1\x0c\xbc\x9a\xc1\x81;\xd6\xba\xe1<C6\xc5\xbcQ\x8e\xe6<\x80c\x04\xbd0\x9c&=L\xe6\x18<\x8d!\xf6\xbb\xa2\x16\xb5\xbcN\xf9\xce<H\xcf\x1f\xbd\xb1ZK<\x14\xfb\xd6\xbb-\xef\xc0\xb9I\x90\x90<\xfe\xf2\xe1\xbb\xd3\r\xfc<\xe7\x1a\t=R\xe9\x06\xbd`)Z\xbc4\x9bQ<\xe7\x02\xbb\xbc-\a\x0f\xbd\xa0\xd3b<Y\x95\x17<\xd9\xd1\xda<{!\a=\xee\xedZ\xbc\x02\xe3\x19\xbd\x1aU\xa2\xbb\xd5\xd2\xaf<:\xb6\x8d\xbc\xb3^\x0e\xbd\x9a\xc1\x01\xbb6\x9f\x14<\n\x11\x0c\xbd?\a\xfe\xbb\xd1\xfaE=u\xee\xfc\xbb\xb7\x84\xfa<\xb8\x1e*;+\x03L<\xa9\xaa\xf7\xbb#\xd5\xd9\xbc\x9bj$=\xee\xc6\x99;T\xe4\xee<\xaa\xd5\xfb<,\xac\xee<&C\xb0\xba\xfbu\x18<\xd7\xfd\xb3\xbb\xd6\x93\xa0<Qg%\xbc\xa1\x94\xd3\xbcIQ\x81\xbc\xcf&\x1f=\x80rw<\xc6vK<\xc28\x91\xbc\x069\"\xbc\xc9\xcc\xd3\xbc\xcf&\x9f\xbc\x98\xa5\xf0\xba\"kF\xbd\x18\x12P\xbdJ\xe2U<\rg\x94\xbc!\x19\x01\xbc}\x1co\xbc#\xae\x18;\xdcfr<\x87\xf7\xc6\xbc|\x8b\x1a\xbcs\xc3x\xbcQg%=\xc4\x0c8=\\\xeb\x9f\xbc\xe3*Q\xbd+\x1b\x1a\xbd\x90\xe6)\xbd\x9dV\x99<v\x88\xac\xbc6\xc6\xd5;_\x80\xb7;\x12Nq<]U\xb3<\x9b+\x95\xbb\xf4\xc9\a=\x96\x92\xba<\xd0\xa8\x00;\xb1r\x99<\xc28\x91<\rg\x94<\xf2\xdd\x12\xbc_h\xe9<\x1c\x80&\xbc?v)=\xeb@\xf5<\x05\xb7\xc0\xbc\x85\xe4\x90\xbcz\x9f\xa5\xbc\x93$d\xbd>\xb5\xb8=\x01\xa0\xc7\xbb\xdb;\xee<\xb6Yv\xb9\x86\x8d\xb3\xbc\x8c\x90!<\xe2\x81\xae;\xbc\\d<2\xc7*\xbd\x18*\x1e\xbc\xbb\xb3\xc1\xbb\xf2\xdd\x92\xbc\xa9\x83\xb6\xbc\xd09\xd5<\nP\x9b\xb9\xd4h\x9c<\xa4\xea\xdb<\x01\xa0G;7`\x05\xbd\xb23\n\xbd\x11~\x8d=\xb7u\x87<p\x85>\xbc\xb3\xc4^\xba\xe6\x80Y<)\x17\xd7\xbc\x9fB\x0e\xbcd\xe9\xf5<\xc0L\x9c<\xb5\xb0S;*\x81j\xbcd\xe9u\xbcR\xb9j\xbc\x14\x13%\xbd\x04\x0e\x1e<\xb3\x9d\x9d<\x0f\xd1\xa7<IxB<%\xc1\xce:q\xc8\x10\xbc70\xe98jCA\xbcs\xf3\x14\xbd\x0e\x10\xb7\xb9\x90\xe6)=\xdf+\xa6<D\xa0\xd8\xbci\x82\xd0\xbd\b\xf5\xfa\xb9SS\x1a;\x8d\xfa\xb4\xbc\xfe\xf2a\xbd\xf3\x86\xb5\xbc\xd7\x15\x02\xbc\x94\xe5\xd4\xbcs\xf3\x94:D\xdf\xe7<31><)\xd8G\xbc\x1f\xfd\xef\xbbOcb<\xe4\xac\xb2<\xedky\xbc\r\x8e\xd5;\xe2\xd8\x0b\xbb\xf1\x1c\xa2<\xe7\x02\xbb<\x03\x8c\xbc\xba\xa7\xaf\x8f\xbc\xfda\r=\xd2=\x18\xbd6\xc6\xd5\xbcs\xb4\x05=\xad\x82\xe1;\xcaN\xb5\xbc-.\xd0<\xdej\xb5;@\x89_;\xd5\xd2/\xbb\x1a=T<Kd7<\x1d\x02\b<\xb8]\xb9<>\xdc\xf9\xbb\x94\xa6E\xbdR\xd18\xbcn\x1b\xab\xbbw\xb3\xb0\xbb\x8f=\a\xbd\xce\x8co<\xe4\xc4\x00\xbd\xca6\xe7<\x9e\xff;;\xdd\x00\"\xbc\xd3\r\xfc;\xeb1\x82=nBl:\x97S+<Y\xbc\xd8<\xf6\x1bM<\x93<2\xbc>\xcd\x06=\x97z\xec<\xf8\aB\xbb\xbd\x87\xe8<p\x85>\xbc\xa8\xc2\xc5\xbcX\x136=P$S<\xcd\xa4==<\xc9C\xbc\xf3n\xe7<\xd2d\xd9;h0\x8b\xbb\x13\xa9\x11\xbb\xaf\x86$\xbcy\x1d\xc4<M\x8f;=94\xac<s\xf3\x94;w\n\x0e<\xad[\xa0\xbcT\x14\x0b=\x1b\xfe\xc4\xbc\xd6\xba\xe1<Wj\x13=\x16>\xa9\xba\x84J\xe1<\x8d\xfa\xb4\xbc\xb7u\x87\xbc\xee\xaeK<\xe8\xeal\xbcx5\x12=\x99'\xd2\xbcw\xf2\xbf\xbc>\xdcy\xbc$\x96\xca\xbc+\xc4<\xbd\x81\xcd\x97\xbc\x18Q\xdf\xbc\x11~\r\xbc?v\xa9\xbc\xb7u\a\xbc\x85\xccB=\xedD8\xbcdX\xa1\xbd\xb3^\x0e\xbb\x069\xa2<\xc4$\x06\xbd<\xb1u\xbb\xb6Yv\xbc\x97S+=s\xf3\x94\xbc\xe5\xef\x84\xbc\x89\xe3;\xbd\x19\xeb\x8e\xbc\x82v:\xbd\xd7\x15\x82<\n\x11\x8c\xbc(Vf\xbc\xe4\xc4\x00=?^[=\xc5\xcd(;\xb1\x99\xda;m\x99I\xbb\xa4\xc3\x9a\xbb\x85\xccB<\xee\xedZ<T\xbd\xad;\xb4.r;\xee\xc6\x99\xbc9\x1c\xde:m\xf0&\xbc{!\a=nZ\xba\xbc\x13y\xf5\xbc/\x1aE=\xf3G&\xbd\xc4c\x95<MP\xac;\x14j\x82\xbc\xfd\xa0\x1c\xb60]\x97\xbcR\x10\xc8<\xfda\r\xbc<\x8a\xb4<Y\x95\x97\xbc0\x84\xd8<\xcaN5\xbd\x0f\xb9Y=; !\xbd\x81\x0c\xa7\xbc\b\xf5\xfa;i\xc1\xdf\xba\x04\xf6O<\xcd\xe3L<31\xbe<h\x18=\xbd\xa7X\xb2\xbbj\x1c\x00=\xc9\xa5\x92<\xec\xc2V\xbdN\xd2\x8d<k\x86\x93;\xbc\\d;\xb62\xb5\xbc\x95g6\xbcL\xb6\xfc<\x0f\xb9\xd9\xbc\xe4m#<T\x14\x8b;\xb5q\xc4:\xc5\x8e\x99<T\xbd\xad<\x1c)I=\"D\x05=^=\xe5<\x10S\t<q\xb0\xc2;\x99?\xa0\xbc\xebp\x11<y\xc6\xe6<pF/\xbc\xe0\xad\x87<\xd9\xe9\xa8\xbc[\x90\x7f<\x95Oh\xbcc\x97\xb0\xbb55\x81<\xd7\xe5\xe5<\xc0s\xdd:4t\x10\xbdx\x9bb<y\x1d\xc4<\xe9E\x8d\xbb\x0c\xe5\xb2<\x1d\xea\xb9\xbas\xc3x\xbc\xa1m\x12\xbc\xd8\xa6V;\r\xcdd\xbb\xd0\x902\xbcw\xb30\xbc\x94\xbe\x93<(n\xb4<\x9f\x81\x1d=\xbb\xb3\xc1<1-\xfb\xbb8\xca\x98\xbc+\xdc\n\xbd)/\xa5;\x92\xd2\x1e<\x876\xd6:\x80\x8aE< (t<GM\xbe\xbcd\xe9u<h\x18\xbd<v\x88\xac;U?\x0f<\xa6\xd6\xd0<\xe0\xbcz<~G\xf3\xba&\x9a\x8d<\xc8z\x8e\xbc]U\xb3<\x01y\x06\xbd\x1c\x80&;\xd1\xbb6<\x14j\x82</\x02w;nZ\xba<\xfbE\xfc:fD\x16<\xde\x91\xf6<\xdaS<;\xbe!\x98=\xd4\xa7\xab\xbc\x1f\x15>=\x837\xab:\xd7\xfd\xb3<\xe1\xe7\xfe;_\x80\xb7<\xf6\xdc=\xbc\x91h\x0b<\b\xe6\a;pm\xf0<9[m\xbc\xb23\x8a;\xf9q\xd5\xbb\x99? \xbc\xfe\xcb\xa0\xbc\x04\xf6\xcf<*Z)\xbd\x8ae\x1d<\x98\xbd>;\xcca\xeb;\xd4P\xce\xbb\xd1\xd3\x04=\xf2\xdd\x12;\x04\x0e\x1e=\x9b+\x95\xbc(Vf\xbd\xabW\xdd<\x01Ij\xbb\x17\xc0\n;\x9d&\xfd<pm\xf0<SS\x9a\xbb[\xc0\x9b<U~\x9e\xbc\xc5\x8e\x99\xbc\xc8z\x8e\xbcJ\xbb\x14\xbd\xe9\x15\xf1;\xbd\xdeE=Ye\xfb;\x1d\xea9\xba\x80\x8aE=\xeb@\xf5<\xce\x8c\xef<k\xc5\xa2<\xf0\x9a@=\x9a\xe8B<\a\xbb\x03\xbc\xa5-.\xbd\xc4c\x15=\x02\")\xbcY}I<\xb8\x1e\xaa<a\xab\xbb;\x01\xb8\x15\xbcY\xbc\xd8\xbb\xbe\t\xca\xbb\xaf\xad\xe5\xbbf\x14\xfa;<\xa2\x02\xbc\x92{\xc1<\xe6\xbfh\xbc;\bS;\b\xf5z<7`\x05\xbc\x8a\xcb\xed\xbc<\xc9C<*\xb1\x06\xbbEy\x17\xbdB\x8d\xa2<h?~<V\x00\x80\xbcD\xdf\xe7<\xd6\xbaa<\xc28\x91\xbc$\x96\xca\xbc\xc0s\xdd;\xf2\xdd\x12=\xabW\xdd<\x91h\x0b<\t\x8f*;<\xa2\x82\xbb3\xda\xe0;\xd2|\xa7<\x17\xcf}\xbd\x045\xdf<\xde\x91v\xbc\xf6\xdc\xbd\xbc\x9e\xff\xbb\xbc\xe8\xab]\xbd\xd8\xbe$\xbd\xfc\x1e;;(V\xe6\xbc\xc3\xa2$;J\xfa#<\xef0-8\xc8z\x8e\xbc\xa8\x01\xd5\xba\x8f=\a<\xfa\x0b\x85<*B\xdb\xbc\xd7\x15\x02<\x95O\xe8\xbaY\x95\x97\xbc\xd1\x12\x14\xbd\xe1\xff\xcc<b-\x1d=5\xde\xa3\xbc&\x9a\x8d\xbbg\xae)<\xb6J\x83<w\xb3\xb0\xbc\xa7\xaf\x0f\xbcq\x98\xf4\xbc\xd9\xd1\xda<f,H<\xa8\xda\x93<\xcf\x0e\xd1;*B[;\xac\xf1\x0c\xbb&C0;\xf9J\x94\xbc\xd5\xd2/<\x88\xd0\x85:Sz\xdb\xbc\xbd\x87h\xb8\x8fLz<\xc2w\xa0\xbc\xdb;n\xbcu\x06K<dX!=F\xa4\x1b\xbd\x13\xa9\x11\xbck\xc5\xa2\xbc\xb9\x88=\xbc'\xc5\x91:B\xb4\xe3\xbc\xbd\xb7\x04=\xcf\xcfA<s\xc3x<\xa7p\x00=\xfb\x9cY=\xd6\xba\xe1;*B\xdb<\x11\xbd\x1c\xbd\x05\x9f\xf2;}\xf5-\xbc\x1f\xfdo\xbd\xf8\xefs\xbb\xb9\xaf\xfe;\xb1ZK<\x7f 2\xbc\xbd\xb7\x04=\xbf\x8b\xab\xbc8\x8b\x89\xbcCu\xd4;\x1f\xfdo=`\x02\x99\xbc\xa1\x94\xd3<\xa4\xabL\xbc^=\xe5\xbbho\x1a\xbc\x045\xdf<\xc28\x91<\xd8\xa6\xd6\xbc55\x01\xbdrq3=\xd2=\x98<_\xd7\x94\xbct\x1e\x99<m\xf0&<&C\xb0<(\xadC<-\a\x8f<\x82\x8e\b<\xe7\x1a\t\xbd\x1c)\xc9<\x8e\xbb\xa5\xbc\x88\xb8\xb7<q\xefQ:\n8\xcd<:\x9e\xbf<%\x18,\xbd\x06\xe2\xc4<1-{<\x0e\xf8\xe8:J\xe2U\xbc\xab\xae\xba\xb9\xb5q\xc4<:\x86q=\x0f\x92\x98<*Z)=4\xb3\x9f<\xaa\xc6\b\xbd\xa4\xea\xdb<n\x1b+\xbcD\xb8&\xbc\x0b{\x1f\xbc\x9fB\x0e\xbcK\x8b\xf8;f,\xc8:@\xa1-\xbc\x14\x13\xa5\xbc\xb2\xdc\xac<@\xe0\xbc\xb9\xa9D\xa7<\x95(\xa7<\x05\x9f\xf2<q\x98t<V\x0f\xf3\xbcF\xa4\x9b<\x19\x941\xbc\x8b\x0e\xc0<Y\xbc\xd8\xbc\x0e(\x85\xbb\x02\")=t\x1e\x19\xbcV\x0f\xf3\xbbs\xb4\x85=\xcaf\x03\xbc\xa2\xfef<X\xd4\xa6\xbb\xd0Q#\xbb\xaa\xed\xc9\xbc\x99~\xaf\xbc+\x03\xcc;\xe2\x81.\xbc\xde\x82\x83\xbc\xb0G\x15\xbc\xb6J\x83\xbb\x11\xe4]<\xea\x97R<\xb0\xf0\xb7\xbc<\xa2\x82\xbb\xb625\xbc9[m=\n\x11\x0c\xbb\xb0\xf07<\xaf\xad\xe5<\n\xf9=<\xcb\x0f&<%\x00\xde<\x18i\xad\xbc\x98\xbd\xbe\xbcv\x88,<\x9a\xa93\xbd|4\xbd;\xd0\xa8\x00=\xdcf\xf2<\x9a\x00\x11\xbb\xeb@\xf5<\xcf\xb7\xf3<y\xf6\x82\xbc\xd0Q\xa3<\xe5\xef\x84\xbc\xb8\x06\xdc\xbb\xd4h\x1c;\xffM\x82\xbc\xa7\x7f\xf3;5\x05\xe5\xba\x8b\x0e@\xbc`A\xa8<0\x84X<\x9c\x95\xa8<\xf0\xf1\x9d<\x9fiO<\xbe`\xa7\xbc5\x1d\xb3\xbc\xc8#1\xbc\xa3Y\x87<\x0e\xf8h\xbc\x1el\x9b<vI\x9d<z\x87\xd7\xbc\xd0Q#<\x1c)\xc9<\xe7\x1a\t\xbd\xb625;\x01\xb8\x95\xbc\xd5)\r=_\xd7\x14\xbd,m_<\xc7\xb9\x9d\xbc\x02\")\xbd\x1aU\xa2\xbc\x8b\xf6q\xbc\xe2i\xe0;\x17\xc0\n\xbd\xc9\xe4!;[\xc0\x1b=\xfa\xb4\xa7<\xb3\x85\xcf;ho\x9a\xbcA\x0bA=\t\x8f\xaa<\xcf&\x1f<m\xd8\xd8<\xdej5\xb9\x99~/\xba\xbf\xca\xba<\xd7\x15\x02\xbd\",\xb7:\xf6\xf4\x0b\xbd\xbd\x9f\xb6<\xdf\x13\xd8:t\x1e\x99;\x86ue<k\xadT=\xfft\xc3\xbcQO\xd7<\a\xcav<v1\xcf< \x97\x1f\xbc\xcb\x0f\xa6<\xeb1\x02<\xd8\xa6\xd6\xbb@\xf8\n\xbd\xfa\xb4'\xbc\x04\xcf\x8e\xbcAb\x9e<\xa9\xaa\xf7\xbbR\xb9j\xb9\xa7\x7f\xf3\xbc\x8f=\a<Ey\x17\xbd\xde\xa9D\xbc\xfb\x9c\xd9;\xbc5\xa3<u\x06\xcb;\xb1\xb1\xa8\xbb_\xbfF;D\xf7\xb5<X:\xf7\xbc\xdd?1;\xe1\x17\x1b\xbd\x1d\xd2k;\xd9(8<\xa3\x98\x96\xbd\xac\xf1\x0c<\x10#m<\x83\x1f\xdd\xbc\xe8\xea\xec<\xf9J\x14<\xf2\xc5\xc4;\x15\xa4y;\xb9\x88\xbd\xbc3\xda`\xbb\x00\xdf\xd6\xbc\xb7\xb4\x16=a\x93\xed\xbc\xa5\x84\x0b=Q\x8ef;F\n\xec\xba\xdf+\xa6\xbb\x86u\xe5\xbc\x93T\x80\xbb\x9dV\x19\xbcy\xf6\x02:\x90w~\xbc\x17\xc0\x8a\xbbT\xe4\xee\xb9\xf3n\xe7;\x03tn=\x80K6;\xe4\xc4\x80\xbb\xe4\xc4\x80\xbc\x1d\xea9\xbb\x0c\xe5\xb2;\x90w~\xbc\x84J\xe1\xbb\x03\xa4\n\xbb\x83\xf8\x1b<^=\xe5<\xb9\xdf\x9a\xbc\xb5qD\xbc\xe1\xe7~:m\xb1\x97<Sz\xdb;\xd8\xbe$\xbbvI\x9d:\x8a\xa4\xac\xbc\xdd\xe8\xd3\xbb\x17\xe7\xcb<M\x8f;\xbc\xbeH\xd9;lG\x84\xbb31\xbe;w\xf2\xbf;\xaa\xd5\xfb\xbb\x81\xf4X<|L\x8b<\xde\x91v<Q\xa64<c\xbe\xf1\xbb\xc67\xbc\xbb\x0b\xba\xae<\xd2=\x18\xbd\x17\xe7K\xbb\xa5l\xbd\xba\xc0s\xdd;\xb5q\xc4;\xd6\xbaa\xbc\xd7\x15\x02;fk\xd7<\xfdI?;\xd9\xd1Z\xba3\xda\xe0<\x15}\xb8<L\r\xda<\xd8\x7f\x15=\x03\xa4\n\xbb\\\x12\xe1\xbb\x1e-\x8c<\x8f%9=\x04\xcf\x8e\xbc\xdcf\xf2<\x0e\xf8\xe8\xbb2\x88\x9b<P\xfd\x11\xbc\xe1\x17\x9b\xbc\x11~\r\xbd\xfa\xf3\xb6\xbbbT\xde\xbb5\x05e\xbc\xe4\x94\xe4\xbb\xd0Q\xa3<\x88\xd0\x05=\xde\x91v<\xc4$\x06\xba\xb1\xb1(<Cu\xd4:*\x81\xea<$\x96\xca\xbc\xe3*Q<\xa2\xbfW<\x11\xe4\xdd;e\x83\xa5<_hi<N\xd2\x8d<;\bS\xbcZ\xe7\\\xbc}\xf5-\xbd\x12Nq<\xdcf\xf2<~w\x0f=1\x1e\x88\xbc+\x1b\x1a<\xa5l=;\x8bMO=\xb9\xc7\xcc\xbc,\x85-\xbcS;\xcc\xbb\x1b\xa7g\xbc7H\xb7\xbah?~<\n\xf9\xbd;!\x19\x01\xbc<\x8a\xb4\xbc3\xda\xe0;\x81\xf4X<jC\xc1<R\x10\xc8<.\xb01\xbc\x10;\xbb;#\xed\xa7<M\x8f;<6\xc6\xd5\xb9\xf2\xdd\x12\xbc\x95Oh<\xbb\xb3\xc1;\x0b\xba\xae\xbb&C0\xbc\x9e\xc0,<\"k\xc6\xbc\xb0\xf0\xb7<\x86\x8d\xb3;\x1b\xd7\x03\xb8\xab\xae\xba\xbb\xe7A\xca\xbc\xaa\xc6\x88\xbb\xfb6\x89:\xa4\xc3\x9a<\xd4\xa7+\xbc\xf2\x04\xd4;y\xde\xb4\xbcH\xb7Q\xbc\xde\x91v\xbch0\x8b<l/6\xbc\x1d\x02\x88\xbc.YT<,F\x1e\xbd\xedk\xf9\xba\x97;\xdd\xba\b%\x17<\x0c$B\xbce\x83\xa5\xb8'\xec\xd2\xbc\r\x8e\xd5\xbc\xd8g\xc7\xbbs\xb4\x05\xbd\x06\xfa\x92\xbc\xdc~\xc0<\xc3\xe13=\x15}\xb8\xbc\xc0\r\r\xbb(Vf\xba\xf8\a\xc2<$o\t=\x80c\x04=\xd7\xe5\xe5\xbc4\x9bQ<\xc9\xa5\x92<[\xc0\x9b;\xf4\xb19\xbc<\xb1\xf5\xbc\xec\xc2V\xbd\x17\xff\x99\xbc\xee\xaeK\xbc\xd7\xfd3<Oc\xe2<\xb3\x85\xcf\xbc\xb2\x03\xee;'+b<*Z)\xbb\xb0\xd8\xe9;\x1ch\xd8\xbc\x90\xe6)\xbc\xee\x96}<\x7f\xc9T\xbd\xf3/\xd8:\xae\x1c\x11\xbc\xba\xf2P<\xfa\x0b\x05<\"\x83\x94\xbcR\x10\xc8<l/\xb6\xbc\xe6\x80\xd9<a\xab\xbb<\x00\xf7\xa4\xbc\xfd\xa0\x9c\xbb\x93$\xe4<{!\x87\xbc`\xea\xca:\x11\xbd\x1c<\xaeC\xd2\xbc\x1d\xab*<f,H<\x86\xa5\x01=4t\x90<@\xf8\n=\x13\xd0\xd2\xbb\xb6J\x03\xbc\xc8#\xb1<xt\xa1<\xd3\xe6:=\x045_<#\xae\x98;zHH<\x86ue8T\x14\x8b<\xc7\xe0\xde\xbc\xb0\xd8i\xbc\xc3\x8aV=\xbe!\x18=\xf2\xdd\x92<!\x19\x81\xbc\xb9\xc7L\xbcC6\xc5<g\x96[=\xe5\xef\x84\xbcu\xee|\xbc\xbb\x8c\x00\xbc31>\xbc\x01\xb8\x95<fD\x96\xbc\xba\xf2P<\xad[\xa0\xbc/\xf3\x83<\xd7\x15\x02:\xfc\xdf\xab\xbcW\xa9\"\xbdi\xc1_\xbc\xcd\xbc\x0b<\x18i\xad\xbbSS\x1a\xbae\xda\x02\xbd\xd8\xa6\xd6<}\x1c\xef<7H\xb7<5\x05\xe5<pF/9\xf3G&\xbd\xa6\xd6P\xbd9\x1c^\xbd\xfb\x9cY<9[\xed;\xb1\xb1\xa8\xbc\x0e\xf8\xe8<\xd9\xe9\xa8\xbc\x8f%\xb9\xbb\xd3\xe6\xba<&\x82?<\xd2=\x98\xbc\x9d\x17\x8a<{\xca\xa9<\x1aU\xa2<" "content" "### Summary:\n\nThe video focuses on how to handle product data in retail app development, showcasing a transition from using a relational database model to utilizing Redis with the RedisOM library for more efficient data management. Initially, it describes a scenario where a retail app displays a list of electronics, including a name, image, and price for each product, as well as a detailed view featuring comprehensive details like multiple images, description, manufacturer, dimensions, and weight.\n\nIn a traditional relational database, two separate tables would be used: 'products' for the list view and 'product details' for the detailed view. However, the video introduces a more streamlined approach using Redis, where two collections, 'products' and 'product details,' are initially created. It then shifts to recommend an embedded pattern where product details are embedded within the products collection itself. This method allows querying for specific fields based on the view (list or detailed), making data retrieval more efficient and keeping all relevant information in one place.\n\nThe video concludes by demonstrating how to index and query data using the embedded pattern and showcases the benefits of this approach using Redis Insight, emphasizing improved data organization and retrieval.\n\n### Example Questions and Answers:\n\n**Q1: How does the video propose handling product data in a retail app?**  \nA1: The video suggests initially using two collections for product data \xe2\x80\x93 one for the list view and another for detailed product information \xe2\x80\x93 and then recommends an embedded pattern where product details are incorporated directly into the products collection for more efficient data management.\n\n**Q2: What are the key fields included in the 'products' collection as per the video?**  \nA2: The 'products' collection includes fields like name, image, and price, which are intended for the product list view.\n\n**Q3: What kind of information is stored in the 'product details' collection?**  \nA3: The 'product details' collection contains more comprehensive information such as product ID, description, manufacturer, dimensions, weight, and a list of images.\n\n**Q4: How can the embedded pattern benefit data organization in a retail app?**  \nA4: The embedded pattern consolidates all relevant data in one place by embedding detailed product information within the main products collection, allowing for more streamlined and efficient data queries.\n\n**Q5: How is data indexed and queried using the embedded pattern, according to the video?**  \nA5: The video demonstrates indexing the data by setting up models with the embedded pattern and shows how to query the data by specifying the fields needed for each view (list or detailed), leading to more efficient data retrieval.\n\n**Q6: What tool is highlighted in the video for visualizing the benefits of the embedded pattern in Redis?**  \nA6: Redis Insight is highlighted as the tool for visualizing how the embedded pattern organizes all product data in one place, showcasing the advantages of this approach in data management." "metadata" "{\"id\":\"c9Rr\\-\\-1r6pk\",\"link\":\"https://www.youtube.com/watch?v=c9Rr\\-\\-1r6pk\",\"title\":\"NoSQL Data Modeling with Redis: Building 1\\-to\\-1 Relationships\",\"description\":\"How does Redis Enterprise's NoSQL database help businesses simplify their 1\\-to\\-1 relationship data modeling? Learn more by downloading our free e\\-book: https://redis.com/docs/8\\-data\\-modeling\\-patterns\\-in\\-redis/\\n\\nIf you're a business running a e\\-commerce store, chances are you're constantly modeling 1\\-to\\-1 relationships to curate catalogs of product with not just a product name and price, but supplementary information and necessary details customers look for before making a purchase. As a NoSQL database, Redis provides a simplified way of data modeling with just a few easy patterns. Learn how to embed your data and start building quickly and with ease using Redis Enterprise for your next 1\\-to\\-relationship data model build.\\n\\nSign up and use for Redis Cloud for free: https://redis.info/3pyzVea\\n\\n\\\"Do You Really Know Redis?\\\" Download this white paper to learn more: https://redis.com/docs/really\\-know\\-redis/\\n\\nFrom the Blog: Introducing Redis OM for Python \\- https://redis.com/blog/introducing\\-redis\\-om\\-for\\-python/\\n\\nLearn more about Redis: https://developer.redis.com/\\n\\nSee apps using Redis as a database on Redis Launchpad: https://launchpad.redis.com/\\n\\n#RedisEnterprise #Redis #DataModeling #NoSQL\",\"thumbnail\":\"https://i.ytimg.com/vi/c9Rr\\-\\-1r6pk/maxresdefault.jpg\"}"
"EXEC"
"SADD" "openai-video-vectors" "AJhTduDOVCs"
"SADD" "openai-video-vectors" "c9Rr--1r6pk"
